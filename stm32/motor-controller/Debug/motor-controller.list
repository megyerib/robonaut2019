
motor-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002264  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002324  08002324  00012324  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000174  2000000c  080023a0  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000180  080023a0  00020180  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a971  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003714  00000000  00000000  0003a9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000af8  00000000  00000000  0003e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f60  00000000  00000000  0003ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000071d4  00000000  00000000  0003fb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b56  00000000  00000000  00046cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004a842  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000205c  00000000  00000000  0004a8c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000806c  00000000  00000000  0004c91c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800230c 	.word	0x0800230c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800230c 	.word	0x0800230c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <APP_Init>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void APP_Init(void)
{
 8000248:	b510      	push	{r4, lr}
	BSP_LEDStart();
 800024a:	f000 f847 	bl	80002dc <BSP_LEDStart>
	//BSP_UARTStart();
	//BSP_ADCStart();
	BSP_PWMStart();
 800024e:	f000 f84b 	bl	80002e8 <BSP_PWMStart>
	initComm();
 8000252:	f000 f801 	bl	8000258 <initComm>
}
 8000256:	bd10      	pop	{r4, pc}

08000258 <initComm>:

// Global function definitions -----------------------------------------------------------------------------------------

void initComm()
{
	i = 0;
 8000258:	2200      	movs	r2, #0
{
 800025a:	b510      	push	{r4, lr}
	i = 0;
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <initComm+0x14>)
	HAL_UART_Receive_IT(MAIN_BOARD_UART, &rx[i], 1);
 800025e:	4904      	ldr	r1, [pc, #16]	; (8000270 <initComm+0x18>)
	i = 0;
 8000260:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(MAIN_BOARD_UART, &rx[i], 1);
 8000262:	4804      	ldr	r0, [pc, #16]	; (8000274 <initComm+0x1c>)
 8000264:	3201      	adds	r2, #1
 8000266:	f001 fa07 	bl	8001678 <HAL_UART_Receive_IT>
}
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000003c 	.word	0x2000003c
 8000270:	20000028 	.word	0x20000028
 8000274:	20000110 	.word	0x20000110

08000278 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000278:	b570      	push	{r4, r5, r6, lr}
	if (huart == MAIN_BOARD_UART)
 800027a:	4e0c      	ldr	r6, [pc, #48]	; (80002ac <HAL_UART_RxCpltCallback+0x34>)
 800027c:	42b0      	cmp	r0, r6
 800027e:	d113      	bne.n	80002a8 <HAL_UART_RxCpltCallback+0x30>
	{
		if (rx[i] == '\n')
 8000280:	4d0b      	ldr	r5, [pc, #44]	; (80002b0 <HAL_UART_RxCpltCallback+0x38>)
 8000282:	4c0c      	ldr	r4, [pc, #48]	; (80002b4 <HAL_UART_RxCpltCallback+0x3c>)
 8000284:	682b      	ldr	r3, [r5, #0]
 8000286:	5ce2      	ldrb	r2, [r4, r3]
			HAL_UART_Transmit_IT(MAIN_BOARD_UART, response, 5);
			i = 0;
		}
		else
		{
			i++;
 8000288:	3301      	adds	r3, #1
		if (rx[i] == '\n')
 800028a:	2a0a      	cmp	r2, #10
 800028c:	d105      	bne.n	800029a <HAL_UART_RxCpltCallback+0x22>
			HAL_UART_Transmit_IT(MAIN_BOARD_UART, response, 5);
 800028e:	3a05      	subs	r2, #5
 8000290:	4909      	ldr	r1, [pc, #36]	; (80002b8 <HAL_UART_RxCpltCallback+0x40>)
 8000292:	0030      	movs	r0, r6
 8000294:	f001 f9c2 	bl	800161c <HAL_UART_Transmit_IT>
			i = 0;
 8000298:	2300      	movs	r3, #0
			i++;
 800029a:	602b      	str	r3, [r5, #0]
		}

		HAL_UART_Receive_IT(MAIN_BOARD_UART, &rx[i], 1);
 800029c:	6829      	ldr	r1, [r5, #0]
 800029e:	2201      	movs	r2, #1
 80002a0:	1861      	adds	r1, r4, r1
 80002a2:	0030      	movs	r0, r6
 80002a4:	f001 f9e8 	bl	8001678 <HAL_UART_Receive_IT>
	}
}
 80002a8:	bd70      	pop	{r4, r5, r6, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	20000110 	.word	0x20000110
 80002b0:	2000003c 	.word	0x2000003c
 80002b4:	20000028 	.word	0x20000028
 80002b8:	20000000 	.word	0x20000000

080002bc <BSP_SetLEDBurstOFF5V>:

// Local (static) function definitions ---------------------------------------------------------------------------------

void BSP_SetLEDBurstOFF5V(void)
{
	 HAL_GPIO_WritePin(BurstOFF5V_GPIO_Port, BurstOFF5V_Pin, GPIO_PIN_SET);
 80002bc:	2090      	movs	r0, #144	; 0x90
{
 80002be:	b510      	push	{r4, lr}
	 HAL_GPIO_WritePin(BurstOFF5V_GPIO_Port, BurstOFF5V_Pin, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2180      	movs	r1, #128	; 0x80
 80002c4:	05c0      	lsls	r0, r0, #23
 80002c6:	f000 fb37 	bl	8000938 <HAL_GPIO_WritePin>
}
 80002ca:	bd10      	pop	{r4, pc}

080002cc <BSP_SetLEDBurtsOFF6V>:

void BSP_SetLEDBurtsOFF6V(void)
{
	HAL_GPIO_WritePin(BurstOFF6V_GPIO_Port, BurstOFF6V_Pin, GPIO_PIN_SET);
 80002cc:	2090      	movs	r0, #144	; 0x90
{
 80002ce:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BurstOFF6V_GPIO_Port, BurstOFF6V_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	05c0      	lsls	r0, r0, #23
 80002d6:	f000 fb2f 	bl	8000938 <HAL_GPIO_WritePin>
}
 80002da:	bd10      	pop	{r4, pc}

080002dc <BSP_LEDStart>:
{
	HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
}

void BSP_LEDStart(void)
{
 80002dc:	b510      	push	{r4, lr}
	BSP_SetLEDBurstOFF5V();
 80002de:	f7ff ffed 	bl	80002bc <BSP_SetLEDBurstOFF5V>
	BSP_SetLEDBurtsOFF6V();
 80002e2:	f7ff fff3 	bl	80002cc <BSP_SetLEDBurtsOFF6V>
}
 80002e6:	bd10      	pop	{r4, pc}

080002e8 <BSP_PWMStart>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void BSP_PWMStart()
{
 80002e8:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <BSP_PWMStart+0x38>)
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 ff2f 	bl	8001150 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PERIOD/2);	//to prevent any impulse on the output by starting
 80002f2:	22fa      	movs	r2, #250	; 0xfa
 80002f4:	6823      	ldr	r3, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PERIOD/2);	//to prevent any impulse on the output by starting
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PERIOD/2);	//to prevent any impulse on the output by starting
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PERIOD/2);	//to prevent any impulse on the output by starting

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002f6:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PERIOD/2);	//to prevent any impulse on the output by starting
 80002f8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002fa:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PERIOD/2);	//to prevent any impulse on the output by starting
 80002fc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PERIOD/2);	//to prevent any impulse on the output by starting
 80002fe:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PERIOD/2);	//to prevent any impulse on the output by starting
 8000300:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000302:	f001 f8f5 	bl	80014f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000306:	2104      	movs	r1, #4
 8000308:	0020      	movs	r0, r4
 800030a:	f001 f8f1 	bl	80014f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800030e:	2108      	movs	r1, #8
 8000310:	0020      	movs	r0, r4
 8000312:	f001 f8ed 	bl	80014f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000316:	210c      	movs	r1, #12
 8000318:	0020      	movs	r0, r4
 800031a:	f001 f8e9 	bl	80014f0 <HAL_TIM_PWM_Start>
}
 800031e:	bd10      	pop	{r4, pc}
 8000320:	200000d0 	.word	0x200000d0

08000324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000324:	b510      	push	{r4, lr}
 8000326:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000328:	f000 fdb6 	bl	8000e98 <HAL_RCC_GetHCLKFreq>
 800032c:	21fa      	movs	r1, #250	; 0xfa
 800032e:	0089      	lsls	r1, r1, #2
 8000330:	f7ff fefe 	bl	8000130 <__udivsi3>
 8000334:	f000 fa00 	bl	8000738 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000338:	2001      	movs	r0, #1
 800033a:	2200      	movs	r2, #0
 800033c:	0021      	movs	r1, r4
 800033e:	4240      	negs	r0, r0
 8000340:	f000 f9c0 	bl	80006c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000344:	2000      	movs	r0, #0
 8000346:	bd10      	pop	{r4, pc}

08000348 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000348:	2310      	movs	r3, #16
 800034a:	4a06      	ldr	r2, [pc, #24]	; (8000364 <HAL_Init+0x1c>)
{
 800034c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800034e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000350:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000356:	f7ff ffe5 	bl	8000324 <HAL_InitTick>
  HAL_MspInit();
 800035a:	f001 fd8f 	bl	8001e7c <HAL_MspInit>
}
 800035e:	2000      	movs	r0, #0
 8000360:	bd10      	pop	{r4, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	40022000 	.word	0x40022000

08000368 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000368:	4a02      	ldr	r2, [pc, #8]	; (8000374 <HAL_IncTick+0xc>)
 800036a:	6813      	ldr	r3, [r2, #0]
 800036c:	3301      	adds	r3, #1
 800036e:	6013      	str	r3, [r2, #0]
}
 8000370:	4770      	bx	lr
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	20000040 	.word	0x20000040

08000378 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000378:	4b01      	ldr	r3, [pc, #4]	; (8000380 <HAL_GetTick+0x8>)
 800037a:	6818      	ldr	r0, [r3, #0]
}
 800037c:	4770      	bx	lr
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	20000040 	.word	0x20000040

08000384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000386:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000388:	f7ff fff6 	bl	8000378 <HAL_GetTick>
  uint32_t wait = Delay;
 800038c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800038e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000390:	1c63      	adds	r3, r4, #1
 8000392:	1e5a      	subs	r2, r3, #1
 8000394:	4193      	sbcs	r3, r2
 8000396:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000398:	f7ff ffee 	bl	8000378 <HAL_GetTick>
 800039c:	1b40      	subs	r0, r0, r5
 800039e:	42a0      	cmp	r0, r4
 80003a0:	d3fa      	bcc.n	8000398 <HAL_Delay+0x14>
  {
  }
}
 80003a2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080003a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80003a8:	2001      	movs	r0, #1
  if(hadc == NULL)
 80003aa:	2c00      	cmp	r4, #0
 80003ac:	d072      	beq.n	8000494 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80003ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d106      	bne.n	80003c2 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80003b4:	0022      	movs	r2, r4
 80003b6:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80003b8:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003ba:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80003bc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80003be:	f001 fc65 	bl	8001c8c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d500      	bpl.n	80003ca <HAL_ADC_Init+0x26>
 80003c8:	e079      	b.n	80004be <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003ca:	2204      	movs	r2, #4
 80003cc:	6823      	ldr	r3, [r4, #0]
 80003ce:	6898      	ldr	r0, [r3, #8]
 80003d0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80003d2:	d000      	beq.n	80003d6 <HAL_ADC_Init+0x32>
 80003d4:	e073      	b.n	80004be <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003d8:	4942      	ldr	r1, [pc, #264]	; (80004e4 <HAL_ADC_Init+0x140>)
 80003da:	4011      	ands	r1, r2
 80003dc:	2202      	movs	r2, #2
 80003de:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80003e0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80003e2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	400a      	ands	r2, r1
 80003e8:	2a01      	cmp	r2, #1
 80003ea:	d000      	beq.n	80003ee <HAL_ADC_Init+0x4a>
 80003ec:	e06d      	b.n	80004ca <HAL_ADC_Init+0x126>
 80003ee:	6819      	ldr	r1, [r3, #0]
 80003f0:	4211      	tst	r1, r2
 80003f2:	d102      	bne.n	80003fa <HAL_ADC_Init+0x56>
 80003f4:	68da      	ldr	r2, [r3, #12]
 80003f6:	0412      	lsls	r2, r2, #16
 80003f8:	d567      	bpl.n	80004ca <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003fa:	68da      	ldr	r2, [r3, #12]
 80003fc:	493a      	ldr	r1, [pc, #232]	; (80004e8 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003fe:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000400:	400a      	ands	r2, r1
 8000402:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000404:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000406:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000408:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800040a:	69e2      	ldr	r2, [r4, #28]
 800040c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800040e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000410:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000412:	3a01      	subs	r2, #1
 8000414:	1e56      	subs	r6, r2, #1
 8000416:	41b2      	sbcs	r2, r6
 8000418:	0316      	lsls	r6, r2, #12
 800041a:	68e2      	ldr	r2, [r4, #12]
 800041c:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800041e:	6922      	ldr	r2, [r4, #16]
 8000420:	430f      	orrs	r7, r1
 8000422:	2a02      	cmp	r2, #2
 8000424:	d100      	bne.n	8000428 <HAL_ADC_Init+0x84>
 8000426:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000428:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800042a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800042c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800042e:	433a      	orrs	r2, r7
 8000430:	4332      	orrs	r2, r6
 8000432:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000434:	2901      	cmp	r1, #1
 8000436:	d104      	bne.n	8000442 <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000438:	2d00      	cmp	r5, #0
 800043a:	d12c      	bne.n	8000496 <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0249      	lsls	r1, r1, #9
 8000440:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000442:	20c2      	movs	r0, #194	; 0xc2
 8000444:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000446:	30ff      	adds	r0, #255	; 0xff
 8000448:	4281      	cmp	r1, r0
 800044a:	d002      	beq.n	8000452 <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800044c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800044e:	4301      	orrs	r1, r0
 8000450:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000452:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000454:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000456:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000458:	4311      	orrs	r1, r2
 800045a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800045c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800045e:	4281      	cmp	r1, r0
 8000460:	d002      	beq.n	8000468 <HAL_ADC_Init+0xc4>
 8000462:	1e48      	subs	r0, r1, #1
 8000464:	2806      	cmp	r0, #6
 8000466:	d807      	bhi.n	8000478 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000468:	2507      	movs	r5, #7
 800046a:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800046c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800046e:	43a8      	bics	r0, r5
 8000470:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000472:	6958      	ldr	r0, [r3, #20]
 8000474:	4301      	orrs	r1, r0
 8000476:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	491c      	ldr	r1, [pc, #112]	; (80004ec <HAL_ADC_Init+0x148>)
 800047c:	400b      	ands	r3, r1
 800047e:	429a      	cmp	r2, r3
 8000480:	d111      	bne.n	80004a6 <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000482:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000484:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000486:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000488:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800048a:	4393      	bics	r3, r2
 800048c:	001a      	movs	r2, r3
 800048e:	2301      	movs	r3, #1
 8000490:	4313      	orrs	r3, r2
 8000492:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000496:	2020      	movs	r0, #32
 8000498:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800049a:	4328      	orrs	r0, r5
 800049c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800049e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80004a0:	4301      	orrs	r1, r0
 80004a2:	64a1      	str	r1, [r4, #72]	; 0x48
 80004a4:	e7cd      	b.n	8000442 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80004a6:	2212      	movs	r2, #18
 80004a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004aa:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80004ac:	4393      	bics	r3, r2
 80004ae:	001a      	movs	r2, r3
 80004b0:	2310      	movs	r3, #16
 80004b2:	4313      	orrs	r3, r2
 80004b4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004b8:	4303      	orrs	r3, r0
 80004ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80004bc:	e7ea      	b.n	8000494 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004be:	2310      	movs	r3, #16
 80004c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80004c2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004c4:	4313      	orrs	r3, r2
 80004c6:	6463      	str	r3, [r4, #68]	; 0x44
 80004c8:	e7e4      	b.n	8000494 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80004ca:	2118      	movs	r1, #24
 80004cc:	68da      	ldr	r2, [r3, #12]
 80004ce:	438a      	bics	r2, r1
 80004d0:	68a1      	ldr	r1, [r4, #8]
 80004d2:	430a      	orrs	r2, r1
 80004d4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004d6:	6919      	ldr	r1, [r3, #16]
 80004d8:	6862      	ldr	r2, [r4, #4]
 80004da:	0089      	lsls	r1, r1, #2
 80004dc:	0889      	lsrs	r1, r1, #2
 80004de:	4311      	orrs	r1, r2
 80004e0:	6119      	str	r1, [r3, #16]
 80004e2:	e78a      	b.n	80003fa <HAL_ADC_Init+0x56>
 80004e4:	fffffefd 	.word	0xfffffefd
 80004e8:	fffe0219 	.word	0xfffe0219
 80004ec:	833fffe7 	.word	0x833fffe7

080004f0 <HAL_ADC_ConvCpltCallback>:
 80004f0:	4770      	bx	lr

080004f2 <HAL_ADC_LevelOutOfWindowCallback>:
 80004f2:	4770      	bx	lr

080004f4 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80004f4:	4770      	bx	lr
	...

080004f8 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80004f8:	2204      	movs	r2, #4
 80004fa:	6803      	ldr	r3, [r0, #0]
{
 80004fc:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80004fe:	6819      	ldr	r1, [r3, #0]
{
 8000500:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000502:	4211      	tst	r1, r2
 8000504:	d002      	beq.n	800050c <HAL_ADC_IRQHandler+0x14>
 8000506:	6859      	ldr	r1, [r3, #4]
 8000508:	4211      	tst	r1, r2
 800050a:	d106      	bne.n	800051a <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800050c:	2208      	movs	r2, #8
 800050e:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000510:	4211      	tst	r1, r2
 8000512:	d028      	beq.n	8000566 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000514:	6859      	ldr	r1, [r3, #4]
 8000516:	4211      	tst	r1, r2
 8000518:	d025      	beq.n	8000566 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800051a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800051c:	06d2      	lsls	r2, r2, #27
 800051e:	d404      	bmi.n	800052a <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	430a      	orrs	r2, r1
 8000528:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800052a:	22c0      	movs	r2, #192	; 0xc0
 800052c:	68d9      	ldr	r1, [r3, #12]
 800052e:	0112      	lsls	r2, r2, #4
 8000530:	4211      	tst	r1, r2
 8000532:	d112      	bne.n	800055a <HAL_ADC_IRQHandler+0x62>
 8000534:	6a22      	ldr	r2, [r4, #32]
 8000536:	2a00      	cmp	r2, #0
 8000538:	d10f      	bne.n	800055a <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	0712      	lsls	r2, r2, #28
 800053e:	d50c      	bpl.n	800055a <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	0752      	lsls	r2, r2, #29
 8000544:	d43c      	bmi.n	80005c0 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000546:	210c      	movs	r1, #12
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	438a      	bics	r2, r1
 800054c:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000550:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <HAL_ADC_IRQHandler+0xdc>)
 8000552:	401a      	ands	r2, r3
 8000554:	2301      	movs	r3, #1
 8000556:	4313      	orrs	r3, r2
 8000558:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800055a:	0020      	movs	r0, r4
 800055c:	f7ff ffc8 	bl	80004f0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000560:	220c      	movs	r2, #12
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000566:	2580      	movs	r5, #128	; 0x80
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	422a      	tst	r2, r5
 800056e:	d00c      	beq.n	800058a <HAL_ADC_IRQHandler+0x92>
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	422b      	tst	r3, r5
 8000574:	d009      	beq.n	800058a <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800057a:	025b      	lsls	r3, r3, #9
 800057c:	4313      	orrs	r3, r2
 800057e:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000580:	0020      	movs	r0, r4
 8000582:	f7ff ffb6 	bl	80004f2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800058a:	2210      	movs	r2, #16
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	6819      	ldr	r1, [r3, #0]
 8000590:	4211      	tst	r1, r2
 8000592:	d014      	beq.n	80005be <HAL_ADC_IRQHandler+0xc6>
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	4211      	tst	r1, r2
 8000598:	d011      	beq.n	80005be <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800059a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800059c:	2a01      	cmp	r2, #1
 800059e:	d002      	beq.n	80005a6 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80005a0:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80005a2:	07d2      	lsls	r2, r2, #31
 80005a4:	d508      	bpl.n	80005b8 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005a6:	2202      	movs	r2, #2
 80005a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 80005aa:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005ac:	430a      	orrs	r2, r1
 80005ae:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005b0:	2210      	movs	r2, #16
 80005b2:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80005b4:	f7ff ff9e 	bl	80004f4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005b8:	2210      	movs	r2, #16
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005c0:	2320      	movs	r3, #32
 80005c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005c4:	4313      	orrs	r3, r2
 80005c6:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005c8:	2301      	movs	r3, #1
 80005ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005cc:	4313      	orrs	r3, r2
 80005ce:	64a3      	str	r3, [r4, #72]	; 0x48
 80005d0:	e7c3      	b.n	800055a <HAL_ADC_IRQHandler+0x62>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	fffffefe 	.word	0xfffffefe

080005d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80005d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80005da:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005dc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80005de:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005e0:	3440      	adds	r4, #64	; 0x40
 80005e2:	7823      	ldrb	r3, [r4, #0]
{
 80005e4:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80005e6:	2002      	movs	r0, #2
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d02b      	beq.n	8000644 <HAL_ADC_ConfigChannel+0x6c>
 80005ec:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005ee:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005f0:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005f2:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80005f4:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005f6:	0740      	lsls	r0, r0, #29
 80005f8:	d452      	bmi.n	80006a0 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80005fa:	482c      	ldr	r0, [pc, #176]	; (80006ac <HAL_ADC_ConfigChannel+0xd4>)
 80005fc:	684f      	ldr	r7, [r1, #4]
 80005fe:	680d      	ldr	r5, [r1, #0]
 8000600:	4287      	cmp	r7, r0
 8000602:	d03b      	beq.n	800067c <HAL_ADC_ConfigChannel+0xa4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000604:	40ab      	lsls	r3, r5
 8000606:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000608:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800060a:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800060c:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800060e:	4338      	orrs	r0, r7
 8000610:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000612:	429e      	cmp	r6, r3
 8000614:	d00f      	beq.n	8000636 <HAL_ADC_ConfigChannel+0x5e>
 8000616:	3e01      	subs	r6, #1
 8000618:	2e06      	cmp	r6, #6
 800061a:	d90c      	bls.n	8000636 <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800061c:	688b      	ldr	r3, [r1, #8]
 800061e:	2107      	movs	r1, #7
 8000620:	6950      	ldr	r0, [r2, #20]
 8000622:	4008      	ands	r0, r1
 8000624:	4283      	cmp	r3, r0
 8000626:	d006      	beq.n	8000636 <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000628:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800062a:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800062c:	4388      	bics	r0, r1
 800062e:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000630:	6950      	ldr	r0, [r2, #20]
 8000632:	4303      	orrs	r3, r0
 8000634:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000636:	002b      	movs	r3, r5
 8000638:	3b10      	subs	r3, #16
 800063a:	2b01      	cmp	r3, #1
 800063c:	d903      	bls.n	8000646 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800063e:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000640:	2300      	movs	r3, #0
 8000642:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000644:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <HAL_ADC_ConfigChannel+0xd8>)
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	2d10      	cmp	r5, #16
 800064e:	d013      	beq.n	8000678 <HAL_ADC_ConfigChannel+0xa0>
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000656:	2d10      	cmp	r5, #16
 8000658:	d1f1      	bne.n	800063e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <HAL_ADC_ConfigChannel+0xdc>)
 800065c:	4916      	ldr	r1, [pc, #88]	; (80006b8 <HAL_ADC_ConfigChannel+0xe0>)
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	f7ff fd66 	bl	8000130 <__udivsi3>
 8000664:	230a      	movs	r3, #10
 8000666:	4358      	muls	r0, r3
 8000668:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800066a:	9b01      	ldr	r3, [sp, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0e6      	beq.n	800063e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000670:	9b01      	ldr	r3, [sp, #4]
 8000672:	3b01      	subs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	e7f8      	b.n	800066a <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000678:	0412      	lsls	r2, r2, #16
 800067a:	e7ea      	b.n	8000652 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800067c:	40ab      	lsls	r3, r5
 800067e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000680:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000682:	002b      	movs	r3, r5
 8000684:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000686:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000688:	2b01      	cmp	r3, #1
 800068a:	d8d8      	bhi.n	800063e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_ADC_ConfigChannel+0xd8>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	2d10      	cmp	r5, #16
 8000692:	d003      	beq.n	800069c <HAL_ADC_ConfigChannel+0xc4>
 8000694:	4909      	ldr	r1, [pc, #36]	; (80006bc <HAL_ADC_ConfigChannel+0xe4>)
 8000696:	400a      	ands	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	e7d0      	b.n	800063e <HAL_ADC_ConfigChannel+0x66>
 800069c:	4908      	ldr	r1, [pc, #32]	; (80006c0 <HAL_ADC_ConfigChannel+0xe8>)
 800069e:	e7fa      	b.n	8000696 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006a0:	2220      	movs	r2, #32
 80006a2:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80006a4:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006a6:	430a      	orrs	r2, r1
 80006a8:	646a      	str	r2, [r5, #68]	; 0x44
 80006aa:	e7c9      	b.n	8000640 <HAL_ADC_ConfigChannel+0x68>
 80006ac:	00001001 	.word	0x00001001
 80006b0:	40012708 	.word	0x40012708
 80006b4:	20000008 	.word	0x20000008
 80006b8:	000f4240 	.word	0x000f4240
 80006bc:	ffbfffff 	.word	0xffbfffff
 80006c0:	ff7fffff 	.word	0xff7fffff

080006c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80006c8:	2800      	cmp	r0, #0
 80006ca:	da14      	bge.n	80006f6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006cc:	230f      	movs	r3, #15
 80006ce:	b2c0      	uxtb	r0, r0
 80006d0:	4003      	ands	r3, r0
 80006d2:	3b08      	subs	r3, #8
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_NVIC_SetPriority+0x58>)
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	2203      	movs	r2, #3
 80006de:	4010      	ands	r0, r2
 80006e0:	4090      	lsls	r0, r2
 80006e2:	32fc      	adds	r2, #252	; 0xfc
 80006e4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006e6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ea:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ec:	69dc      	ldr	r4, [r3, #28]
 80006ee:	43ac      	bics	r4, r5
 80006f0:	4321      	orrs	r1, r4
 80006f2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f6:	2503      	movs	r5, #3
 80006f8:	0883      	lsrs	r3, r0, #2
 80006fa:	4028      	ands	r0, r5
 80006fc:	40a8      	lsls	r0, r5
 80006fe:	35fc      	adds	r5, #252	; 0xfc
 8000700:	002e      	movs	r6, r5
 8000702:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_NVIC_SetPriority+0x5c>)
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	189b      	adds	r3, r3, r2
 8000708:	22c0      	movs	r2, #192	; 0xc0
 800070a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070c:	4029      	ands	r1, r5
 800070e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	589c      	ldr	r4, [r3, r2]
 8000714:	43b4      	bics	r4, r6
 8000716:	4321      	orrs	r1, r4
 8000718:	5099      	str	r1, [r3, r2]
 800071a:	e7eb      	b.n	80006f4 <HAL_NVIC_SetPriority+0x30>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000e100 	.word	0xe000e100

08000724 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000724:	231f      	movs	r3, #31
 8000726:	4018      	ands	r0, r3
 8000728:	3b1e      	subs	r3, #30
 800072a:	4083      	lsls	r3, r0
 800072c:	4a01      	ldr	r2, [pc, #4]	; (8000734 <HAL_NVIC_EnableIRQ+0x10>)
 800072e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000730:	4770      	bx	lr
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	e000e100 	.word	0xe000e100

08000738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <HAL_SYSTICK_Config+0x28>)
 800073a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800073c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073e:	4293      	cmp	r3, r2
 8000740:	d80d      	bhi.n	800075e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000742:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074a:	6a03      	ldr	r3, [r0, #32]
 800074c:	0609      	lsls	r1, r1, #24
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	430b      	orrs	r3, r1
 8000754:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000756:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075e:	4770      	bx	lr
 8000760:	00ffffff 	.word	0x00ffffff
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800076e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000770:	2804      	cmp	r0, #4
 8000772:	d102      	bne.n	800077a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000774:	4310      	orrs	r0, r2
 8000776:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000778:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800077a:	2104      	movs	r1, #4
 800077c:	438a      	bics	r2, r1
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	e7fa      	b.n	8000778 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000788:	4770      	bx	lr

0800078a <HAL_SYSTICK_IRQHandler>:
{
 800078a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800078c:	f7ff fffc 	bl	8000788 <HAL_SYSTICK_Callback>
}
 8000790:	bd10      	pop	{r4, pc}

08000792 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000792:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000794:	1c84      	adds	r4, r0, #2
 8000796:	7fe3      	ldrb	r3, [r4, #31]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d004      	beq.n	80007a6 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800079c:	2304      	movs	r3, #4
 800079e:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80007a0:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007a6:	210e      	movs	r1, #14
 80007a8:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80007aa:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	438a      	bics	r2, r1
 80007b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80007b2:	2201      	movs	r2, #1
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	4391      	bics	r1, r2
 80007b8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80007ba:	0011      	movs	r1, r2
 80007bc:	40a9      	lsls	r1, r5
 80007be:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80007c0:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80007c2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80007c4:	2400      	movs	r4, #0
 80007c6:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 80007c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80007ca:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80007cc:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80007ce:	42a2      	cmp	r2, r4
 80007d0:	d0e7      	beq.n	80007a2 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80007d2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80007d4:	0023      	movs	r3, r4
 80007d6:	e7e4      	b.n	80007a2 <HAL_DMA_Abort_IT+0x10>

080007d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007da:	680b      	ldr	r3, [r1, #0]
{ 
 80007dc:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007de:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80007e0:	2300      	movs	r3, #0
{ 
 80007e2:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007e4:	9a02      	ldr	r2, [sp, #8]
 80007e6:	40da      	lsrs	r2, r3
 80007e8:	d101      	bne.n	80007ee <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80007ea:	b007      	add	sp, #28
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007ee:	2201      	movs	r2, #1
 80007f0:	409a      	lsls	r2, r3
 80007f2:	9203      	str	r2, [sp, #12]
 80007f4:	9903      	ldr	r1, [sp, #12]
 80007f6:	9a02      	ldr	r2, [sp, #8]
 80007f8:	400a      	ands	r2, r1
 80007fa:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80007fc:	d100      	bne.n	8000800 <HAL_GPIO_Init+0x28>
 80007fe:	e08c      	b.n	800091a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000800:	9a01      	ldr	r2, [sp, #4]
 8000802:	2110      	movs	r1, #16
 8000804:	6852      	ldr	r2, [r2, #4]
 8000806:	0016      	movs	r6, r2
 8000808:	438e      	bics	r6, r1
 800080a:	2e02      	cmp	r6, #2
 800080c:	d10e      	bne.n	800082c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800080e:	2507      	movs	r5, #7
 8000810:	401d      	ands	r5, r3
 8000812:	00ad      	lsls	r5, r5, #2
 8000814:	3901      	subs	r1, #1
 8000816:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000818:	08dc      	lsrs	r4, r3, #3
 800081a:	00a4      	lsls	r4, r4, #2
 800081c:	1904      	adds	r4, r0, r4
 800081e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000820:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000822:	9901      	ldr	r1, [sp, #4]
 8000824:	6909      	ldr	r1, [r1, #16]
 8000826:	40a9      	lsls	r1, r5
 8000828:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800082a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800082c:	2403      	movs	r4, #3
 800082e:	005f      	lsls	r7, r3, #1
 8000830:	40bc      	lsls	r4, r7
 8000832:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000834:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000836:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000838:	4025      	ands	r5, r4
 800083a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800083c:	2503      	movs	r5, #3
 800083e:	4015      	ands	r5, r2
 8000840:	40bd      	lsls	r5, r7
 8000842:	4661      	mov	r1, ip
 8000844:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000846:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000848:	2e01      	cmp	r6, #1
 800084a:	d80f      	bhi.n	800086c <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800084c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800084e:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000850:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000852:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000854:	40bd      	lsls	r5, r7
 8000856:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000858:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800085a:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800085c:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800085e:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000860:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000862:	2101      	movs	r1, #1
 8000864:	400d      	ands	r5, r1
 8000866:	409d      	lsls	r5, r3
 8000868:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800086a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800086c:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800086e:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000870:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000872:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000874:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000876:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000878:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800087a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800087c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800087e:	420a      	tst	r2, r1
 8000880:	d04b      	beq.n	800091a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2101      	movs	r1, #1
 8000884:	4c26      	ldr	r4, [pc, #152]	; (8000920 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000886:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000888:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800088a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088c:	430d      	orrs	r5, r1
 800088e:	61a5      	str	r5, [r4, #24]
 8000890:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000892:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000894:	400c      	ands	r4, r1
 8000896:	9405      	str	r4, [sp, #20]
 8000898:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800089a:	240f      	movs	r4, #15
 800089c:	4921      	ldr	r1, [pc, #132]	; (8000924 <HAL_GPIO_Init+0x14c>)
 800089e:	00ad      	lsls	r5, r5, #2
 80008a0:	00b6      	lsls	r6, r6, #2
 80008a2:	186d      	adds	r5, r5, r1
 80008a4:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a6:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80008a8:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008aa:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008ac:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ae:	2400      	movs	r4, #0
 80008b0:	4288      	cmp	r0, r1
 80008b2:	d00c      	beq.n	80008ce <HAL_GPIO_Init+0xf6>
 80008b4:	491c      	ldr	r1, [pc, #112]	; (8000928 <HAL_GPIO_Init+0x150>)
 80008b6:	3401      	adds	r4, #1
 80008b8:	4288      	cmp	r0, r1
 80008ba:	d008      	beq.n	80008ce <HAL_GPIO_Init+0xf6>
 80008bc:	491b      	ldr	r1, [pc, #108]	; (800092c <HAL_GPIO_Init+0x154>)
 80008be:	3401      	adds	r4, #1
 80008c0:	4288      	cmp	r0, r1
 80008c2:	d004      	beq.n	80008ce <HAL_GPIO_Init+0xf6>
 80008c4:	491a      	ldr	r1, [pc, #104]	; (8000930 <HAL_GPIO_Init+0x158>)
 80008c6:	3403      	adds	r4, #3
 80008c8:	4288      	cmp	r0, r1
 80008ca:	d100      	bne.n	80008ce <HAL_GPIO_Init+0xf6>
 80008cc:	3c02      	subs	r4, #2
 80008ce:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008d0:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d2:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80008d4:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80008d6:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80008d8:	4c16      	ldr	r4, [pc, #88]	; (8000934 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008da:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80008dc:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80008de:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008e0:	03d1      	lsls	r1, r2, #15
 80008e2:	d401      	bmi.n	80008e8 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008e4:	003e      	movs	r6, r7
 80008e6:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80008e8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80008ea:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80008ec:	9e00      	ldr	r6, [sp, #0]
 80008ee:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f0:	0391      	lsls	r1, r2, #14
 80008f2:	d401      	bmi.n	80008f8 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008f4:	003e      	movs	r6, r7
 80008f6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80008f8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80008fa:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80008fc:	9e00      	ldr	r6, [sp, #0]
 80008fe:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000900:	02d1      	lsls	r1, r2, #11
 8000902:	d401      	bmi.n	8000908 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000904:	003e      	movs	r6, r7
 8000906:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000908:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800090a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800090c:	9f00      	ldr	r7, [sp, #0]
 800090e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000910:	0292      	lsls	r2, r2, #10
 8000912:	d401      	bmi.n	8000918 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000914:	402e      	ands	r6, r5
 8000916:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000918:	60e7      	str	r7, [r4, #12]
    position++;
 800091a:	3301      	adds	r3, #1
 800091c:	e762      	b.n	80007e4 <HAL_GPIO_Init+0xc>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000
 8000928:	48000400 	.word	0x48000400
 800092c:	48000800 	.word	0x48000800
 8000930:	48000c00 	.word	0x48000c00
 8000934:	40010400 	.word	0x40010400

08000938 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000938:	2a00      	cmp	r2, #0
 800093a:	d001      	beq.n	8000940 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800093c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800093e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000940:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000942:	e7fc      	b.n	800093e <HAL_GPIO_WritePin+0x6>

08000944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000946:	6803      	ldr	r3, [r0, #0]
{
 8000948:	b085      	sub	sp, #20
 800094a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800094c:	07db      	lsls	r3, r3, #31
 800094e:	d42f      	bmi.n	80009b0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	079b      	lsls	r3, r3, #30
 8000954:	d500      	bpl.n	8000958 <HAL_RCC_OscConfig+0x14>
 8000956:	e081      	b.n	8000a5c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	071b      	lsls	r3, r3, #28
 800095c:	d500      	bpl.n	8000960 <HAL_RCC_OscConfig+0x1c>
 800095e:	e0bc      	b.n	8000ada <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	075b      	lsls	r3, r3, #29
 8000964:	d500      	bpl.n	8000968 <HAL_RCC_OscConfig+0x24>
 8000966:	e0df      	b.n	8000b28 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	06db      	lsls	r3, r3, #27
 800096c:	d51a      	bpl.n	80009a4 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800096e:	696a      	ldr	r2, [r5, #20]
 8000970:	4cb5      	ldr	r4, [pc, #724]	; (8000c48 <HAL_RCC_OscConfig+0x304>)
 8000972:	2304      	movs	r3, #4
 8000974:	2a01      	cmp	r2, #1
 8000976:	d000      	beq.n	800097a <HAL_RCC_OscConfig+0x36>
 8000978:	e14b      	b.n	8000c12 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800097a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800097c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800097e:	430b      	orrs	r3, r1
 8000980:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000984:	431a      	orrs	r2, r3
 8000986:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000988:	f7ff fcf6 	bl	8000378 <HAL_GetTick>
 800098c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800098e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000990:	4233      	tst	r3, r6
 8000992:	d100      	bne.n	8000996 <HAL_RCC_OscConfig+0x52>
 8000994:	e136      	b.n	8000c04 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000996:	21f8      	movs	r1, #248	; 0xf8
 8000998:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800099a:	69ab      	ldr	r3, [r5, #24]
 800099c:	438a      	bics	r2, r1
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009a4:	6a29      	ldr	r1, [r5, #32]
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d000      	beq.n	80009ac <HAL_RCC_OscConfig+0x68>
 80009aa:	e159      	b.n	8000c60 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e013      	b.n	80009d8 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009b0:	210c      	movs	r1, #12
 80009b2:	4ca5      	ldr	r4, [pc, #660]	; (8000c48 <HAL_RCC_OscConfig+0x304>)
 80009b4:	6862      	ldr	r2, [r4, #4]
 80009b6:	400a      	ands	r2, r1
 80009b8:	2a04      	cmp	r2, #4
 80009ba:	d006      	beq.n	80009ca <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	400b      	ands	r3, r1
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d10b      	bne.n	80009dc <HAL_RCC_OscConfig+0x98>
 80009c4:	6863      	ldr	r3, [r4, #4]
 80009c6:	03db      	lsls	r3, r3, #15
 80009c8:	d508      	bpl.n	80009dc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	039b      	lsls	r3, r3, #14
 80009ce:	d5bf      	bpl.n	8000950 <HAL_RCC_OscConfig+0xc>
 80009d0:	686b      	ldr	r3, [r5, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1bc      	bne.n	8000950 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009d6:	2001      	movs	r0, #1
}
 80009d8:	b005      	add	sp, #20
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009dc:	686b      	ldr	r3, [r5, #4]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d113      	bne.n	8000a0a <HAL_RCC_OscConfig+0xc6>
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	6822      	ldr	r2, [r4, #0]
 80009e6:	025b      	lsls	r3, r3, #9
 80009e8:	4313      	orrs	r3, r2
 80009ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ec:	f7ff fcc4 	bl	8000378 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f4:	02b6      	lsls	r6, r6, #10
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	4233      	tst	r3, r6
 80009fa:	d1a9      	bne.n	8000950 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009fc:	f7ff fcbc 	bl	8000378 <HAL_GetTick>
 8000a00:	1bc0      	subs	r0, r0, r7
 8000a02:	2864      	cmp	r0, #100	; 0x64
 8000a04:	d9f7      	bls.n	80009f6 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000a06:	2003      	movs	r0, #3
 8000a08:	e7e6      	b.n	80009d8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d116      	bne.n	8000a3c <HAL_RCC_OscConfig+0xf8>
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	4a8e      	ldr	r2, [pc, #568]	; (8000c4c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a12:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a14:	4013      	ands	r3, r2
 8000a16:	6023      	str	r3, [r4, #0]
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	4a8d      	ldr	r2, [pc, #564]	; (8000c50 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a1e:	4013      	ands	r3, r2
 8000a20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a22:	f7ff fca9 	bl	8000378 <HAL_GetTick>
 8000a26:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	4233      	tst	r3, r6
 8000a2c:	d100      	bne.n	8000a30 <HAL_RCC_OscConfig+0xec>
 8000a2e:	e78f      	b.n	8000950 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a30:	f7ff fca2 	bl	8000378 <HAL_GetTick>
 8000a34:	1bc0      	subs	r0, r0, r7
 8000a36:	2864      	cmp	r0, #100	; 0x64
 8000a38:	d9f6      	bls.n	8000a28 <HAL_RCC_OscConfig+0xe4>
 8000a3a:	e7e4      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a3c:	2b05      	cmp	r3, #5
 8000a3e:	d105      	bne.n	8000a4c <HAL_RCC_OscConfig+0x108>
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	02db      	lsls	r3, r3, #11
 8000a46:	4313      	orrs	r3, r2
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	e7ca      	b.n	80009e2 <HAL_RCC_OscConfig+0x9e>
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	4a7f      	ldr	r2, [pc, #508]	; (8000c4c <HAL_RCC_OscConfig+0x308>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	6023      	str	r3, [r4, #0]
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	4a7e      	ldr	r2, [pc, #504]	; (8000c50 <HAL_RCC_OscConfig+0x30c>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	e7c6      	b.n	80009ea <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a5c:	220c      	movs	r2, #12
 8000a5e:	4c7a      	ldr	r4, [pc, #488]	; (8000c48 <HAL_RCC_OscConfig+0x304>)
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	4213      	tst	r3, r2
 8000a64:	d006      	beq.n	8000a74 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a66:	6863      	ldr	r3, [r4, #4]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d110      	bne.n	8000a90 <HAL_RCC_OscConfig+0x14c>
 8000a6e:	6863      	ldr	r3, [r4, #4]
 8000a70:	03db      	lsls	r3, r3, #15
 8000a72:	d40d      	bmi.n	8000a90 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	079b      	lsls	r3, r3, #30
 8000a78:	d502      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x13c>
 8000a7a:	68eb      	ldr	r3, [r5, #12]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d1aa      	bne.n	80009d6 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a80:	21f8      	movs	r1, #248	; 0xf8
 8000a82:	6822      	ldr	r2, [r4, #0]
 8000a84:	692b      	ldr	r3, [r5, #16]
 8000a86:	438a      	bics	r2, r1
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	6023      	str	r3, [r4, #0]
 8000a8e:	e763      	b.n	8000958 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a90:	68ea      	ldr	r2, [r5, #12]
 8000a92:	2301      	movs	r3, #1
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d00f      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000a98:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fc6a 	bl	8000378 <HAL_GetTick>
 8000aa4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	4233      	tst	r3, r6
 8000aaa:	d1e9      	bne.n	8000a80 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aac:	f7ff fc64 	bl	8000378 <HAL_GetTick>
 8000ab0:	1bc0      	subs	r0, r0, r7
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9f7      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x162>
 8000ab6:	e7a6      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ab8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aba:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000abc:	439a      	bics	r2, r3
 8000abe:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fc5a 	bl	8000378 <HAL_GetTick>
 8000ac4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	4233      	tst	r3, r6
 8000aca:	d100      	bne.n	8000ace <HAL_RCC_OscConfig+0x18a>
 8000acc:	e744      	b.n	8000958 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ace:	f7ff fc53 	bl	8000378 <HAL_GetTick>
 8000ad2:	1bc0      	subs	r0, r0, r7
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9f6      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x182>
 8000ad8:	e795      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ada:	69ea      	ldr	r2, [r5, #28]
 8000adc:	2301      	movs	r3, #1
 8000ade:	4c5a      	ldr	r4, [pc, #360]	; (8000c48 <HAL_RCC_OscConfig+0x304>)
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	d010      	beq.n	8000b06 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000ae4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000aec:	f7ff fc44 	bl	8000378 <HAL_GetTick>
 8000af0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000af4:	4233      	tst	r3, r6
 8000af6:	d000      	beq.n	8000afa <HAL_RCC_OscConfig+0x1b6>
 8000af8:	e732      	b.n	8000960 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000afa:	f7ff fc3d 	bl	8000378 <HAL_GetTick>
 8000afe:	1bc0      	subs	r0, r0, r7
 8000b00:	2802      	cmp	r0, #2
 8000b02:	d9f6      	bls.n	8000af2 <HAL_RCC_OscConfig+0x1ae>
 8000b04:	e77f      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000b06:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b08:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000b0a:	439a      	bics	r2, r3
 8000b0c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fc33 	bl	8000378 <HAL_GetTick>
 8000b12:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b16:	4233      	tst	r3, r6
 8000b18:	d100      	bne.n	8000b1c <HAL_RCC_OscConfig+0x1d8>
 8000b1a:	e721      	b.n	8000960 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b1c:	f7ff fc2c 	bl	8000378 <HAL_GetTick>
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	2802      	cmp	r0, #2
 8000b24:	d9f6      	bls.n	8000b14 <HAL_RCC_OscConfig+0x1d0>
 8000b26:	e76e      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b28:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b2a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b2c:	4c46      	ldr	r4, [pc, #280]	; (8000c48 <HAL_RCC_OscConfig+0x304>)
 8000b2e:	0552      	lsls	r2, r2, #21
 8000b30:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b32:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b34:	4213      	tst	r3, r2
 8000b36:	d108      	bne.n	8000b4a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	69e3      	ldr	r3, [r4, #28]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61e3      	str	r3, [r4, #28]
 8000b3e:	69e3      	ldr	r3, [r4, #28]
 8000b40:	4013      	ands	r3, r2
 8000b42:	9303      	str	r3, [sp, #12]
 8000b44:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b46:	2301      	movs	r3, #1
 8000b48:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b4a:	2780      	movs	r7, #128	; 0x80
 8000b4c:	4e41      	ldr	r6, [pc, #260]	; (8000c54 <HAL_RCC_OscConfig+0x310>)
 8000b4e:	007f      	lsls	r7, r7, #1
 8000b50:	6833      	ldr	r3, [r6, #0]
 8000b52:	423b      	tst	r3, r7
 8000b54:	d006      	beq.n	8000b64 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b56:	68ab      	ldr	r3, [r5, #8]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d113      	bne.n	8000b84 <HAL_RCC_OscConfig+0x240>
 8000b5c:	6a22      	ldr	r2, [r4, #32]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	6223      	str	r3, [r4, #32]
 8000b62:	e030      	b.n	8000bc6 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b64:	6833      	ldr	r3, [r6, #0]
 8000b66:	433b      	orrs	r3, r7
 8000b68:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fc05 	bl	8000378 <HAL_GetTick>
 8000b6e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b70:	6833      	ldr	r3, [r6, #0]
 8000b72:	423b      	tst	r3, r7
 8000b74:	d1ef      	bne.n	8000b56 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b76:	f7ff fbff 	bl	8000378 <HAL_GetTick>
 8000b7a:	9b01      	ldr	r3, [sp, #4]
 8000b7c:	1ac0      	subs	r0, r0, r3
 8000b7e:	2864      	cmp	r0, #100	; 0x64
 8000b80:	d9f6      	bls.n	8000b70 <HAL_RCC_OscConfig+0x22c>
 8000b82:	e740      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
 8000b84:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d114      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x270>
 8000b8a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b8c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b8e:	4393      	bics	r3, r2
 8000b90:	6223      	str	r3, [r4, #32]
 8000b92:	6a23      	ldr	r3, [r4, #32]
 8000b94:	3203      	adds	r2, #3
 8000b96:	4393      	bics	r3, r2
 8000b98:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fbed 	bl	8000378 <HAL_GetTick>
 8000b9e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba0:	6a23      	ldr	r3, [r4, #32]
 8000ba2:	423b      	tst	r3, r7
 8000ba4:	d025      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba6:	f7ff fbe7 	bl	8000378 <HAL_GetTick>
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_RCC_OscConfig+0x314>)
 8000bac:	1b80      	subs	r0, r0, r6
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d9f6      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x25c>
 8000bb2:	e728      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d10b      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x28c>
 8000bb8:	6a21      	ldr	r1, [r4, #32]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	6223      	str	r3, [r4, #32]
 8000bc0:	6a23      	ldr	r3, [r4, #32]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000bc6:	f7ff fbd7 	bl	8000378 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bca:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000bcc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bce:	e00d      	b.n	8000bec <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd0:	6a23      	ldr	r3, [r4, #32]
 8000bd2:	4393      	bics	r3, r2
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	6223      	str	r3, [r4, #32]
 8000bd8:	6a23      	ldr	r3, [r4, #32]
 8000bda:	4393      	bics	r3, r2
 8000bdc:	e7c0      	b.n	8000b60 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bde:	f7ff fbcb 	bl	8000378 <HAL_GetTick>
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_RCC_OscConfig+0x314>)
 8000be4:	1b80      	subs	r0, r0, r6
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d900      	bls.n	8000bec <HAL_RCC_OscConfig+0x2a8>
 8000bea:	e70c      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bec:	6a23      	ldr	r3, [r4, #32]
 8000bee:	423b      	tst	r3, r7
 8000bf0:	d0f5      	beq.n	8000bde <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000bf2:	9b00      	ldr	r3, [sp, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d000      	beq.n	8000bfa <HAL_RCC_OscConfig+0x2b6>
 8000bf8:	e6b6      	b.n	8000968 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bfa:	69e3      	ldr	r3, [r4, #28]
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_RCC_OscConfig+0x318>)
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61e3      	str	r3, [r4, #28]
 8000c02:	e6b1      	b.n	8000968 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c04:	f7ff fbb8 	bl	8000378 <HAL_GetTick>
 8000c08:	1bc0      	subs	r0, r0, r7
 8000c0a:	2802      	cmp	r0, #2
 8000c0c:	d800      	bhi.n	8000c10 <HAL_RCC_OscConfig+0x2cc>
 8000c0e:	e6be      	b.n	800098e <HAL_RCC_OscConfig+0x4a>
 8000c10:	e6f9      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c12:	3205      	adds	r2, #5
 8000c14:	d103      	bne.n	8000c1e <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c16:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000c18:	439a      	bics	r2, r3
 8000c1a:	6362      	str	r2, [r4, #52]	; 0x34
 8000c1c:	e6bb      	b.n	8000996 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c20:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c22:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000c24:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c26:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c2a:	4393      	bics	r3, r2
 8000c2c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c2e:	f7ff fba3 	bl	8000378 <HAL_GetTick>
 8000c32:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c36:	4233      	tst	r3, r6
 8000c38:	d100      	bne.n	8000c3c <HAL_RCC_OscConfig+0x2f8>
 8000c3a:	e6b3      	b.n	80009a4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c3c:	f7ff fb9c 	bl	8000378 <HAL_GetTick>
 8000c40:	1bc0      	subs	r0, r0, r7
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f6      	bls.n	8000c34 <HAL_RCC_OscConfig+0x2f0>
 8000c46:	e6de      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	fffeffff 	.word	0xfffeffff
 8000c50:	fffbffff 	.word	0xfffbffff
 8000c54:	40007000 	.word	0x40007000
 8000c58:	00001388 	.word	0x00001388
 8000c5c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c60:	220c      	movs	r2, #12
 8000c62:	4c26      	ldr	r4, [pc, #152]	; (8000cfc <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c66:	6863      	ldr	r3, [r4, #4]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d100      	bne.n	8000c70 <HAL_RCC_OscConfig+0x32c>
 8000c6e:	e6b3      	b.n	80009d8 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <HAL_RCC_OscConfig+0x3bc>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c78:	2902      	cmp	r1, #2
 8000c7a:	d12f      	bne.n	8000cdc <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fb7c 	bl	8000378 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c80:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c84:	04b6      	lsls	r6, r6, #18
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	4233      	tst	r3, r6
 8000c8a:	d121      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c90:	4393      	bics	r3, r2
 8000c92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000c94:	4313      	orrs	r3, r2
 8000c96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c98:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c9c:	6862      	ldr	r2, [r4, #4]
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	4918      	ldr	r1, [pc, #96]	; (8000d04 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ca2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	6822      	ldr	r2, [r4, #0]
 8000cae:	045b      	lsls	r3, r3, #17
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fb60 	bl	8000378 <HAL_GetTick>
 8000cb8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cba:	04ad      	lsls	r5, r5, #18
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	422b      	tst	r3, r5
 8000cc0:	d000      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x380>
 8000cc2:	e673      	b.n	80009ac <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cc4:	f7ff fb58 	bl	8000378 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	2802      	cmp	r0, #2
 8000ccc:	d9f6      	bls.n	8000cbc <HAL_RCC_OscConfig+0x378>
 8000cce:	e69a      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd0:	f7ff fb52 	bl	8000378 <HAL_GetTick>
 8000cd4:	1bc0      	subs	r0, r0, r7
 8000cd6:	2802      	cmp	r0, #2
 8000cd8:	d9d5      	bls.n	8000c86 <HAL_RCC_OscConfig+0x342>
 8000cda:	e694      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fb4c 	bl	8000378 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ce2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce4:	04ad      	lsls	r5, r5, #18
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	422b      	tst	r3, r5
 8000cea:	d100      	bne.n	8000cee <HAL_RCC_OscConfig+0x3aa>
 8000cec:	e65e      	b.n	80009ac <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cee:	f7ff fb43 	bl	8000378 <HAL_GetTick>
 8000cf2:	1b80      	subs	r0, r0, r6
 8000cf4:	2802      	cmp	r0, #2
 8000cf6:	d9f6      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x3a2>
 8000cf8:	e685      	b.n	8000a06 <HAL_RCC_OscConfig+0xc2>
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	feffffff 	.word	0xfeffffff
 8000d04:	ffc2ffff 	.word	0xffc2ffff

08000d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d08:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d0a:	4c14      	ldr	r4, [pc, #80]	; (8000d5c <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000d0c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d0e:	2210      	movs	r2, #16
 8000d10:	0021      	movs	r1, r4
 8000d12:	4668      	mov	r0, sp
 8000d14:	f001 faf0 	bl	80022f8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000d18:	0021      	movs	r1, r4
 8000d1a:	ad04      	add	r5, sp, #16
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	3110      	adds	r1, #16
 8000d20:	0028      	movs	r0, r5
 8000d22:	f001 fae9 	bl	80022f8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d26:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000d28:	4e0d      	ldr	r6, [pc, #52]	; (8000d60 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d2a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	2a08      	cmp	r2, #8
 8000d30:	d111      	bne.n	8000d56 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d32:	200f      	movs	r0, #15
 8000d34:	466a      	mov	r2, sp
 8000d36:	0c99      	lsrs	r1, r3, #18
 8000d38:	4001      	ands	r1, r0
 8000d3a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d3c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000d3e:	4002      	ands	r2, r0
 8000d40:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000d42:	03db      	lsls	r3, r3, #15
 8000d44:	d505      	bpl.n	8000d52 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000d48:	f7ff f9f2 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d4c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d4e:	b008      	add	sp, #32
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d54:	e7fa      	b.n	8000d4c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000d58:	e7f9      	b.n	8000d4e <HAL_RCC_GetSysClockFreq+0x46>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	08002324 	.word	0x08002324
 8000d60:	40021000 	.word	0x40021000
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	003d0900 	.word	0x003d0900

08000d6c <HAL_RCC_ClockConfig>:
{
 8000d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4c43      	ldr	r4, [pc, #268]	; (8000e80 <HAL_RCC_ClockConfig+0x114>)
{
 8000d72:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d74:	6823      	ldr	r3, [r4, #0]
{
 8000d76:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d78:	4013      	ands	r3, r2
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d31c      	bcc.n	8000db8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d7e:	6832      	ldr	r2, [r6, #0]
 8000d80:	0793      	lsls	r3, r2, #30
 8000d82:	d423      	bmi.n	8000dcc <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d84:	07d3      	lsls	r3, r2, #31
 8000d86:	d429      	bmi.n	8000ddc <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d88:	2301      	movs	r3, #1
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4297      	cmp	r7, r2
 8000d90:	d367      	bcc.n	8000e62 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d92:	6833      	ldr	r3, [r6, #0]
 8000d94:	4c3b      	ldr	r4, [pc, #236]	; (8000e84 <HAL_RCC_ClockConfig+0x118>)
 8000d96:	075b      	lsls	r3, r3, #29
 8000d98:	d46a      	bmi.n	8000e70 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d9a:	f7ff ffb5 	bl	8000d08 <HAL_RCC_GetSysClockFreq>
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	4a39      	ldr	r2, [pc, #228]	; (8000e88 <HAL_RCC_ClockConfig+0x11c>)
 8000da2:	061b      	lsls	r3, r3, #24
 8000da4:	0f1b      	lsrs	r3, r3, #28
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	40d8      	lsrs	r0, r3
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <HAL_RCC_ClockConfig+0x120>)
 8000dac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff fab8 	bl	8000324 <HAL_InitTick>
  return HAL_OK;
 8000db4:	2000      	movs	r0, #0
 8000db6:	e008      	b.n	8000dca <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	4393      	bics	r3, r2
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d0da      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
}
 8000dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dcc:	20f0      	movs	r0, #240	; 0xf0
 8000dce:	492d      	ldr	r1, [pc, #180]	; (8000e84 <HAL_RCC_ClockConfig+0x118>)
 8000dd0:	684b      	ldr	r3, [r1, #4]
 8000dd2:	4383      	bics	r3, r0
 8000dd4:	68b0      	ldr	r0, [r6, #8]
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	604b      	str	r3, [r1, #4]
 8000dda:	e7d3      	b.n	8000d84 <HAL_RCC_ClockConfig+0x18>
 8000ddc:	4d29      	ldr	r5, [pc, #164]	; (8000e84 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dde:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de2:	2a01      	cmp	r2, #1
 8000de4:	d11a      	bne.n	8000e1c <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	039b      	lsls	r3, r3, #14
 8000de8:	d5ee      	bpl.n	8000dc8 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dea:	2103      	movs	r1, #3
 8000dec:	686b      	ldr	r3, [r5, #4]
 8000dee:	438b      	bics	r3, r1
 8000df0:	4313      	orrs	r3, r2
 8000df2:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000df4:	f7ff fac0 	bl	8000378 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000dfa:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d115      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e00:	220c      	movs	r2, #12
 8000e02:	686b      	ldr	r3, [r5, #4]
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d0be      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0a:	f7ff fab5 	bl	8000378 <HAL_GetTick>
 8000e0e:	9b01      	ldr	r3, [sp, #4]
 8000e10:	1ac0      	subs	r0, r0, r3
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_RCC_ClockConfig+0x124>)
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d9f3      	bls.n	8000e00 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000e18:	2003      	movs	r0, #3
 8000e1a:	e7d6      	b.n	8000dca <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e1c:	2a02      	cmp	r2, #2
 8000e1e:	d102      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	d4e2      	bmi.n	8000dea <HAL_RCC_ClockConfig+0x7e>
 8000e24:	e7d0      	b.n	8000dc8 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	079b      	lsls	r3, r3, #30
 8000e28:	d4df      	bmi.n	8000dea <HAL_RCC_ClockConfig+0x7e>
 8000e2a:	e7cd      	b.n	8000dc8 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d012      	beq.n	8000e56 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e30:	220c      	movs	r2, #12
 8000e32:	686b      	ldr	r3, [r5, #4]
 8000e34:	4213      	tst	r3, r2
 8000e36:	d0a7      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff fa9e 	bl	8000378 <HAL_GetTick>
 8000e3c:	9b01      	ldr	r3, [sp, #4]
 8000e3e:	1ac0      	subs	r0, r0, r3
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_RCC_ClockConfig+0x124>)
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d9f4      	bls.n	8000e30 <HAL_RCC_ClockConfig+0xc4>
 8000e46:	e7e7      	b.n	8000e18 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e48:	f7ff fa96 	bl	8000378 <HAL_GetTick>
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	1ac0      	subs	r0, r0, r3
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_RCC_ClockConfig+0x124>)
 8000e52:	4298      	cmp	r0, r3
 8000e54:	d8e0      	bhi.n	8000e18 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e56:	220c      	movs	r2, #12
 8000e58:	686b      	ldr	r3, [r5, #4]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d1f3      	bne.n	8000e48 <HAL_RCC_ClockConfig+0xdc>
 8000e60:	e792      	b.n	8000d88 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e62:	6822      	ldr	r2, [r4, #0]
 8000e64:	439a      	bics	r2, r3
 8000e66:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	421a      	tst	r2, r3
 8000e6c:	d1ac      	bne.n	8000dc8 <HAL_RCC_ClockConfig+0x5c>
 8000e6e:	e790      	b.n	8000d92 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e70:	6863      	ldr	r3, [r4, #4]
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	68f2      	ldr	r2, [r6, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	6063      	str	r3, [r4, #4]
 8000e7c:	e78d      	b.n	8000d9a <HAL_RCC_ClockConfig+0x2e>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40022000 	.word	0x40022000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08002355 	.word	0x08002355
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	00001388 	.word	0x00001388
 8000e94:	fffff8ff 	.word	0xfffff8ff

08000e98 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
}
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	055b      	lsls	r3, r3, #21
 8000eac:	0f5b      	lsrs	r3, r3, #29
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eb2:	6810      	ldr	r0, [r2, #0]
 8000eb4:	40d8      	lsrs	r0, r3
}    
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	08002365 	.word	0x08002365
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ec4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ec6:	6803      	ldr	r3, [r0, #0]
{
 8000ec8:	b085      	sub	sp, #20
 8000eca:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ecc:	03db      	lsls	r3, r3, #15
 8000ece:	d528      	bpl.n	8000f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed4:	4c37      	ldr	r4, [pc, #220]	; (8000fb4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ed6:	0552      	lsls	r2, r2, #21
 8000ed8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000eda:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000edc:	4213      	tst	r3, r2
 8000ede:	d108      	bne.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	69e3      	ldr	r3, [r4, #28]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61e3      	str	r3, [r4, #28]
 8000ee6:	69e3      	ldr	r3, [r4, #28]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	9303      	str	r3, [sp, #12]
 8000eec:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef2:	2780      	movs	r7, #128	; 0x80
 8000ef4:	4e30      	ldr	r6, [pc, #192]	; (8000fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000ef6:	007f      	lsls	r7, r7, #1
 8000ef8:	6833      	ldr	r3, [r6, #0]
 8000efa:	423b      	tst	r3, r7
 8000efc:	d026      	beq.n	8000f4c <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000efe:	22c0      	movs	r2, #192	; 0xc0
 8000f00:	6a23      	ldr	r3, [r4, #32]
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	4e2d      	ldr	r6, [pc, #180]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f08:	d132      	bne.n	8000f70 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f0a:	6a23      	ldr	r3, [r4, #32]
 8000f0c:	401e      	ands	r6, r3
 8000f0e:	686b      	ldr	r3, [r5, #4]
 8000f10:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f12:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f14:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d103      	bne.n	8000f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1a:	69e3      	ldr	r3, [r4, #28]
 8000f1c:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f22:	682a      	ldr	r2, [r5, #0]
 8000f24:	07d3      	lsls	r3, r2, #31
 8000f26:	d506      	bpl.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	4922      	ldr	r1, [pc, #136]	; (8000fb4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000f2c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f2e:	4383      	bics	r3, r0
 8000f30:	68a8      	ldr	r0, [r5, #8]
 8000f32:	4303      	orrs	r3, r0
 8000f34:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000f36:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f38:	0693      	lsls	r3, r2, #26
 8000f3a:	d517      	bpl.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000f40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f42:	438b      	bics	r3, r1
 8000f44:	68e9      	ldr	r1, [r5, #12]
 8000f46:	430b      	orrs	r3, r1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	e00f      	b.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4c:	6833      	ldr	r3, [r6, #0]
 8000f4e:	433b      	orrs	r3, r7
 8000f50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f52:	f7ff fa11 	bl	8000378 <HAL_GetTick>
 8000f56:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	423b      	tst	r3, r7
 8000f5c:	d1cf      	bne.n	8000efe <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5e:	f7ff fa0b 	bl	8000378 <HAL_GetTick>
 8000f62:	9b01      	ldr	r3, [sp, #4]
 8000f64:	1ac0      	subs	r0, r0, r3
 8000f66:	2864      	cmp	r0, #100	; 0x64
 8000f68:	d9f6      	bls.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000f6a:	2003      	movs	r0, #3
}
 8000f6c:	b005      	add	sp, #20
 8000f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f70:	6869      	ldr	r1, [r5, #4]
 8000f72:	400a      	ands	r2, r1
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d0c8      	beq.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f78:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f7a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f7c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f7e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	4303      	orrs	r3, r0
 8000f84:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f86:	6a23      	ldr	r3, [r4, #32]
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f8a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f8c:	4003      	ands	r3, r0
 8000f8e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000f90:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f92:	07d3      	lsls	r3, r2, #31
 8000f94:	d5b9      	bpl.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000f96:	f7ff f9ef 	bl	8000378 <HAL_GetTick>
 8000f9a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	6a23      	ldr	r3, [r4, #32]
 8000fa0:	4213      	tst	r3, r2
 8000fa2:	d1b2      	bne.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa4:	f7ff f9e8 	bl	8000378 <HAL_GetTick>
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000faa:	1bc0      	subs	r0, r0, r7
 8000fac:	4298      	cmp	r0, r3
 8000fae:	d9f5      	bls.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000fb0:	e7db      	b.n	8000f6a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	fffffcff 	.word	0xfffffcff
 8000fc0:	efffffff 	.word	0xefffffff
 8000fc4:	fffeffff 	.word	0xfffeffff
 8000fc8:	00001388 	.word	0x00001388

08000fcc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6a03      	ldr	r3, [r0, #32]
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fd2:	4393      	bics	r3, r2
 8000fd4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000fd8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000fda:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000fdc:	3272      	adds	r2, #114	; 0x72
 8000fde:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000fe0:	680a      	ldr	r2, [r1, #0]
 8000fe2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000fe8:	688a      	ldr	r2, [r1, #8]
 8000fea:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <TIM_OC1_SetConfig+0x74>)
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d008      	beq.n	8001004 <TIM_OC1_SetConfig+0x38>
 8000ff2:	4e14      	ldr	r6, [pc, #80]	; (8001044 <TIM_OC1_SetConfig+0x78>)
 8000ff4:	42b0      	cmp	r0, r6
 8000ff6:	d005      	beq.n	8001004 <TIM_OC1_SetConfig+0x38>
 8000ff8:	4e13      	ldr	r6, [pc, #76]	; (8001048 <TIM_OC1_SetConfig+0x7c>)
 8000ffa:	42b0      	cmp	r0, r6
 8000ffc:	d002      	beq.n	8001004 <TIM_OC1_SetConfig+0x38>
 8000ffe:	4e13      	ldr	r6, [pc, #76]	; (800104c <TIM_OC1_SetConfig+0x80>)
 8001000:	42b0      	cmp	r0, r6
 8001002:	d116      	bne.n	8001032 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001004:	2608      	movs	r6, #8
 8001006:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001008:	68ce      	ldr	r6, [r1, #12]
 800100a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800100c:	2604      	movs	r6, #4
 800100e:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001010:	4290      	cmp	r0, r2
 8001012:	d008      	beq.n	8001026 <TIM_OC1_SetConfig+0x5a>
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <TIM_OC1_SetConfig+0x78>)
 8001016:	4290      	cmp	r0, r2
 8001018:	d005      	beq.n	8001026 <TIM_OC1_SetConfig+0x5a>
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <TIM_OC1_SetConfig+0x7c>)
 800101c:	4290      	cmp	r0, r2
 800101e:	d002      	beq.n	8001026 <TIM_OC1_SetConfig+0x5a>
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <TIM_OC1_SetConfig+0x80>)
 8001022:	4290      	cmp	r0, r2
 8001024:	d105      	bne.n	8001032 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001028:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800102a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800102c:	694c      	ldr	r4, [r1, #20]
 800102e:	4334      	orrs	r4, r6
 8001030:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001032:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001034:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001036:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001038:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800103a:	6203      	str	r3, [r0, #32]
}
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40014000 	.word	0x40014000
 8001048:	40014400 	.word	0x40014400
 800104c:	40014800 	.word	0x40014800
 8001050:	fffffcff 	.word	0xfffffcff

08001054 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001054:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001056:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001058:	6a03      	ldr	r3, [r0, #32]
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <TIM_OC3_SetConfig+0x64>)
 800105c:	4013      	ands	r3, r2
 800105e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001060:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001062:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001064:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001066:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001068:	680d      	ldr	r5, [r1, #0]
 800106a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800106c:	4d13      	ldr	r5, [pc, #76]	; (80010bc <TIM_OC3_SetConfig+0x68>)
 800106e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001070:	688d      	ldr	r5, [r1, #8]
 8001072:	022d      	lsls	r5, r5, #8
 8001074:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001076:	4d12      	ldr	r5, [pc, #72]	; (80010c0 <TIM_OC3_SetConfig+0x6c>)
 8001078:	42a8      	cmp	r0, r5
 800107a:	d10e      	bne.n	800109a <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800107c:	4d11      	ldr	r5, [pc, #68]	; (80010c4 <TIM_OC3_SetConfig+0x70>)
 800107e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001080:	68cb      	ldr	r3, [r1, #12]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001086:	4d10      	ldr	r5, [pc, #64]	; (80010c8 <TIM_OC3_SetConfig+0x74>)
 8001088:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800108a:	4d10      	ldr	r5, [pc, #64]	; (80010cc <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800108c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800108e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001090:	698a      	ldr	r2, [r1, #24]
 8001092:	4332      	orrs	r2, r6
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	432a      	orrs	r2, r5
 8001098:	e008      	b.n	80010ac <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800109a:	4d0d      	ldr	r5, [pc, #52]	; (80010d0 <TIM_OC3_SetConfig+0x7c>)
 800109c:	42a8      	cmp	r0, r5
 800109e:	d0f4      	beq.n	800108a <TIM_OC3_SetConfig+0x36>
 80010a0:	4d0c      	ldr	r5, [pc, #48]	; (80010d4 <TIM_OC3_SetConfig+0x80>)
 80010a2:	42a8      	cmp	r0, r5
 80010a4:	d0f1      	beq.n	800108a <TIM_OC3_SetConfig+0x36>
 80010a6:	4d0c      	ldr	r5, [pc, #48]	; (80010d8 <TIM_OC3_SetConfig+0x84>)
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d0ee      	beq.n	800108a <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010ac:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80010ae:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80010b0:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80010b2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010b4:	6203      	str	r3, [r0, #32]
}
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	fffffeff 	.word	0xfffffeff
 80010bc:	fffffdff 	.word	0xfffffdff
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	fffff7ff 	.word	0xfffff7ff
 80010c8:	fffffbff 	.word	0xfffffbff
 80010cc:	ffffcfff 	.word	0xffffcfff
 80010d0:	40014000 	.word	0x40014000
 80010d4:	40014400 	.word	0x40014400
 80010d8:	40014800 	.word	0x40014800

080010dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80010dc:	6a03      	ldr	r3, [r0, #32]
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <TIM_OC4_SetConfig+0x54>)
{
 80010e0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80010e2:	4013      	ands	r3, r2
 80010e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010e6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80010e8:	4c12      	ldr	r4, [pc, #72]	; (8001134 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80010ea:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80010ec:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80010ee:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010f0:	680c      	ldr	r4, [r1, #0]
 80010f2:	0224      	lsls	r4, r4, #8
 80010f4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80010f6:	4c10      	ldr	r4, [pc, #64]	; (8001138 <TIM_OC4_SetConfig+0x5c>)
 80010f8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80010fa:	688c      	ldr	r4, [r1, #8]
 80010fc:	0324      	lsls	r4, r4, #12
 80010fe:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001100:	4c0e      	ldr	r4, [pc, #56]	; (800113c <TIM_OC4_SetConfig+0x60>)
 8001102:	42a0      	cmp	r0, r4
 8001104:	d008      	beq.n	8001118 <TIM_OC4_SetConfig+0x3c>
 8001106:	4c0e      	ldr	r4, [pc, #56]	; (8001140 <TIM_OC4_SetConfig+0x64>)
 8001108:	42a0      	cmp	r0, r4
 800110a:	d005      	beq.n	8001118 <TIM_OC4_SetConfig+0x3c>
 800110c:	4c0d      	ldr	r4, [pc, #52]	; (8001144 <TIM_OC4_SetConfig+0x68>)
 800110e:	42a0      	cmp	r0, r4
 8001110:	d002      	beq.n	8001118 <TIM_OC4_SetConfig+0x3c>
 8001112:	4c0d      	ldr	r4, [pc, #52]	; (8001148 <TIM_OC4_SetConfig+0x6c>)
 8001114:	42a0      	cmp	r0, r4
 8001116:	d104      	bne.n	8001122 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001118:	4c0c      	ldr	r4, [pc, #48]	; (800114c <TIM_OC4_SetConfig+0x70>)
 800111a:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800111c:	694c      	ldr	r4, [r1, #20]
 800111e:	01a4      	lsls	r4, r4, #6
 8001120:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001122:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001124:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001126:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001128:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800112a:	6202      	str	r2, [r0, #32]
}
 800112c:	bd30      	pop	{r4, r5, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	ffffefff 	.word	0xffffefff
 8001134:	ffff8cff 	.word	0xffff8cff
 8001138:	ffffdfff 	.word	0xffffdfff
 800113c:	40012c00 	.word	0x40012c00
 8001140:	40014000 	.word	0x40014000
 8001144:	40014400 	.word	0x40014400
 8001148:	40014800 	.word	0x40014800
 800114c:	ffffbfff 	.word	0xffffbfff

08001150 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001150:	0002      	movs	r2, r0
 8001152:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001154:	2101      	movs	r1, #1
 8001156:	6800      	ldr	r0, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001158:	323d      	adds	r2, #61	; 0x3d
 800115a:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 800115c:	6803      	ldr	r3, [r0, #0]
 800115e:	430b      	orrs	r3, r1
 8001160:	6003      	str	r3, [r0, #0]
}
 8001162:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001164:	7011      	strb	r1, [r2, #0]
}
 8001166:	4770      	bx	lr

08001168 <HAL_TIM_PeriodElapsedCallback>:
 8001168:	4770      	bx	lr

0800116a <HAL_TIM_OC_DelayElapsedCallback>:
 800116a:	4770      	bx	lr

0800116c <HAL_TIM_IC_CaptureCallback>:
 800116c:	4770      	bx	lr

0800116e <HAL_TIM_PWM_PulseFinishedCallback>:
 800116e:	4770      	bx	lr

08001170 <HAL_TIM_TriggerCallback>:
 8001170:	4770      	bx	lr

08001172 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001172:	2202      	movs	r2, #2
 8001174:	6803      	ldr	r3, [r0, #0]
{
 8001176:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001178:	6919      	ldr	r1, [r3, #16]
{
 800117a:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800117c:	4211      	tst	r1, r2
 800117e:	d00e      	beq.n	800119e <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	4211      	tst	r1, r2
 8001184:	d00b      	beq.n	800119e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001186:	3a05      	subs	r2, #5
 8001188:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800118a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800118c:	3204      	adds	r2, #4
 800118e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001190:	079b      	lsls	r3, r3, #30
 8001192:	d100      	bne.n	8001196 <HAL_TIM_IRQHandler+0x24>
 8001194:	e079      	b.n	800128a <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8001196:	f7ff ffe9 	bl	800116c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800119a:	2300      	movs	r3, #0
 800119c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800119e:	2204      	movs	r2, #4
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	6919      	ldr	r1, [r3, #16]
 80011a4:	4211      	tst	r1, r2
 80011a6:	d010      	beq.n	80011ca <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80011a8:	68d9      	ldr	r1, [r3, #12]
 80011aa:	4211      	tst	r1, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011ae:	3a09      	subs	r2, #9
 80011b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011b2:	3207      	adds	r2, #7
 80011b4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80011bc:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011be:	421a      	tst	r2, r3
 80011c0:	d069      	beq.n	8001296 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80011c2:	f7ff ffd3 	bl	800116c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011c6:	2300      	movs	r3, #0
 80011c8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011ca:	2208      	movs	r2, #8
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	6919      	ldr	r1, [r3, #16]
 80011d0:	4211      	tst	r1, r2
 80011d2:	d00e      	beq.n	80011f2 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011d4:	68d9      	ldr	r1, [r3, #12]
 80011d6:	4211      	tst	r1, r2
 80011d8:	d00b      	beq.n	80011f2 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011da:	3a11      	subs	r2, #17
 80011dc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011de:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011e0:	320d      	adds	r2, #13
 80011e2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80011e4:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e6:	079b      	lsls	r3, r3, #30
 80011e8:	d05b      	beq.n	80012a2 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80011ea:	f7ff ffbf 	bl	800116c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ee:	2300      	movs	r3, #0
 80011f0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011f2:	2210      	movs	r2, #16
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	6919      	ldr	r1, [r3, #16]
 80011f8:	4211      	tst	r1, r2
 80011fa:	d010      	beq.n	800121e <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80011fc:	68d9      	ldr	r1, [r3, #12]
 80011fe:	4211      	tst	r1, r2
 8001200:	d00d      	beq.n	800121e <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001202:	3a21      	subs	r2, #33	; 0x21
 8001204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001206:	3219      	adds	r2, #25
 8001208:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	23c0      	movs	r3, #192	; 0xc0
 800120e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001210:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001212:	421a      	tst	r2, r3
 8001214:	d04b      	beq.n	80012ae <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8001216:	f7ff ffa9 	bl	800116c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800121a:	2300      	movs	r3, #0
 800121c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800121e:	2201      	movs	r2, #1
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	6919      	ldr	r1, [r3, #16]
 8001224:	4211      	tst	r1, r2
 8001226:	d007      	beq.n	8001238 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001228:	68d9      	ldr	r1, [r3, #12]
 800122a:	4211      	tst	r1, r2
 800122c:	d004      	beq.n	8001238 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800122e:	3a03      	subs	r2, #3
 8001230:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff ff98 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	4211      	tst	r1, r2
 8001240:	d008      	beq.n	8001254 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001242:	68d9      	ldr	r1, [r3, #12]
 8001244:	4211      	tst	r1, r2
 8001246:	d005      	beq.n	8001254 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001248:	3a02      	subs	r2, #2
 800124a:	3aff      	subs	r2, #255	; 0xff
 800124c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800124e:	0020      	movs	r0, r4
 8001250:	f000 f9d3 	bl	80015fa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	6919      	ldr	r1, [r3, #16]
 800125a:	4211      	tst	r1, r2
 800125c:	d007      	beq.n	800126e <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800125e:	68d9      	ldr	r1, [r3, #12]
 8001260:	4211      	tst	r1, r2
 8001262:	d004      	beq.n	800126e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001264:	3a81      	subs	r2, #129	; 0x81
 8001266:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001268:	0020      	movs	r0, r4
 800126a:	f7ff ff81 	bl	8001170 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800126e:	2220      	movs	r2, #32
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	6919      	ldr	r1, [r3, #16]
 8001274:	4211      	tst	r1, r2
 8001276:	d007      	beq.n	8001288 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001278:	68d9      	ldr	r1, [r3, #12]
 800127a:	4211      	tst	r1, r2
 800127c:	d004      	beq.n	8001288 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800127e:	3a41      	subs	r2, #65	; 0x41
 8001280:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001282:	0020      	movs	r0, r4
 8001284:	f000 f9b8 	bl	80015f8 <HAL_TIMEx_CommutationCallback>
}
 8001288:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800128a:	f7ff ff6e 	bl	800116a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800128e:	0020      	movs	r0, r4
 8001290:	f7ff ff6d 	bl	800116e <HAL_TIM_PWM_PulseFinishedCallback>
 8001294:	e781      	b.n	800119a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001296:	f7ff ff68 	bl	800116a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800129a:	0020      	movs	r0, r4
 800129c:	f7ff ff67 	bl	800116e <HAL_TIM_PWM_PulseFinishedCallback>
 80012a0:	e791      	b.n	80011c6 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012a2:	f7ff ff62 	bl	800116a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a6:	0020      	movs	r0, r4
 80012a8:	f7ff ff61 	bl	800116e <HAL_TIM_PWM_PulseFinishedCallback>
 80012ac:	e79f      	b.n	80011ee <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ae:	f7ff ff5c 	bl	800116a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012b2:	0020      	movs	r0, r4
 80012b4:	f7ff ff5b 	bl	800116e <HAL_TIM_PWM_PulseFinishedCallback>
 80012b8:	e7af      	b.n	800121a <HAL_TIM_IRQHandler+0xa8>
	...

080012bc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <TIM_Base_SetConfig+0x74>)
{
 80012be:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80012c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c2:	4290      	cmp	r0, r2
 80012c4:	d002      	beq.n	80012cc <TIM_Base_SetConfig+0x10>
 80012c6:	4c1b      	ldr	r4, [pc, #108]	; (8001334 <TIM_Base_SetConfig+0x78>)
 80012c8:	42a0      	cmp	r0, r4
 80012ca:	d108      	bne.n	80012de <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012cc:	2470      	movs	r4, #112	; 0x70
 80012ce:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80012d0:	684c      	ldr	r4, [r1, #4]
 80012d2:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012d4:	4290      	cmp	r0, r2
 80012d6:	d00e      	beq.n	80012f6 <TIM_Base_SetConfig+0x3a>
 80012d8:	4c16      	ldr	r4, [pc, #88]	; (8001334 <TIM_Base_SetConfig+0x78>)
 80012da:	42a0      	cmp	r0, r4
 80012dc:	d00b      	beq.n	80012f6 <TIM_Base_SetConfig+0x3a>
 80012de:	4c16      	ldr	r4, [pc, #88]	; (8001338 <TIM_Base_SetConfig+0x7c>)
 80012e0:	42a0      	cmp	r0, r4
 80012e2:	d008      	beq.n	80012f6 <TIM_Base_SetConfig+0x3a>
 80012e4:	4c15      	ldr	r4, [pc, #84]	; (800133c <TIM_Base_SetConfig+0x80>)
 80012e6:	42a0      	cmp	r0, r4
 80012e8:	d005      	beq.n	80012f6 <TIM_Base_SetConfig+0x3a>
 80012ea:	4c15      	ldr	r4, [pc, #84]	; (8001340 <TIM_Base_SetConfig+0x84>)
 80012ec:	42a0      	cmp	r0, r4
 80012ee:	d002      	beq.n	80012f6 <TIM_Base_SetConfig+0x3a>
 80012f0:	4c14      	ldr	r4, [pc, #80]	; (8001344 <TIM_Base_SetConfig+0x88>)
 80012f2:	42a0      	cmp	r0, r4
 80012f4:	d103      	bne.n	80012fe <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 80012f6:	4c14      	ldr	r4, [pc, #80]	; (8001348 <TIM_Base_SetConfig+0x8c>)
 80012f8:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012fa:	68cc      	ldr	r4, [r1, #12]
 80012fc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012fe:	2480      	movs	r4, #128	; 0x80
 8001300:	43a3      	bics	r3, r4
 8001302:	694c      	ldr	r4, [r1, #20]
 8001304:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001306:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001308:	688b      	ldr	r3, [r1, #8]
 800130a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800130c:	680b      	ldr	r3, [r1, #0]
 800130e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001310:	4290      	cmp	r0, r2
 8001312:	d008      	beq.n	8001326 <TIM_Base_SetConfig+0x6a>
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <TIM_Base_SetConfig+0x80>)
 8001316:	4298      	cmp	r0, r3
 8001318:	d005      	beq.n	8001326 <TIM_Base_SetConfig+0x6a>
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <TIM_Base_SetConfig+0x84>)
 800131c:	4298      	cmp	r0, r3
 800131e:	d002      	beq.n	8001326 <TIM_Base_SetConfig+0x6a>
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <TIM_Base_SetConfig+0x88>)
 8001322:	4298      	cmp	r0, r3
 8001324:	d101      	bne.n	800132a <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001326:	690b      	ldr	r3, [r1, #16]
 8001328:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800132a:	2301      	movs	r3, #1
 800132c:	6143      	str	r3, [r0, #20]
}
 800132e:	bd10      	pop	{r4, pc}
 8001330:	40012c00 	.word	0x40012c00
 8001334:	40000400 	.word	0x40000400
 8001338:	40002000 	.word	0x40002000
 800133c:	40014000 	.word	0x40014000
 8001340:	40014400 	.word	0x40014400
 8001344:	40014800 	.word	0x40014800
 8001348:	fffffcff 	.word	0xfffffcff

0800134c <HAL_TIM_PWM_Init>:
{
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001350:	2001      	movs	r0, #1
  if(htim == NULL)
 8001352:	2c00      	cmp	r4, #0
 8001354:	d014      	beq.n	8001380 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001356:	0025      	movs	r5, r4
 8001358:	353d      	adds	r5, #61	; 0x3d
 800135a:	782b      	ldrb	r3, [r5, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001362:	0022      	movs	r2, r4
 8001364:	323c      	adds	r2, #60	; 0x3c
 8001366:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8001368:	0020      	movs	r0, r4
 800136a:	f000 fe01 	bl	8001f70 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800136e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001370:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001372:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001374:	1d21      	adds	r1, r4, #4
 8001376:	f7ff ffa1 	bl	80012bc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800137a:	2301      	movs	r3, #1
  return HAL_OK;
 800137c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800137e:	702b      	strb	r3, [r5, #0]
}
 8001380:	bd70      	pop	{r4, r5, r6, pc}
	...

08001384 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001384:	2210      	movs	r2, #16
 8001386:	6a03      	ldr	r3, [r0, #32]
{
 8001388:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800138a:	4393      	bics	r3, r2
 800138c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800138e:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001390:	4d16      	ldr	r5, [pc, #88]	; (80013ec <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8001392:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001394:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001396:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001398:	680d      	ldr	r5, [r1, #0]
 800139a:	022d      	lsls	r5, r5, #8
 800139c:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800139e:	2520      	movs	r5, #32
 80013a0:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80013a2:	688d      	ldr	r5, [r1, #8]
 80013a4:	012d      	lsls	r5, r5, #4
 80013a6:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80013a8:	4d11      	ldr	r5, [pc, #68]	; (80013f0 <TIM_OC2_SetConfig+0x6c>)
 80013aa:	42a8      	cmp	r0, r5
 80013ac:	d10f      	bne.n	80013ce <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80013ae:	2580      	movs	r5, #128	; 0x80
 80013b0:	43aa      	bics	r2, r5
 80013b2:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80013b4:	68ca      	ldr	r2, [r1, #12]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80013ba:	2540      	movs	r5, #64	; 0x40
 80013bc:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80013be:	4d0d      	ldr	r5, [pc, #52]	; (80013f4 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013c0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80013c2:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013c4:	698b      	ldr	r3, [r1, #24]
 80013c6:	4333      	orrs	r3, r6
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	432b      	orrs	r3, r5
 80013cc:	e008      	b.n	80013e0 <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80013ce:	4d0a      	ldr	r5, [pc, #40]	; (80013f8 <TIM_OC2_SetConfig+0x74>)
 80013d0:	42a8      	cmp	r0, r5
 80013d2:	d0f4      	beq.n	80013be <TIM_OC2_SetConfig+0x3a>
 80013d4:	4d09      	ldr	r5, [pc, #36]	; (80013fc <TIM_OC2_SetConfig+0x78>)
 80013d6:	42a8      	cmp	r0, r5
 80013d8:	d0f1      	beq.n	80013be <TIM_OC2_SetConfig+0x3a>
 80013da:	4d09      	ldr	r5, [pc, #36]	; (8001400 <TIM_OC2_SetConfig+0x7c>)
 80013dc:	42a8      	cmp	r0, r5
 80013de:	d0ee      	beq.n	80013be <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80013e0:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80013e2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80013e4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80013e6:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80013e8:	6202      	str	r2, [r0, #32]
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	ffff8cff 	.word	0xffff8cff
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	fffff3ff 	.word	0xfffff3ff
 80013f8:	40014000 	.word	0x40014000
 80013fc:	40014400 	.word	0x40014400
 8001400:	40014800 	.word	0x40014800

08001404 <HAL_TIM_PWM_ConfigChannel>:
{
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001406:	0006      	movs	r6, r0
 8001408:	2302      	movs	r3, #2
 800140a:	363c      	adds	r6, #60	; 0x3c
{
 800140c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800140e:	7831      	ldrb	r1, [r6, #0]
{
 8001410:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001412:	0018      	movs	r0, r3
 8001414:	2901      	cmp	r1, #1
 8001416:	d025      	beq.n	8001464 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 800141a:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800141c:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 800141e:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001420:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8001422:	2a0c      	cmp	r2, #12
 8001424:	d81a      	bhi.n	800145c <HAL_TIM_PWM_ConfigChannel+0x58>
 8001426:	0010      	movs	r0, r2
 8001428:	f7fe fe78 	bl	800011c <__gnu_thumb1_case_uqi>
 800142c:	18181807 	.word	0x18181807
 8001430:	1818181d 	.word	0x1818181d
 8001434:	1818182f 	.word	0x1818182f
 8001438:	41          	.byte	0x41
 8001439:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800143a:	0029      	movs	r1, r5
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	f7ff fdc5 	bl	8000fcc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001442:	2208      	movs	r2, #8
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	6999      	ldr	r1, [r3, #24]
 8001448:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800144a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800144c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	438a      	bics	r2, r1
 8001452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001458:	430a      	orrs	r2, r1
 800145a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800145c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800145e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001460:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8001462:	7030      	strb	r0, [r6, #0]
}
 8001464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001466:	0029      	movs	r1, r5
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	f7ff ff8b 	bl	8001384 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	6999      	ldr	r1, [r3, #24]
 8001476:	430a      	orrs	r2, r1
 8001478:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	4915      	ldr	r1, [pc, #84]	; (80014d4 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800147e:	400a      	ands	r2, r1
 8001480:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001482:	692a      	ldr	r2, [r5, #16]
 8001484:	6999      	ldr	r1, [r3, #24]
 8001486:	0212      	lsls	r2, r2, #8
 8001488:	e7e6      	b.n	8001458 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800148a:	0029      	movs	r1, r5
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f7ff fde1 	bl	8001054 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001492:	2208      	movs	r2, #8
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	69d9      	ldr	r1, [r3, #28]
 8001498:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800149a:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800149c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	438a      	bics	r2, r1
 80014a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80014a8:	430a      	orrs	r2, r1
 80014aa:	61da      	str	r2, [r3, #28]
    break;
 80014ac:	e7d6      	b.n	800145c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80014ae:	0029      	movs	r1, r5
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	f7ff fe13 	bl	80010dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	69d9      	ldr	r1, [r3, #28]
 80014be:	430a      	orrs	r2, r1
 80014c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	4903      	ldr	r1, [pc, #12]	; (80014d4 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80014ca:	692a      	ldr	r2, [r5, #16]
 80014cc:	69d9      	ldr	r1, [r3, #28]
 80014ce:	0212      	lsls	r2, r2, #8
 80014d0:	e7ea      	b.n	80014a8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	fffffbff 	.word	0xfffffbff

080014d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80014d8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80014da:	2401      	movs	r4, #1
 80014dc:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80014de:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80014e0:	6a03      	ldr	r3, [r0, #32]
 80014e2:	43a3      	bics	r3, r4
 80014e4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80014e6:	6a03      	ldr	r3, [r0, #32]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	6202      	str	r2, [r0, #32]
}
 80014ec:	bd10      	pop	{r4, pc}
	...

080014f0 <HAL_TIM_PWM_Start>:
{
 80014f0:	b510      	push	{r4, lr}
 80014f2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014f4:	2201      	movs	r2, #1
 80014f6:	6800      	ldr	r0, [r0, #0]
 80014f8:	f7ff ffee 	bl	80014d8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_TIM_PWM_Start+0x3c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d008      	beq.n	8001516 <HAL_TIM_PWM_Start+0x26>
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_TIM_PWM_Start+0x40>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d005      	beq.n	8001516 <HAL_TIM_PWM_Start+0x26>
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_TIM_PWM_Start+0x44>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d002      	beq.n	8001516 <HAL_TIM_PWM_Start+0x26>
 8001510:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_TIM_PWM_Start+0x48>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d104      	bne.n	8001520 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800151a:	0212      	lsls	r2, r2, #8
 800151c:	430a      	orrs	r2, r1
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001520:	2201      	movs	r2, #1
 8001522:	6819      	ldr	r1, [r3, #0]
}
 8001524:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bd10      	pop	{r4, pc}
 800152c:	40012c00 	.word	0x40012c00
 8001530:	40014000 	.word	0x40014000
 8001534:	40014400 	.word	0x40014400
 8001538:	40014800 	.word	0x40014800

0800153c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800153c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800153e:	0004      	movs	r4, r0
 8001540:	343c      	adds	r4, #60	; 0x3c
 8001542:	7822      	ldrb	r2, [r4, #0]
{
 8001544:	0003      	movs	r3, r0
 8001546:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001548:	2a01      	cmp	r2, #1
 800154a:	d017      	beq.n	800157c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800154c:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800154e:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001550:	353d      	adds	r5, #61	; 0x3d
 8001552:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	306e      	adds	r0, #110	; 0x6e
 8001558:	4382      	bics	r2, r0
 800155a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001560:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001562:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001564:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001566:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	4382      	bics	r2, r0
 800156c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800156e:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001570:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001576:	2301      	movs	r3, #1
 8001578:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800157a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800157c:	bd30      	pop	{r4, r5, pc}
	...

08001580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001580:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001582:	0004      	movs	r4, r0
 8001584:	343c      	adds	r4, #60	; 0x3c
 8001586:	7823      	ldrb	r3, [r4, #0]
{
 8001588:	0002      	movs	r2, r0
 800158a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800158c:	2b01      	cmp	r3, #1
 800158e:	d024      	beq.n	80015da <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8001590:	0015      	movs	r5, r2
 8001592:	353d      	adds	r5, #61	; 0x3d
 8001594:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8001598:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800159a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800159c:	4003      	ands	r3, r0
 800159e:	6888      	ldr	r0, [r1, #8]
 80015a0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80015a4:	4003      	ands	r3, r0
 80015a6:	6848      	ldr	r0, [r1, #4]
 80015a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 80015ac:	4003      	ands	r3, r0
 80015ae:	6808      	ldr	r0, [r1, #0]
 80015b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 80015b4:	4003      	ands	r3, r0
 80015b6:	6908      	ldr	r0, [r1, #16]
 80015b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 80015bc:	4003      	ands	r3, r0
 80015be:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015c0:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80015c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 80015c6:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015ca:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015cc:	4003      	ands	r3, r0
 80015ce:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80015d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015d4:	2301      	movs	r3, #1
 80015d6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80015d8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80015da:	bd30      	pop	{r4, r5, pc}
 80015dc:	fffffcff 	.word	0xfffffcff
 80015e0:	fffffbff 	.word	0xfffffbff
 80015e4:	fffff7ff 	.word	0xfffff7ff
 80015e8:	ffffefff 	.word	0xffffefff
 80015ec:	ffffdfff 	.word	0xffffdfff
 80015f0:	ffffbfff 	.word	0xffffbfff
 80015f4:	ffff7fff 	.word	0xffff7fff

080015f8 <HAL_TIMEx_CommutationCallback>:
 80015f8:	4770      	bx	lr

080015fa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80015fa:	4770      	bx	lr

080015fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015fc:	6803      	ldr	r3, [r0, #0]
 80015fe:	4906      	ldr	r1, [pc, #24]	; (8001618 <UART_EndRxTransfer+0x1c>)
 8001600:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001602:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	3123      	adds	r1, #35	; 0x23
 800160c:	31ff      	adds	r1, #255	; 0xff
 800160e:	438a      	bics	r2, r1
 8001610:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001612:	2320      	movs	r3, #32
 8001614:	7003      	strb	r3, [r0, #0]
}
 8001616:	4770      	bx	lr
 8001618:	fffffedf 	.word	0xfffffedf

0800161c <HAL_UART_Transmit_IT>:
{
 800161c:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800161e:	0006      	movs	r6, r0
 8001620:	3669      	adds	r6, #105	; 0x69
 8001622:	7833      	ldrb	r3, [r6, #0]
{
 8001624:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001626:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001628:	2b20      	cmp	r3, #32
 800162a:	d124      	bne.n	8001676 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 800162c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800162e:	2900      	cmp	r1, #0
 8001630:	d021      	beq.n	8001676 <HAL_UART_Transmit_IT+0x5a>
 8001632:	2a00      	cmp	r2, #0
 8001634:	d01f      	beq.n	8001676 <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	68a5      	ldr	r5, [r4, #8]
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	429d      	cmp	r5, r3
 800163e:	d104      	bne.n	800164a <HAL_UART_Transmit_IT+0x2e>
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8001646:	4201      	tst	r1, r0
 8001648:	d115      	bne.n	8001676 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 800164a:	0025      	movs	r5, r4
 800164c:	3568      	adds	r5, #104	; 0x68
 800164e:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 8001650:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001652:	2b01      	cmp	r3, #1
 8001654:	d00f      	beq.n	8001676 <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 8001656:	0023      	movs	r3, r4
 8001658:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 800165a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 800165c:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 800165e:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001660:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001662:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001664:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001666:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001668:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800166a:	6808      	ldr	r0, [r1, #0]
 800166c:	325f      	adds	r2, #95	; 0x5f
 800166e:	4302      	orrs	r2, r0
    return HAL_OK;
 8001670:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 8001672:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001674:	600a      	str	r2, [r1, #0]
}
 8001676:	bd70      	pop	{r4, r5, r6, pc}

08001678 <HAL_UART_Receive_IT>:
{
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 800167a:	0006      	movs	r6, r0
 800167c:	366a      	adds	r6, #106	; 0x6a
 800167e:	7834      	ldrb	r4, [r6, #0]
{
 8001680:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001682:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001684:	2c20      	cmp	r4, #32
 8001686:	d135      	bne.n	80016f4 <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8001688:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800168a:	2900      	cmp	r1, #0
 800168c:	d032      	beq.n	80016f4 <HAL_UART_Receive_IT+0x7c>
 800168e:	2a00      	cmp	r2, #0
 8001690:	d030      	beq.n	80016f4 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001692:	2480      	movs	r4, #128	; 0x80
 8001694:	689d      	ldr	r5, [r3, #8]
 8001696:	0164      	lsls	r4, r4, #5
 8001698:	42a5      	cmp	r5, r4
 800169a:	d104      	bne.n	80016a6 <HAL_UART_Receive_IT+0x2e>
 800169c:	691c      	ldr	r4, [r3, #16]
 800169e:	2c00      	cmp	r4, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 80016a2:	4201      	tst	r1, r0
 80016a4:	d126      	bne.n	80016f4 <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 80016a6:	001c      	movs	r4, r3
 80016a8:	3468      	adds	r4, #104	; 0x68
 80016aa:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 80016ac:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80016ae:	2f01      	cmp	r7, #1
 80016b0:	d020      	beq.n	80016f4 <HAL_UART_Receive_IT+0x7c>
 80016b2:	3801      	subs	r0, #1
 80016b4:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 80016b6:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80016b8:	0019      	movs	r1, r3
 80016ba:	3158      	adds	r1, #88	; 0x58
 80016bc:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80016be:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0152      	lsls	r2, r2, #5
 80016c4:	4295      	cmp	r5, r2
 80016c6:	d118      	bne.n	80016fa <HAL_UART_Receive_IT+0x82>
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d113      	bne.n	80016f6 <HAL_UART_Receive_IT+0x7e>
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <HAL_UART_Receive_IT+0x90>)
 80016d0:	001a      	movs	r2, r3
 80016d2:	325c      	adds	r2, #92	; 0x5c
 80016d4:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016d6:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016d8:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016dc:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016de:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e0:	6899      	ldr	r1, [r3, #8]
 80016e2:	3a21      	subs	r2, #33	; 0x21
 80016e4:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 80016e6:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e8:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80016ea:	2290      	movs	r2, #144	; 0x90
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	0052      	lsls	r2, r2, #1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80016f6:	21ff      	movs	r1, #255	; 0xff
 80016f8:	e7ea      	b.n	80016d0 <HAL_UART_Receive_IT+0x58>
 80016fa:	2d00      	cmp	r5, #0
 80016fc:	d1eb      	bne.n	80016d6 <HAL_UART_Receive_IT+0x5e>
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d0f8      	beq.n	80016f6 <HAL_UART_Receive_IT+0x7e>
 8001704:	217f      	movs	r1, #127	; 0x7f
 8001706:	e7e3      	b.n	80016d0 <HAL_UART_Receive_IT+0x58>
 8001708:	000001ff 	.word	0x000001ff

0800170c <HAL_UART_TxCpltCallback>:
 800170c:	4770      	bx	lr

0800170e <HAL_UART_ErrorCallback>:
 800170e:	4770      	bx	lr

08001710 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001710:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	0002      	movs	r2, r0
{
 8001716:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001718:	325a      	adds	r2, #90	; 0x5a
 800171a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800171c:	3a08      	subs	r2, #8
 800171e:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8001720:	f7ff fff5 	bl	800170e <HAL_UART_ErrorCallback>
}
 8001724:	bd10      	pop	{r4, pc}
	...

08001728 <UART_SetConfig>:
{
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800172c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800172e:	69c2      	ldr	r2, [r0, #28]
 8001730:	6883      	ldr	r3, [r0, #8]
 8001732:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001734:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001736:	4303      	orrs	r3, r0
 8001738:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800173a:	4e3f      	ldr	r6, [pc, #252]	; (8001838 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800173c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800173e:	483f      	ldr	r0, [pc, #252]	; (800183c <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001740:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001742:	4001      	ands	r1, r0
 8001744:	430b      	orrs	r3, r1
 8001746:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001748:	686b      	ldr	r3, [r5, #4]
 800174a:	493d      	ldr	r1, [pc, #244]	; (8001840 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800174c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800174e:	400b      	ands	r3, r1
 8001750:	68e1      	ldr	r1, [r4, #12]
 8001752:	430b      	orrs	r3, r1
 8001754:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001756:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001758:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800175a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800175c:	4839      	ldr	r0, [pc, #228]	; (8001844 <UART_SetConfig+0x11c>)
 800175e:	4001      	ands	r1, r0
 8001760:	430b      	orrs	r3, r1
 8001762:	60ab      	str	r3, [r5, #8]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001768:	42b5      	cmp	r5, r6
 800176a:	d110      	bne.n	800178e <UART_SetConfig+0x66>
 800176c:	2003      	movs	r0, #3
 800176e:	4936      	ldr	r1, [pc, #216]	; (8001848 <UART_SetConfig+0x120>)
 8001770:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001772:	4001      	ands	r1, r0
 8001774:	4835      	ldr	r0, [pc, #212]	; (800184c <UART_SetConfig+0x124>)
 8001776:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001778:	429a      	cmp	r2, r3
 800177a:	d013      	beq.n	80017a4 <UART_SetConfig+0x7c>
    switch (clocksource)
 800177c:	2808      	cmp	r0, #8
 800177e:	d858      	bhi.n	8001832 <UART_SetConfig+0x10a>
 8001780:	f7fe fccc 	bl	800011c <__gnu_thumb1_case_uqi>
 8001784:	57425737 	.word	0x57425737
 8001788:	5757574b 	.word	0x5757574b
 800178c:	50          	.byte	0x50
 800178d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800178e:	4930      	ldr	r1, [pc, #192]	; (8001850 <UART_SetConfig+0x128>)
 8001790:	428d      	cmp	r5, r1
 8001792:	d14c      	bne.n	800182e <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001794:	429a      	cmp	r2, r3
 8001796:	d12c      	bne.n	80017f2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001798:	f7ff fb84 	bl	8000ea4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800179c:	6863      	ldr	r3, [r4, #4]
 800179e:	0040      	lsls	r0, r0, #1
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	e00b      	b.n	80017bc <UART_SetConfig+0x94>
    switch (clocksource)
 80017a4:	2808      	cmp	r0, #8
 80017a6:	d821      	bhi.n	80017ec <UART_SetConfig+0xc4>
 80017a8:	f7fe fcae 	bl	8000108 <__gnu_thumb1_case_sqi>
 80017ac:	200520f6 	.word	0x200520f6
 80017b0:	20202018 	.word	0x20202018
 80017b4:	1b          	.byte	0x1b
 80017b5:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	0858      	lsrs	r0, r3, #1
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017bc:	18c0      	adds	r0, r0, r3
 80017be:	6861      	ldr	r1, [r4, #4]
 80017c0:	f7fe fcb6 	bl	8000130 <__udivsi3>
 80017c4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80017c6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80017c8:	220f      	movs	r2, #15
 80017ca:	0019      	movs	r1, r3
 80017cc:	4391      	bics	r1, r2
 80017ce:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017d0:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80017d2:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017d4:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60cb      	str	r3, [r1, #12]
}
 80017da:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017dc:	f7ff fa94 	bl	8000d08 <HAL_RCC_GetSysClockFreq>
 80017e0:	e7dc      	b.n	800179c <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017e2:	6863      	ldr	r3, [r4, #4]
 80017e4:	0858      	lsrs	r0, r3, #1
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	e7e7      	b.n	80017bc <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e7ea      	b.n	80017c8 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80017f2:	f7ff fb57 	bl	8000ea4 <HAL_RCC_GetPCLK1Freq>
 80017f6:	6861      	ldr	r1, [r4, #4]
 80017f8:	084b      	lsrs	r3, r1, #1
 80017fa:	1818      	adds	r0, r3, r0
 80017fc:	f7fe fc98 	bl	8000130 <__udivsi3>
 8001800:	b280      	uxth	r0, r0
 8001802:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001804:	2000      	movs	r0, #0
        break;
 8001806:	e7e8      	b.n	80017da <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001808:	6861      	ldr	r1, [r4, #4]
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <UART_SetConfig+0x130>)
 800180c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800180e:	18c0      	adds	r0, r0, r3
 8001810:	f7fe fc8e 	bl	8000130 <__udivsi3>
 8001814:	b280      	uxth	r0, r0
 8001816:	60f0      	str	r0, [r6, #12]
 8001818:	e7f4      	b.n	8001804 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800181a:	f7ff fa75 	bl	8000d08 <HAL_RCC_GetSysClockFreq>
 800181e:	6861      	ldr	r1, [r4, #4]
 8001820:	084b      	lsrs	r3, r1, #1
 8001822:	e7f4      	b.n	800180e <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	6861      	ldr	r1, [r4, #4]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	0848      	lsrs	r0, r1, #1
 800182c:	e7ef      	b.n	800180e <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800182e:	429a      	cmp	r2, r3
 8001830:	d0dc      	beq.n	80017ec <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001832:	2001      	movs	r0, #1
  return ret;
 8001834:	e7d1      	b.n	80017da <UART_SetConfig+0xb2>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40013800 	.word	0x40013800
 800183c:	ffff69f3 	.word	0xffff69f3
 8001840:	ffffcfff 	.word	0xffffcfff
 8001844:	fffff4ff 	.word	0xfffff4ff
 8001848:	40021000 	.word	0x40021000
 800184c:	08002344 	.word	0x08002344
 8001850:	40004400 	.word	0x40004400
 8001854:	00f42400 	.word	0x00f42400
 8001858:	007a1200 	.word	0x007a1200

0800185c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800185c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800185e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001860:	07da      	lsls	r2, r3, #31
 8001862:	d506      	bpl.n	8001872 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001864:	6801      	ldr	r1, [r0, #0]
 8001866:	4c28      	ldr	r4, [pc, #160]	; (8001908 <UART_AdvFeatureConfig+0xac>)
 8001868:	684a      	ldr	r2, [r1, #4]
 800186a:	4022      	ands	r2, r4
 800186c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800186e:	4322      	orrs	r2, r4
 8001870:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001872:	079a      	lsls	r2, r3, #30
 8001874:	d506      	bpl.n	8001884 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001876:	6801      	ldr	r1, [r0, #0]
 8001878:	4c24      	ldr	r4, [pc, #144]	; (800190c <UART_AdvFeatureConfig+0xb0>)
 800187a:	684a      	ldr	r2, [r1, #4]
 800187c:	4022      	ands	r2, r4
 800187e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001880:	4322      	orrs	r2, r4
 8001882:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001884:	075a      	lsls	r2, r3, #29
 8001886:	d506      	bpl.n	8001896 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001888:	6801      	ldr	r1, [r0, #0]
 800188a:	4c21      	ldr	r4, [pc, #132]	; (8001910 <UART_AdvFeatureConfig+0xb4>)
 800188c:	684a      	ldr	r2, [r1, #4]
 800188e:	4022      	ands	r2, r4
 8001890:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001892:	4322      	orrs	r2, r4
 8001894:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001896:	071a      	lsls	r2, r3, #28
 8001898:	d506      	bpl.n	80018a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800189a:	6801      	ldr	r1, [r0, #0]
 800189c:	4c1d      	ldr	r4, [pc, #116]	; (8001914 <UART_AdvFeatureConfig+0xb8>)
 800189e:	684a      	ldr	r2, [r1, #4]
 80018a0:	4022      	ands	r2, r4
 80018a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80018a4:	4322      	orrs	r2, r4
 80018a6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018a8:	06da      	lsls	r2, r3, #27
 80018aa:	d506      	bpl.n	80018ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018ac:	6801      	ldr	r1, [r0, #0]
 80018ae:	4c1a      	ldr	r4, [pc, #104]	; (8001918 <UART_AdvFeatureConfig+0xbc>)
 80018b0:	688a      	ldr	r2, [r1, #8]
 80018b2:	4022      	ands	r2, r4
 80018b4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80018b6:	4322      	orrs	r2, r4
 80018b8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018ba:	069a      	lsls	r2, r3, #26
 80018bc:	d506      	bpl.n	80018cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018be:	6801      	ldr	r1, [r0, #0]
 80018c0:	4c16      	ldr	r4, [pc, #88]	; (800191c <UART_AdvFeatureConfig+0xc0>)
 80018c2:	688a      	ldr	r2, [r1, #8]
 80018c4:	4022      	ands	r2, r4
 80018c6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80018c8:	4322      	orrs	r2, r4
 80018ca:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018cc:	065a      	lsls	r2, r3, #25
 80018ce:	d510      	bpl.n	80018f2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018d0:	6801      	ldr	r1, [r0, #0]
 80018d2:	4d13      	ldr	r5, [pc, #76]	; (8001920 <UART_AdvFeatureConfig+0xc4>)
 80018d4:	684a      	ldr	r2, [r1, #4]
 80018d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80018d8:	402a      	ands	r2, r5
 80018da:	4322      	orrs	r2, r4
 80018dc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	0352      	lsls	r2, r2, #13
 80018e2:	4294      	cmp	r4, r2
 80018e4:	d105      	bne.n	80018f2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018e6:	684a      	ldr	r2, [r1, #4]
 80018e8:	4c0e      	ldr	r4, [pc, #56]	; (8001924 <UART_AdvFeatureConfig+0xc8>)
 80018ea:	4022      	ands	r2, r4
 80018ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80018ee:	4322      	orrs	r2, r4
 80018f0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	d506      	bpl.n	8001904 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018f6:	6802      	ldr	r2, [r0, #0]
 80018f8:	490b      	ldr	r1, [pc, #44]	; (8001928 <UART_AdvFeatureConfig+0xcc>)
 80018fa:	6853      	ldr	r3, [r2, #4]
 80018fc:	400b      	ands	r3, r1
 80018fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001900:	430b      	orrs	r3, r1
 8001902:	6053      	str	r3, [r2, #4]
}
 8001904:	bd30      	pop	{r4, r5, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	fffdffff 	.word	0xfffdffff
 800190c:	fffeffff 	.word	0xfffeffff
 8001910:	fffbffff 	.word	0xfffbffff
 8001914:	ffff7fff 	.word	0xffff7fff
 8001918:	ffffefff 	.word	0xffffefff
 800191c:	ffffdfff 	.word	0xffffdfff
 8001920:	ffefffff 	.word	0xffefffff
 8001924:	ff9fffff 	.word	0xff9fffff
 8001928:	fff7ffff 	.word	0xfff7ffff

0800192c <HAL_UART_Init>:
{
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001930:	d101      	bne.n	8001936 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
}
 8001934:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001936:	0005      	movs	r5, r0
 8001938:	3569      	adds	r5, #105	; 0x69
 800193a:	782b      	ldrb	r3, [r5, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d104      	bne.n	800194c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001942:	0002      	movs	r2, r0
 8001944:	3268      	adds	r2, #104	; 0x68
 8001946:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001948:	f000 fc5a 	bl	8002200 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800194c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800194e:	2101      	movs	r1, #1
 8001950:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001952:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001954:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001956:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001958:	438b      	bics	r3, r1
 800195a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800195c:	f7ff fee4 	bl	8001728 <UART_SetConfig>
 8001960:	2801      	cmp	r0, #1
 8001962:	d0e6      	beq.n	8001932 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800196a:	0020      	movs	r0, r4
 800196c:	f7ff ff76 	bl	800185c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	490b      	ldr	r1, [pc, #44]	; (80019a0 <HAL_UART_Init+0x74>)
 8001974:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001976:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001978:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800197a:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800197c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	438a      	bics	r2, r1
 8001982:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001984:	2201      	movs	r2, #1
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800198c:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800198e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001990:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001992:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8001994:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001996:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001998:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800199a:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800199c:	e7ca      	b.n	8001934 <HAL_UART_Init+0x8>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	fffff7ff 	.word	0xfffff7ff

080019a4 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019a4:	0003      	movs	r3, r0
{
 80019a6:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019a8:	3369      	adds	r3, #105	; 0x69
 80019aa:	781b      	ldrb	r3, [r3, #0]
{
 80019ac:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80019ae:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019b0:	2b21      	cmp	r3, #33	; 0x21
 80019b2:	d10f      	bne.n	80019d4 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 80019b4:	0014      	movs	r4, r2
 80019b6:	3452      	adds	r4, #82	; 0x52
 80019b8:	8823      	ldrh	r3, [r4, #0]
 80019ba:	6811      	ldr	r1, [r2, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80019c2:	680a      	ldr	r2, [r1, #0]
 80019c4:	307e      	adds	r0, #126	; 0x7e
 80019c6:	4382      	bics	r2, r0
 80019c8:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	6808      	ldr	r0, [r1, #0]
 80019ce:	4302      	orrs	r2, r0
 80019d0:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 80019d2:	2000      	movs	r0, #0
  }
}
 80019d4:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d6:	2080      	movs	r0, #128	; 0x80
 80019d8:	6895      	ldr	r5, [r2, #8]
 80019da:	0140      	lsls	r0, r0, #5
 80019dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80019de:	4285      	cmp	r5, r0
 80019e0:	d10d      	bne.n	80019fe <UART_Transmit_IT+0x5a>
 80019e2:	6910      	ldr	r0, [r2, #16]
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d10a      	bne.n	80019fe <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80019e8:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 80019ea:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80019ec:	05c0      	lsls	r0, r0, #23
 80019ee:	0dc0      	lsrs	r0, r0, #23
 80019f0:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 80019f4:	8823      	ldrh	r3, [r4, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8023      	strh	r3, [r4, #0]
 80019fc:	e7e9      	b.n	80019d2 <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80019fe:	1c58      	adds	r0, r3, #1
 8001a00:	64d0      	str	r0, [r2, #76]	; 0x4c
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	850b      	strh	r3, [r1, #40]	; 0x28
 8001a06:	e7f5      	b.n	80019f4 <UART_Transmit_IT+0x50>

08001a08 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a08:	2140      	movs	r1, #64	; 0x40
 8001a0a:	6802      	ldr	r2, [r0, #0]
{
 8001a0c:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	438b      	bics	r3, r1
 8001a12:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a14:	0003      	movs	r3, r0
 8001a16:	2220      	movs	r2, #32
 8001a18:	3369      	adds	r3, #105	; 0x69
 8001a1a:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8001a1c:	f7ff fe76 	bl	800170c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001a20:	2000      	movs	r0, #0
 8001a22:	bd10      	pop	{r4, pc}

08001a24 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a24:	0002      	movs	r2, r0
{
 8001a26:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a28:	326a      	adds	r2, #106	; 0x6a
 8001a2a:	7811      	ldrb	r1, [r2, #0]
 8001a2c:	6803      	ldr	r3, [r0, #0]
 8001a2e:	2922      	cmp	r1, #34	; 0x22
 8001a30:	d12d      	bne.n	8001a8e <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8001a32:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a34:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8001a36:	315c      	adds	r1, #92	; 0x5c
 8001a38:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001a3a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a3c:	0164      	lsls	r4, r4, #5
 8001a3e:	4029      	ands	r1, r5
 8001a40:	6885      	ldr	r5, [r0, #8]
 8001a42:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001a44:	42a5      	cmp	r5, r4
 8001a46:	d11e      	bne.n	8001a86 <UART_Receive_IT+0x62>
 8001a48:	6904      	ldr	r4, [r0, #16]
 8001a4a:	2c00      	cmp	r4, #0
 8001a4c:	d11b      	bne.n	8001a86 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8001a4e:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8001a50:	3302      	adds	r3, #2
 8001a52:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001a54:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8001a56:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8001a58:	315a      	adds	r1, #90	; 0x5a
 8001a5a:	880b      	ldrh	r3, [r1, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	800b      	strh	r3, [r1, #0]
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	d10d      	bne.n	8001a82 <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a66:	6803      	ldr	r3, [r0, #0]
 8001a68:	4d0c      	ldr	r5, [pc, #48]	; (8001a9c <UART_Receive_IT+0x78>)
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	4029      	ands	r1, r5
 8001a6e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	3523      	adds	r5, #35	; 0x23
 8001a74:	35ff      	adds	r5, #255	; 0xff
 8001a76:	43a9      	bics	r1, r5
 8001a78:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8001a7e:	f7fe fbfb 	bl	8000278 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001a82:	0020      	movs	r0, r4
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001a86:	1c5c      	adds	r4, r3, #1
 8001a88:	6544      	str	r4, [r0, #84]	; 0x54
 8001a8a:	7019      	strb	r1, [r3, #0]
 8001a8c:	e7e2      	b.n	8001a54 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001a8e:	2208      	movs	r2, #8
 8001a90:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8001a92:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001a98:	e7f3      	b.n	8001a82 <UART_Receive_IT+0x5e>
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	fffffedf 	.word	0xfffffedf

08001aa0 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001aa0:	220f      	movs	r2, #15
{
 8001aa2:	b570      	push	{r4, r5, r6, lr}
 8001aa4:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001aa6:	6800      	ldr	r0, [r0, #0]
 8001aa8:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001aaa:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001aac:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8001aae:	d108      	bne.n	8001ac2 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ab0:	2520      	movs	r5, #32
 8001ab2:	422b      	tst	r3, r5
 8001ab4:	d005      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x22>
 8001ab6:	4229      	tst	r1, r5
 8001ab8:	d003      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8001aba:	0020      	movs	r0, r4
 8001abc:	f7ff ffb2 	bl	8001a24 <UART_Receive_IT>
}
 8001ac0:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8001ac2:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d060      	beq.n	8001b8a <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4015      	ands	r5, r2
 8001acc:	d103      	bne.n	8001ad6 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001ace:	2690      	movs	r6, #144	; 0x90
 8001ad0:	0076      	lsls	r6, r6, #1
 8001ad2:	4231      	tst	r1, r6
 8001ad4:	d059      	beq.n	8001b8a <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ad6:	4213      	tst	r3, r2
 8001ad8:	d005      	beq.n	8001ae6 <HAL_UART_IRQHandler+0x46>
 8001ada:	05ce      	lsls	r6, r1, #23
 8001adc:	d503      	bpl.n	8001ae6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001ade:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ae0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8001ae2:	4332      	orrs	r2, r6
 8001ae4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4213      	tst	r3, r2
 8001aea:	d006      	beq.n	8001afa <HAL_UART_IRQHandler+0x5a>
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	d004      	beq.n	8001afa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001af0:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001af2:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8001af4:	1892      	adds	r2, r2, r2
 8001af6:	4332      	orrs	r2, r6
 8001af8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001afa:	2204      	movs	r2, #4
 8001afc:	4213      	tst	r3, r2
 8001afe:	d006      	beq.n	8001b0e <HAL_UART_IRQHandler+0x6e>
 8001b00:	2d00      	cmp	r5, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001b04:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b06:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8001b08:	3a02      	subs	r2, #2
 8001b0a:	4332      	orrs	r2, r6
 8001b0c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001b0e:	071a      	lsls	r2, r3, #28
 8001b10:	d508      	bpl.n	8001b24 <HAL_UART_IRQHandler+0x84>
 8001b12:	068a      	lsls	r2, r1, #26
 8001b14:	d401      	bmi.n	8001b1a <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b1e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b20:	4302      	orrs	r2, r0
 8001b22:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b24:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d0ca      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	4213      	tst	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_UART_IRQHandler+0x9a>
 8001b30:	4211      	tst	r1, r2
 8001b32:	d002      	beq.n	8001b3a <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8001b34:	0020      	movs	r0, r4
 8001b36:	f7ff ff75 	bl	8001a24 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001b3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8001b3c:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001b3e:	071b      	lsls	r3, r3, #28
 8001b40:	d404      	bmi.n	8001b4c <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	689d      	ldr	r5, [r3, #8]
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001b4a:	d01a      	beq.n	8001b82 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8001b4c:	f7ff fd56 	bl	80015fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b50:	2140      	movs	r1, #64	; 0x40
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	420a      	tst	r2, r1
 8001b58:	d00f      	beq.n	8001b7a <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b5a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001b5c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b5e:	438a      	bics	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_UART_IRQHandler+0x114>)
 8001b68:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b6a:	f7fe fe12 	bl	8000792 <HAL_DMA_Abort_IT>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d0a6      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b72:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001b74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b76:	4798      	blx	r3
 8001b78:	e7a2      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	f7ff fdc7 	bl	800170e <HAL_UART_ErrorCallback>
 8001b80:	e79e      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8001b82:	f7ff fdc4 	bl	800170e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b86:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001b88:	e79a      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	4213      	tst	r3, r2
 8001b8e:	d005      	beq.n	8001b9c <HAL_UART_IRQHandler+0xfc>
 8001b90:	4211      	tst	r1, r2
 8001b92:	d003      	beq.n	8001b9c <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8001b94:	0020      	movs	r0, r4
 8001b96:	f7ff ff05 	bl	80019a4 <UART_Transmit_IT>
    return;
 8001b9a:	e791      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	4213      	tst	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_UART_IRQHandler+0x104>
 8001ba2:	e78d      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
 8001ba4:	4211      	tst	r1, r2
 8001ba6:	d100      	bne.n	8001baa <HAL_UART_IRQHandler+0x10a>
 8001ba8:	e78a      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8001baa:	0020      	movs	r0, r4
 8001bac:	f7ff ff2c 	bl	8001a08 <UART_EndTransmit_IT>
    return;
 8001bb0:	e786      	b.n	8001ac0 <HAL_UART_IRQHandler+0x20>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	08001711 	.word	0x08001711

08001bb8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 8001bba:	4c31      	ldr	r4, [pc, #196]	; (8001c80 <MX_ADC_Init+0xc8>)
 8001bbc:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <MX_ADC_Init+0xcc>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bbe:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8001bc0:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc2:	2380      	movs	r3, #128	; 0x80
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bc4:	6161      	str	r1, [r4, #20]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc6:	061b      	lsls	r3, r3, #24
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc8:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001bca:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bcc:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bce:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bd0:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bd2:	0020      	movs	r0, r4
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd4:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd6:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001bd8:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001bda:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001bdc:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001bde:	6223      	str	r3, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001be0:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be2:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be4:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001be6:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001be8:	6362      	str	r2, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bea:	f7fe fbdb 	bl	80003a4 <HAL_ADC_Init>
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d003      	beq.n	8001bfa <MX_ADC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bf2:	214a      	movs	r1, #74	; 0x4a
 8001bf4:	4824      	ldr	r0, [pc, #144]	; (8001c88 <MX_ADC_Init+0xd0>)
 8001bf6:	f000 f93f 	bl	8001e78 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	015b      	lsls	r3, r3, #5
 8001c02:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c04:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c06:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c08:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c0a:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c0c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c0e:	f7fe fce3 	bl	80005d8 <HAL_ADC_ConfigChannel>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d003      	beq.n	8001c1e <MX_ADC_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c16:	2154      	movs	r1, #84	; 0x54
 8001c18:	481b      	ldr	r0, [pc, #108]	; (8001c88 <MX_ADC_Init+0xd0>)
 8001c1a:	f000 f92d 	bl	8001e78 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c1e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c20:	a901      	add	r1, sp, #4
 8001c22:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001c24:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c26:	f7fe fcd7 	bl	80005d8 <HAL_ADC_ConfigChannel>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d003      	beq.n	8001c36 <MX_ADC_Init+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c2e:	215c      	movs	r1, #92	; 0x5c
 8001c30:	4815      	ldr	r0, [pc, #84]	; (8001c88 <MX_ADC_Init+0xd0>)
 8001c32:	f000 f921 	bl	8001e78 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c36:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c38:	a901      	add	r1, sp, #4
 8001c3a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8001c3c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c3e:	f7fe fccb 	bl	80005d8 <HAL_ADC_ConfigChannel>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d003      	beq.n	8001c4e <MX_ADC_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c46:	2164      	movs	r1, #100	; 0x64
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <MX_ADC_Init+0xd0>)
 8001c4a:	f000 f915 	bl	8001e78 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c4e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c50:	a901      	add	r1, sp, #4
 8001c52:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001c54:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c56:	f7fe fcbf 	bl	80005d8 <HAL_ADC_ConfigChannel>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d003      	beq.n	8001c66 <MX_ADC_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c5e:	216c      	movs	r1, #108	; 0x6c
 8001c60:	4809      	ldr	r0, [pc, #36]	; (8001c88 <MX_ADC_Init+0xd0>)
 8001c62:	f000 f909 	bl	8001e78 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c66:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c68:	a901      	add	r1, sp, #4
 8001c6a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001c6c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c6e:	f7fe fcb3 	bl	80005d8 <HAL_ADC_ConfigChannel>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d003      	beq.n	8001c7e <MX_ADC_Init+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c76:	2174      	movs	r1, #116	; 0x74
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <MX_ADC_Init+0xd0>)
 8001c7a:	f000 f8fd 	bl	8001e78 <_Error_Handler>
  }

}
 8001c7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001c80:	20000044 	.word	0x20000044
 8001c84:	40012400 	.word	0x40012400
 8001c88:	08002348 	.word	0x08002348

08001c8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c8c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_ADC_MspInit+0x4c>)
 8001c90:	6802      	ldr	r2, [r0, #0]
{
 8001c92:	b086      	sub	sp, #24
  if(adcHandle->Instance==ADC1)
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d11c      	bne.n	8001cd2 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c98:	2080      	movs	r0, #128	; 0x80
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_ADC_MspInit+0x50>)
 8001c9c:	0080      	lsls	r0, r0, #2
 8001c9e:	6991      	ldr	r1, [r2, #24]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
                          |ADCMainBatVoltage_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca2:	4301      	orrs	r1, r0
 8001ca4:	6191      	str	r1, [r2, #24]
 8001ca6:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001caa:	4003      	ands	r3, r0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
 8001cb2:	231f      	movs	r3, #31
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
 8001cb6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb8:	3b1c      	subs	r3, #28
 8001cba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f7fe fd8b 	bl	80007d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001cc2:	200c      	movs	r0, #12
 8001cc4:	0022      	movs	r2, r4
 8001cc6:	0021      	movs	r1, r4
 8001cc8:	f7fe fcfc 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ccc:	200c      	movs	r0, #12
 8001cce:	f7fe fd29 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cd2:	b006      	add	sp, #24
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40012400 	.word	0x40012400
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	2080      	movs	r0, #128	; 0x80
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <MX_GPIO_Init+0xdc>)
 8001ce4:	0300      	lsls	r0, r0, #12
 8001ce6:	6959      	ldr	r1, [r3, #20]
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4301      	orrs	r1, r0
 8001cec:	6159      	str	r1, [r3, #20]
 8001cee:	695a      	ldr	r2, [r3, #20]
{
 8001cf0:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf4:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	9201      	str	r2, [sp, #4]
 8001cf8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfa:	6959      	ldr	r1, [r3, #20]
 8001cfc:	03c0      	lsls	r0, r0, #15
 8001cfe:	4301      	orrs	r1, r0
 8001d00:	6159      	str	r1, [r3, #20]
 8001d02:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8001d04:	2790      	movs	r7, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d06:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	9202      	str	r2, [sp, #8]
 8001d0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	6959      	ldr	r1, [r3, #20]
 8001d10:	0280      	lsls	r0, r0, #10
 8001d12:	4301      	orrs	r1, r0
 8001d14:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4002      	ands	r2, r0
 8001d1e:	9203      	str	r2, [sp, #12]
 8001d20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8001d24:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	430a      	orrs	r2, r1
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
 8001d2c:	4e24      	ldr	r6, [pc, #144]	; (8001dc0 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	400b      	ands	r3, r1
 8001d30:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8001d32:	0038      	movs	r0, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8001d3a:	f7fe fdfd 	bl	8000938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	0030      	movs	r0, r6
 8001d42:	2104      	movs	r1, #4
 8001d44:	f7fe fdf8 	bl	8000938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d48:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4c:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d4e:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	a905      	add	r1, sp, #20
 8001d52:	481c      	ldr	r0, [pc, #112]	; (8001dc4 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f7fe fd3d 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	a905      	add	r1, sp, #20
 8001d62:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 8001d64:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f7fe fd35 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BurstOFF6V_Pin|BurstOFF5V_Pin;
 8001d6e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = BurstOFF6V_Pin|BurstOFF5V_Pin;
 8001d72:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	3bbf      	subs	r3, #191	; 0xbf
 8001d78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f7fe fd2b 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDProblem_Pin;
 8001d82:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 8001d84:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LEDProblem_Pin;
 8001d86:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 8001d88:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	3b03      	subs	r3, #3
 8001d8c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f7fe fd21 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <MX_GPIO_Init+0xec>)
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	a905      	add	r1, sp, #20
 8001d9a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001d9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f7fe fd19 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da8:	a905      	add	r1, sp, #20
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dae:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db2:	f7fe fd11 	bl	80007d8 <HAL_GPIO_Init>

}
 8001db6:	b00b      	add	sp, #44	; 0x2c
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	00009020 	.word	0x00009020
 8001dcc:	0000ff38 	.word	0x0000ff38
 8001dd0:	48001400 	.word	0x48001400

08001dd4 <SystemClock_Config>:
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd4:	2380      	movs	r3, #128	; 0x80
{
 8001dd6:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd8:	025b      	lsls	r3, r3, #9
{
 8001dda:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ddc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001dde:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de0:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001de4:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de8:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dea:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dec:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001dee:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001df0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df2:	f7fe fda7 	bl	8000944 <HAL_RCC_OscConfig>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d000      	beq.n	8001dfc <SystemClock_Config+0x28>
 8001dfa:	e7fe      	b.n	8001dfa <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfe:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e00:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e02:	0021      	movs	r1, r4
 8001e04:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e06:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e08:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e0a:	f7fe ffaf 	bl	8000d6c <HAL_RCC_ClockConfig>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d000      	beq.n	8001e14 <SystemClock_Config+0x40>
 8001e12:	e7fe      	b.n	8001e12 <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e14:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e16:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e18:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1a:	f7ff f853 	bl	8000ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	1e04      	subs	r4, r0, #0
 8001e20:	d000      	beq.n	8001e24 <SystemClock_Config+0x50>
 8001e22:	e7fe      	b.n	8001e22 <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e24:	f7ff f838 	bl	8000e98 <HAL_RCC_GetHCLKFreq>
 8001e28:	21fa      	movs	r1, #250	; 0xfa
 8001e2a:	0089      	lsls	r1, r1, #2
 8001e2c:	f7fe f980 	bl	8000130 <__udivsi3>
 8001e30:	f7fe fc82 	bl	8000738 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e34:	2004      	movs	r0, #4
 8001e36:	f7fe fc99 	bl	800076c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	0022      	movs	r2, r4
 8001e3e:	0021      	movs	r1, r4
 8001e40:	4240      	negs	r0, r0
 8001e42:	f7fe fc3f 	bl	80006c4 <HAL_NVIC_SetPriority>
}
 8001e46:	b015      	add	sp, #84	; 0x54
 8001e48:	bd30      	pop	{r4, r5, pc}

08001e4a <main>:
{
 8001e4a:	b510      	push	{r4, lr}
	  HAL_Delay(1000);
 8001e4c:	24fa      	movs	r4, #250	; 0xfa
  HAL_Init();
 8001e4e:	f7fe fa7b 	bl	8000348 <HAL_Init>
  SystemClock_Config();
 8001e52:	f7ff ffbf 	bl	8001dd4 <SystemClock_Config>
  MX_GPIO_Init();
 8001e56:	f7ff ff43 	bl	8001ce0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001e5a:	f000 f8df 	bl	800201c <MX_TIM1_Init>
  MX_ADC_Init();
 8001e5e:	f7ff feab 	bl	8001bb8 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001e62:	f000 f9ad 	bl	80021c0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001e66:	f000 f95b 	bl	8002120 <MX_TIM3_Init>
  APP_Init();
 8001e6a:	f7fe f9ed 	bl	8000248 <APP_Init>
	  HAL_Delay(1000);
 8001e6e:	00a4      	lsls	r4, r4, #2
 8001e70:	0020      	movs	r0, r4
 8001e72:	f7fe fa87 	bl	8000384 <HAL_Delay>
 8001e76:	e7fb      	b.n	8001e70 <main+0x26>

08001e78 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001e78:	e7fe      	b.n	8001e78 <_Error_Handler>
	...

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2001      	movs	r0, #1
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e82:	6999      	ldr	r1, [r3, #24]
 8001e84:	4301      	orrs	r1, r0
 8001e86:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	4002      	ands	r2, r0
 8001e90:	9200      	str	r2, [sp, #0]
 8001e92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001e96:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001ea4:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001ea8:	f7fe fc0c 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2002      	movs	r0, #2
 8001eb0:	0011      	movs	r1, r2
 8001eb2:	4240      	negs	r0, r0
 8001eb4:	f7fe fc06 	bl	80006c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2001      	movs	r0, #1
 8001ebc:	0011      	movs	r1, r2
 8001ebe:	4240      	negs	r0, r0
 8001ec0:	f7fe fc00 	bl	80006c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bd07      	pop	{r0, r1, r2, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	40021000 	.word	0x40021000

08001ecc <NMI_Handler>:
 8001ecc:	4770      	bx	lr

08001ece <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler>

08001ed0 <SVC_Handler>:
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ed4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed6:	f7fe fa47 	bl	8000368 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001eda:	f7fe fc56 	bl	800078a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ede:	bd10      	pop	{r4, pc}

08001ee0 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC global interrupt.
*/
void ADC1_IRQHandler(void)
{
 8001ee0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001ee2:	4802      	ldr	r0, [pc, #8]	; (8001eec <ADC1_IRQHandler+0xc>)
 8001ee4:	f7fe fb08 	bl	80004f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20000044 	.word	0x20000044

08001ef0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ef0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ef2:	4802      	ldr	r0, [pc, #8]	; (8001efc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8001ef4:	f7ff f93d 	bl	8001172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001ef8:	bd10      	pop	{r4, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	200000d0 	.word	0x200000d0

08001f00 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8001f00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <USART1_IRQHandler+0xc>)
 8001f04:	f7ff fdcc 	bl	8001aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	20000110 	.word	0x20000110

08001f10 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001f10:	2101      	movs	r1, #1
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4002      	ands	r2, r0
 8001f20:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	480e      	ldr	r0, [pc, #56]	; (8001f60 <SystemInit+0x50>)
 8001f26:	4002      	ands	r2, r0
 8001f28:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <SystemInit+0x54>)
 8001f2e:	4002      	ands	r2, r0
 8001f30:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <SystemInit+0x58>)
 8001f36:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001f38:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001f3a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3e:	4382      	bics	r2, r0
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <SystemInit+0x5c>)
 8001f46:	4002      	ands	r2, r0
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]

}
 8001f54:	4770      	bx	lr
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08ffb80c 	.word	0x08ffb80c
 8001f60:	fef6ffff 	.word	0xfef6ffff
 8001f64:	fffbffff 	.word	0xfffbffff
 8001f68:	ffc0ffff 	.word	0xffc0ffff
 8001f6c:	fffffeec 	.word	0xfffffeec

08001f70 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f70:	b507      	push	{r0, r1, r2, lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_TIM_PWM_MspInit+0x4c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d112      	bne.n	8001fa0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7a:	2080      	movs	r0, #128	; 0x80
 8001f7c:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x50>)
 8001f7e:	0100      	lsls	r0, r0, #4
 8001f80:	6991      	ldr	r1, [r2, #24]
 8001f82:	4301      	orrs	r1, r0
 8001f84:	6191      	str	r1, [r2, #24]
 8001f86:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8a:	4003      	ands	r3, r0
 8001f8c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001f8e:	200d      	movs	r0, #13
 8001f90:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f92:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001f94:	f7fe fb96 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001f98:	200d      	movs	r0, #13
 8001f9a:	f7fe fbc3 	bl	8000724 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f9e:	bd07      	pop	{r0, r1, r2, pc}
  else if(tim_pwmHandle->Instance==TIM3)
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x54>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d1fb      	bne.n	8001f9e <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x50>)
 8001faa:	69d1      	ldr	r1, [r2, #28]
 8001fac:	4301      	orrs	r1, r0
 8001fae:	61d1      	str	r1, [r2, #28]
 8001fb0:	69d3      	ldr	r3, [r2, #28]
 8001fb2:	4003      	ands	r3, r0
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	9b01      	ldr	r3, [sp, #4]
}
 8001fb8:	e7f1      	b.n	8001f9e <HAL_TIM_PWM_MspInit+0x2e>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001fca:	6803      	ldr	r3, [r0, #0]
 8001fcc:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_TIM_MspPostInit+0x48>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_TIM_MspPostInit+0x2a>
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001fd2:	23f0      	movs	r3, #240	; 0xf0
 8001fd4:	011b      	lsls	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001fd8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fe4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	a901      	add	r1, sp, #4
 8001fe8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = LEDHeartbeat_Pin|LEDOrange_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f7fe fbf5 	bl	80007d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fee:	b007      	add	sp, #28
 8001ff0:	bd00      	pop	{pc}
  else if(timHandle->Instance==TIM3)
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_TIM_MspPostInit+0x4c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d1fa      	bne.n	8001fee <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = LEDHeartbeat_Pin|LEDOrange_Pin;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002006:	3301      	adds	r3, #1
 8002008:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	a901      	add	r1, sp, #4
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <HAL_TIM_MspPostInit+0x50>)
 800200e:	e7ec      	b.n	8001fea <HAL_TIM_MspPostInit+0x22>
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40000400 	.word	0x40000400
 8002018:	48000400 	.word	0x48000400

0800201c <MX_TIM1_Init>:
{
 800201c:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <MX_TIM1_Init+0xf8>)
 8002020:	4c3d      	ldr	r4, [pc, #244]	; (8002118 <MX_TIM1_Init+0xfc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002022:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8002024:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 8002026:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002028:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = 1000/2;
 800202a:	32d5      	adds	r2, #213	; 0xd5
{
 800202c:	b090      	sub	sp, #64	; 0x40
  htim1.Init.Period = 1000/2;
 800202e:	32ff      	adds	r2, #255	; 0xff
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002030:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 8002032:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1000/2;
 8002034:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002036:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002038:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800203c:	f7ff f986 	bl	800134c <HAL_TIM_PWM_Init>
 8002040:	2800      	cmp	r0, #0
 8002042:	d003      	beq.n	800204c <MX_TIM1_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8002044:	2142      	movs	r1, #66	; 0x42
 8002046:	4835      	ldr	r0, [pc, #212]	; (800211c <MX_TIM1_Init+0x100>)
 8002048:	f7ff ff16 	bl	8001e78 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204e:	4669      	mov	r1, sp
 8002050:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002052:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002056:	f7ff fa71 	bl	800153c <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	2800      	cmp	r0, #0
 800205c:	d003      	beq.n	8002066 <MX_TIM1_Init+0x4a>
    _Error_Handler(__FILE__, __LINE__);
 800205e:	2149      	movs	r1, #73	; 0x49
 8002060:	482e      	ldr	r0, [pc, #184]	; (800211c <MX_TIM1_Init+0x100>)
 8002062:	f7ff ff09 	bl	8001e78 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002066:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002068:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800206a:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 600;
 800206c:	33f9      	adds	r3, #249	; 0xf9
 800206e:	33ff      	adds	r3, #255	; 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002070:	a902      	add	r1, sp, #8
 8002072:	0020      	movs	r0, r4
  sConfigOC.Pulse = 600;
 8002074:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002076:	9204      	str	r2, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002078:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207a:	9206      	str	r2, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800207c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800207e:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002080:	f7ff f9c0 	bl	8001404 <HAL_TIM_PWM_ConfigChannel>
 8002084:	2800      	cmp	r0, #0
 8002086:	d003      	beq.n	8002090 <MX_TIM1_Init+0x74>
    _Error_Handler(__FILE__, __LINE__);
 8002088:	2155      	movs	r1, #85	; 0x55
 800208a:	4824      	ldr	r0, [pc, #144]	; (800211c <MX_TIM1_Init+0x100>)
 800208c:	f7ff fef4 	bl	8001e78 <_Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002090:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002092:	2204      	movs	r2, #4
 8002094:	a902      	add	r1, sp, #8
 8002096:	0020      	movs	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002098:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800209a:	f7ff f9b3 	bl	8001404 <HAL_TIM_PWM_ConfigChannel>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d003      	beq.n	80020aa <MX_TIM1_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 80020a2:	215b      	movs	r1, #91	; 0x5b
 80020a4:	481d      	ldr	r0, [pc, #116]	; (800211c <MX_TIM1_Init+0x100>)
 80020a6:	f7ff fee7 	bl	8001e78 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80020aa:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ac:	2208      	movs	r2, #8
 80020ae:	a902      	add	r1, sp, #8
 80020b0:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0;
 80020b2:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020b6:	f7ff f9a5 	bl	8001404 <HAL_TIM_PWM_ConfigChannel>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d003      	beq.n	80020c6 <MX_TIM1_Init+0xaa>
    _Error_Handler(__FILE__, __LINE__);
 80020be:	2162      	movs	r1, #98	; 0x62
 80020c0:	4816      	ldr	r0, [pc, #88]	; (800211c <MX_TIM1_Init+0x100>)
 80020c2:	f7ff fed9 	bl	8001e78 <_Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80020c6:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020c8:	220c      	movs	r2, #12
 80020ca:	a902      	add	r1, sp, #8
 80020cc:	0020      	movs	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80020ce:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020d0:	f7ff f998 	bl	8001404 <HAL_TIM_PWM_ConfigChannel>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d003      	beq.n	80020e0 <MX_TIM1_Init+0xc4>
    _Error_Handler(__FILE__, __LINE__);
 80020d8:	2168      	movs	r1, #104	; 0x68
 80020da:	4810      	ldr	r0, [pc, #64]	; (800211c <MX_TIM1_Init+0x100>)
 80020dc:	f7ff fecc 	bl	8001e78 <_Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e0:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e2:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e4:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020e6:	a909      	add	r1, sp, #36	; 0x24
 80020e8:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ea:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ec:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ee:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 80020f0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020f2:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020f4:	920e      	str	r2, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020f6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020f8:	f7ff fa42 	bl	8001580 <HAL_TIMEx_ConfigBreakDeadTime>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d003      	beq.n	8002108 <MX_TIM1_Init+0xec>
    _Error_Handler(__FILE__, __LINE__);
 8002100:	2174      	movs	r1, #116	; 0x74
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <MX_TIM1_Init+0x100>)
 8002104:	f7ff feb8 	bl	8001e78 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002108:	0020      	movs	r0, r4
 800210a:	f7ff ff5d 	bl	8001fc8 <HAL_TIM_MspPostInit>
}
 800210e:	b010      	add	sp, #64	; 0x40
 8002110:	bd10      	pop	{r4, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40012c00 	.word	0x40012c00
 8002118:	200000d0 	.word	0x200000d0
 800211c:	0800236d 	.word	0x0800236d

08002120 <MX_TIM3_Init>:
  htim3.Init.Period = 2400;
 8002120:	2296      	movs	r2, #150	; 0x96
{
 8002122:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <MX_TIM3_Init+0x90>)
 8002126:	4c23      	ldr	r4, [pc, #140]	; (80021b4 <MX_TIM3_Init+0x94>)
  htim3.Init.Period = 2400;
 8002128:	0112      	lsls	r2, r2, #4
  htim3.Instance = TIM3;
 800212a:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 10000;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <MX_TIM3_Init+0x98>)
  htim3.Init.Period = 2400;
 800212e:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002130:	2280      	movs	r2, #128	; 0x80
  htim3.Init.Prescaler = 10000;
 8002132:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	2300      	movs	r3, #0
{
 8002136:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002138:	0092      	lsls	r2, r2, #2
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800213a:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800213e:	6122      	str	r2, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002142:	f7ff f903 	bl	800134c <HAL_TIM_PWM_Init>
 8002146:	2800      	cmp	r0, #0
 8002148:	d003      	beq.n	8002152 <MX_TIM3_Init+0x32>
    _Error_Handler(__FILE__, __LINE__);
 800214a:	2188      	movs	r1, #136	; 0x88
 800214c:	481b      	ldr	r0, [pc, #108]	; (80021bc <MX_TIM3_Init+0x9c>)
 800214e:	f7ff fe93 	bl	8001e78 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002152:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002154:	a901      	add	r1, sp, #4
 8002156:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800215c:	f7ff f9ee 	bl	800153c <HAL_TIMEx_MasterConfigSynchronization>
 8002160:	2800      	cmp	r0, #0
 8002162:	d003      	beq.n	800216c <MX_TIM3_Init+0x4c>
    _Error_Handler(__FILE__, __LINE__);
 8002164:	218f      	movs	r1, #143	; 0x8f
 8002166:	4815      	ldr	r0, [pc, #84]	; (80021bc <MX_TIM3_Init+0x9c>)
 8002168:	f7ff fe86 	bl	8001e78 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216c:	2360      	movs	r3, #96	; 0x60
 800216e:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8002170:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002172:	2208      	movs	r2, #8
 8002174:	a903      	add	r1, sp, #12
 8002176:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0;
 8002178:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217a:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800217e:	f7ff f941 	bl	8001404 <HAL_TIM_PWM_ConfigChannel>
 8002182:	2800      	cmp	r0, #0
 8002184:	d003      	beq.n	800218e <MX_TIM3_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 8002186:	2198      	movs	r1, #152	; 0x98
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <MX_TIM3_Init+0x9c>)
 800218a:	f7ff fe75 	bl	8001e78 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800218e:	220c      	movs	r2, #12
 8002190:	a903      	add	r1, sp, #12
 8002192:	0020      	movs	r0, r4
 8002194:	f7ff f936 	bl	8001404 <HAL_TIM_PWM_ConfigChannel>
 8002198:	2800      	cmp	r0, #0
 800219a:	d003      	beq.n	80021a4 <MX_TIM3_Init+0x84>
    _Error_Handler(__FILE__, __LINE__);
 800219c:	219d      	movs	r1, #157	; 0x9d
 800219e:	4807      	ldr	r0, [pc, #28]	; (80021bc <MX_TIM3_Init+0x9c>)
 80021a0:	f7ff fe6a 	bl	8001e78 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80021a4:	0020      	movs	r0, r4
 80021a6:	f7ff ff0f 	bl	8001fc8 <HAL_TIM_MspPostInit>
}
 80021aa:	b00a      	add	sp, #40	; 0x28
 80021ac:	bd10      	pop	{r4, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40000400 	.word	0x40000400
 80021b4:	20000090 	.word	0x20000090
 80021b8:	00002710 	.word	0x00002710
 80021bc:	0800236d 	.word	0x0800236d

080021c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_USART1_UART_Init+0x34>)
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <MX_USART1_UART_Init+0x38>)
{
 80021c4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80021c6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80021c8:	23e1      	movs	r3, #225	; 0xe1
 80021ca:	025b      	lsls	r3, r3, #9
 80021cc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ce:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021d8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021de:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e2:	f7ff fba3 	bl	800192c <HAL_UART_Init>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d003      	beq.n	80021f2 <MX_USART1_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80021ea:	2144      	movs	r1, #68	; 0x44
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <MX_USART1_UART_Init+0x3c>)
 80021ee:	f7ff fe43 	bl	8001e78 <_Error_Handler>
  }

}
 80021f2:	bd10      	pop	{r4, pc}
 80021f4:	20000110 	.word	0x20000110
 80021f8:	40013800 	.word	0x40013800
 80021fc:	0800237a 	.word	0x0800237a

08002200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002200:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_UART_MspInit+0x50>)
 8002204:	6802      	ldr	r2, [r0, #0]
{
 8002206:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART1)
 8002208:	429a      	cmp	r2, r3
 800220a:	d11e      	bne.n	800224a <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_UART_MspInit+0x54>)
 8002210:	01c0      	lsls	r0, r0, #7
 8002212:	6991      	ldr	r1, [r2, #24]
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002216:	4301      	orrs	r1, r0
 8002218:	6191      	str	r1, [r2, #24]
 800221a:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800221e:	4003      	ands	r3, r0
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	3bbe      	subs	r3, #190	; 0xbe
 800222a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <HAL_UART_MspInit+0x58>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	3301      	adds	r3, #1
 8002230:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002234:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f7fe facf 	bl	80007d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800223a:	201b      	movs	r0, #27
 800223c:	0022      	movs	r2, r4
 800223e:	0021      	movs	r1, r4
 8002240:	f7fe fa40 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002244:	201b      	movs	r0, #27
 8002246:	f7fe fa6d 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800224a:	b006      	add	sp, #24
 800224c:	bd10      	pop	{r4, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	40013800 	.word	0x40013800
 8002254:	40021000 	.word	0x40021000
 8002258:	48000400 	.word	0x48000400

0800225c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002262:	490e      	ldr	r1, [pc, #56]	; (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <LoopForever+0xe>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002278:	4c0b      	ldr	r4, [pc, #44]	; (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002286:	f7ff fe43 	bl	8001f10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800228a:	f000 f811 	bl	80022b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7ff fddc 	bl	8001e4a <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   r0, =_estack
 8002294:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022a0:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 80022a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022a8:	20000180 	.word	0x20000180

080022ac <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <DMA1_Channel1_IRQHandler>
	...

080022b0 <__libc_init_array>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	2600      	movs	r6, #0
 80022b4:	4d0c      	ldr	r5, [pc, #48]	; (80022e8 <__libc_init_array+0x38>)
 80022b6:	4c0d      	ldr	r4, [pc, #52]	; (80022ec <__libc_init_array+0x3c>)
 80022b8:	1b64      	subs	r4, r4, r5
 80022ba:	10a4      	asrs	r4, r4, #2
 80022bc:	42a6      	cmp	r6, r4
 80022be:	d109      	bne.n	80022d4 <__libc_init_array+0x24>
 80022c0:	2600      	movs	r6, #0
 80022c2:	f000 f823 	bl	800230c <_init>
 80022c6:	4d0a      	ldr	r5, [pc, #40]	; (80022f0 <__libc_init_array+0x40>)
 80022c8:	4c0a      	ldr	r4, [pc, #40]	; (80022f4 <__libc_init_array+0x44>)
 80022ca:	1b64      	subs	r4, r4, r5
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	42a6      	cmp	r6, r4
 80022d0:	d105      	bne.n	80022de <__libc_init_array+0x2e>
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	00b3      	lsls	r3, r6, #2
 80022d6:	58eb      	ldr	r3, [r5, r3]
 80022d8:	4798      	blx	r3
 80022da:	3601      	adds	r6, #1
 80022dc:	e7ee      	b.n	80022bc <__libc_init_array+0xc>
 80022de:	00b3      	lsls	r3, r6, #2
 80022e0:	58eb      	ldr	r3, [r5, r3]
 80022e2:	4798      	blx	r3
 80022e4:	3601      	adds	r6, #1
 80022e6:	e7f2      	b.n	80022ce <__libc_init_array+0x1e>
 80022e8:	0800238c 	.word	0x0800238c
 80022ec:	0800238c 	.word	0x0800238c
 80022f0:	0800238c 	.word	0x0800238c
 80022f4:	08002390 	.word	0x08002390

080022f8 <memcpy>:
 80022f8:	2300      	movs	r3, #0
 80022fa:	b510      	push	{r4, lr}
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d100      	bne.n	8002302 <memcpy+0xa>
 8002300:	bd10      	pop	{r4, pc}
 8002302:	5ccc      	ldrb	r4, [r1, r3]
 8002304:	54c4      	strb	r4, [r0, r3]
 8002306:	3301      	adds	r3, #1
 8002308:	e7f8      	b.n	80022fc <memcpy+0x4>
	...

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
