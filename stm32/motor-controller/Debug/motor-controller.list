
motor-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  20000010  08003cb8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001bc  08003cb8  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b5ab  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000399c  00000000  00000000  0003b5e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b50  00000000  00000000  0003ef80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fb8  00000000  00000000  0003fad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007577  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c68  00000000  00000000  00047fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004bc67  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000235c  00000000  00000000  0004bce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00008158  00000000  00000000  0004e040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b60 	.word	0x08003b60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003b60 	.word	0x08003b60

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cdrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	1c10      	adds	r0, r2, #0
 800024c:	4662      	mov	r2, ip
 800024e:	468c      	mov	ip, r1
 8000250:	1c19      	adds	r1, r3, #0
 8000252:	4663      	mov	r3, ip
 8000254:	e000      	b.n	8000258 <__aeabi_cdcmpeq>
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_cdcmpeq>:
 8000258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800025a:	f001 f997 	bl	800158c <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	d401      	bmi.n	8000266 <__aeabi_cdcmpeq+0xe>
 8000262:	2100      	movs	r1, #0
 8000264:	42c8      	cmn	r0, r1
 8000266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000268 <__aeabi_dcmpeq>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f001 f8f1 	bl	8001450 <__eqdf2>
 800026e:	4240      	negs	r0, r0
 8000270:	3001      	adds	r0, #1
 8000272:	bd10      	pop	{r4, pc}

08000274 <__aeabi_dcmplt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f989 	bl	800158c <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	db01      	blt.n	8000282 <__aeabi_dcmplt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmple>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f97f 	bl	800158c <__ledf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dd01      	ble.n	8000296 <__aeabi_dcmple+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpgt>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 f911 	bl	80014c4 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dc01      	bgt.n	80002aa <__aeabi_dcmpgt+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_dcmpge>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	f001 f907 	bl	80014c4 <__gedf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	da01      	bge.n	80002be <__aeabi_dcmpge+0xe>
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <__aeabi_fadd>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	46c6      	mov	lr, r8
 80002c8:	024e      	lsls	r6, r1, #9
 80002ca:	0247      	lsls	r7, r0, #9
 80002cc:	0a76      	lsrs	r6, r6, #9
 80002ce:	0a7b      	lsrs	r3, r7, #9
 80002d0:	0044      	lsls	r4, r0, #1
 80002d2:	0fc5      	lsrs	r5, r0, #31
 80002d4:	00f7      	lsls	r7, r6, #3
 80002d6:	0048      	lsls	r0, r1, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	b500      	push	{lr}
 80002dc:	0e24      	lsrs	r4, r4, #24
 80002de:	002a      	movs	r2, r5
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	0e00      	lsrs	r0, r0, #24
 80002e4:	0fc9      	lsrs	r1, r1, #31
 80002e6:	46bc      	mov	ip, r7
 80002e8:	428d      	cmp	r5, r1
 80002ea:	d067      	beq.n	80003bc <__aeabi_fadd+0xf8>
 80002ec:	1a22      	subs	r2, r4, r0
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	dc00      	bgt.n	80002f4 <__aeabi_fadd+0x30>
 80002f2:	e0a5      	b.n	8000440 <__aeabi_fadd+0x17c>
 80002f4:	2800      	cmp	r0, #0
 80002f6:	d13a      	bne.n	800036e <__aeabi_fadd+0xaa>
 80002f8:	2f00      	cmp	r7, #0
 80002fa:	d100      	bne.n	80002fe <__aeabi_fadd+0x3a>
 80002fc:	e093      	b.n	8000426 <__aeabi_fadd+0x162>
 80002fe:	1e51      	subs	r1, r2, #1
 8000300:	2900      	cmp	r1, #0
 8000302:	d000      	beq.n	8000306 <__aeabi_fadd+0x42>
 8000304:	e0bc      	b.n	8000480 <__aeabi_fadd+0x1bc>
 8000306:	2401      	movs	r4, #1
 8000308:	1bdb      	subs	r3, r3, r7
 800030a:	015a      	lsls	r2, r3, #5
 800030c:	d546      	bpl.n	800039c <__aeabi_fadd+0xd8>
 800030e:	019b      	lsls	r3, r3, #6
 8000310:	099e      	lsrs	r6, r3, #6
 8000312:	0030      	movs	r0, r6
 8000314:	f001 faba 	bl	800188c <__clzsi2>
 8000318:	3805      	subs	r0, #5
 800031a:	4086      	lsls	r6, r0
 800031c:	4284      	cmp	r4, r0
 800031e:	dd00      	ble.n	8000322 <__aeabi_fadd+0x5e>
 8000320:	e09d      	b.n	800045e <__aeabi_fadd+0x19a>
 8000322:	1b04      	subs	r4, r0, r4
 8000324:	0032      	movs	r2, r6
 8000326:	2020      	movs	r0, #32
 8000328:	3401      	adds	r4, #1
 800032a:	40e2      	lsrs	r2, r4
 800032c:	1b04      	subs	r4, r0, r4
 800032e:	40a6      	lsls	r6, r4
 8000330:	0033      	movs	r3, r6
 8000332:	1e5e      	subs	r6, r3, #1
 8000334:	41b3      	sbcs	r3, r6
 8000336:	2400      	movs	r4, #0
 8000338:	4313      	orrs	r3, r2
 800033a:	075a      	lsls	r2, r3, #29
 800033c:	d004      	beq.n	8000348 <__aeabi_fadd+0x84>
 800033e:	220f      	movs	r2, #15
 8000340:	401a      	ands	r2, r3
 8000342:	2a04      	cmp	r2, #4
 8000344:	d000      	beq.n	8000348 <__aeabi_fadd+0x84>
 8000346:	3304      	adds	r3, #4
 8000348:	015a      	lsls	r2, r3, #5
 800034a:	d529      	bpl.n	80003a0 <__aeabi_fadd+0xdc>
 800034c:	3401      	adds	r4, #1
 800034e:	2cff      	cmp	r4, #255	; 0xff
 8000350:	d100      	bne.n	8000354 <__aeabi_fadd+0x90>
 8000352:	e081      	b.n	8000458 <__aeabi_fadd+0x194>
 8000354:	002a      	movs	r2, r5
 8000356:	019b      	lsls	r3, r3, #6
 8000358:	0a5b      	lsrs	r3, r3, #9
 800035a:	b2e4      	uxtb	r4, r4
 800035c:	025b      	lsls	r3, r3, #9
 800035e:	05e4      	lsls	r4, r4, #23
 8000360:	0a58      	lsrs	r0, r3, #9
 8000362:	07d2      	lsls	r2, r2, #31
 8000364:	4320      	orrs	r0, r4
 8000366:	4310      	orrs	r0, r2
 8000368:	bc04      	pop	{r2}
 800036a:	4690      	mov	r8, r2
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	2cff      	cmp	r4, #255	; 0xff
 8000370:	d0e3      	beq.n	800033a <__aeabi_fadd+0x76>
 8000372:	2180      	movs	r1, #128	; 0x80
 8000374:	0038      	movs	r0, r7
 8000376:	04c9      	lsls	r1, r1, #19
 8000378:	4308      	orrs	r0, r1
 800037a:	4684      	mov	ip, r0
 800037c:	2a1b      	cmp	r2, #27
 800037e:	dd00      	ble.n	8000382 <__aeabi_fadd+0xbe>
 8000380:	e082      	b.n	8000488 <__aeabi_fadd+0x1c4>
 8000382:	2020      	movs	r0, #32
 8000384:	4661      	mov	r1, ip
 8000386:	40d1      	lsrs	r1, r2
 8000388:	1a82      	subs	r2, r0, r2
 800038a:	4660      	mov	r0, ip
 800038c:	4090      	lsls	r0, r2
 800038e:	0002      	movs	r2, r0
 8000390:	1e50      	subs	r0, r2, #1
 8000392:	4182      	sbcs	r2, r0
 8000394:	430a      	orrs	r2, r1
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	015a      	lsls	r2, r3, #5
 800039a:	d4b8      	bmi.n	800030e <__aeabi_fadd+0x4a>
 800039c:	075a      	lsls	r2, r3, #29
 800039e:	d1ce      	bne.n	800033e <__aeabi_fadd+0x7a>
 80003a0:	08de      	lsrs	r6, r3, #3
 80003a2:	002a      	movs	r2, r5
 80003a4:	2cff      	cmp	r4, #255	; 0xff
 80003a6:	d13a      	bne.n	800041e <__aeabi_fadd+0x15a>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d100      	bne.n	80003ae <__aeabi_fadd+0xea>
 80003ac:	e0ae      	b.n	800050c <__aeabi_fadd+0x248>
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	03db      	lsls	r3, r3, #15
 80003b2:	4333      	orrs	r3, r6
 80003b4:	025b      	lsls	r3, r3, #9
 80003b6:	0a5b      	lsrs	r3, r3, #9
 80003b8:	24ff      	movs	r4, #255	; 0xff
 80003ba:	e7cf      	b.n	800035c <__aeabi_fadd+0x98>
 80003bc:	1a21      	subs	r1, r4, r0
 80003be:	2900      	cmp	r1, #0
 80003c0:	dd52      	ble.n	8000468 <__aeabi_fadd+0x1a4>
 80003c2:	2800      	cmp	r0, #0
 80003c4:	d031      	beq.n	800042a <__aeabi_fadd+0x166>
 80003c6:	2cff      	cmp	r4, #255	; 0xff
 80003c8:	d0b7      	beq.n	800033a <__aeabi_fadd+0x76>
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	003e      	movs	r6, r7
 80003ce:	04c0      	lsls	r0, r0, #19
 80003d0:	4306      	orrs	r6, r0
 80003d2:	46b4      	mov	ip, r6
 80003d4:	291b      	cmp	r1, #27
 80003d6:	dd00      	ble.n	80003da <__aeabi_fadd+0x116>
 80003d8:	e0aa      	b.n	8000530 <__aeabi_fadd+0x26c>
 80003da:	2620      	movs	r6, #32
 80003dc:	4660      	mov	r0, ip
 80003de:	40c8      	lsrs	r0, r1
 80003e0:	1a71      	subs	r1, r6, r1
 80003e2:	4666      	mov	r6, ip
 80003e4:	408e      	lsls	r6, r1
 80003e6:	0031      	movs	r1, r6
 80003e8:	1e4e      	subs	r6, r1, #1
 80003ea:	41b1      	sbcs	r1, r6
 80003ec:	4301      	orrs	r1, r0
 80003ee:	185b      	adds	r3, r3, r1
 80003f0:	0159      	lsls	r1, r3, #5
 80003f2:	d5d3      	bpl.n	800039c <__aeabi_fadd+0xd8>
 80003f4:	3401      	adds	r4, #1
 80003f6:	2cff      	cmp	r4, #255	; 0xff
 80003f8:	d100      	bne.n	80003fc <__aeabi_fadd+0x138>
 80003fa:	e087      	b.n	800050c <__aeabi_fadd+0x248>
 80003fc:	2201      	movs	r2, #1
 80003fe:	4978      	ldr	r1, [pc, #480]	; (80005e0 <__aeabi_fadd+0x31c>)
 8000400:	401a      	ands	r2, r3
 8000402:	085b      	lsrs	r3, r3, #1
 8000404:	400b      	ands	r3, r1
 8000406:	4313      	orrs	r3, r2
 8000408:	e797      	b.n	800033a <__aeabi_fadd+0x76>
 800040a:	2c00      	cmp	r4, #0
 800040c:	d000      	beq.n	8000410 <__aeabi_fadd+0x14c>
 800040e:	e0a7      	b.n	8000560 <__aeabi_fadd+0x29c>
 8000410:	2b00      	cmp	r3, #0
 8000412:	d000      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000414:	e0b6      	b.n	8000584 <__aeabi_fadd+0x2c0>
 8000416:	1e3b      	subs	r3, r7, #0
 8000418:	d162      	bne.n	80004e0 <__aeabi_fadd+0x21c>
 800041a:	2600      	movs	r6, #0
 800041c:	2200      	movs	r2, #0
 800041e:	0273      	lsls	r3, r6, #9
 8000420:	0a5b      	lsrs	r3, r3, #9
 8000422:	b2e4      	uxtb	r4, r4
 8000424:	e79a      	b.n	800035c <__aeabi_fadd+0x98>
 8000426:	0014      	movs	r4, r2
 8000428:	e787      	b.n	800033a <__aeabi_fadd+0x76>
 800042a:	2f00      	cmp	r7, #0
 800042c:	d04d      	beq.n	80004ca <__aeabi_fadd+0x206>
 800042e:	1e48      	subs	r0, r1, #1
 8000430:	2800      	cmp	r0, #0
 8000432:	d157      	bne.n	80004e4 <__aeabi_fadd+0x220>
 8000434:	4463      	add	r3, ip
 8000436:	2401      	movs	r4, #1
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	d5af      	bpl.n	800039c <__aeabi_fadd+0xd8>
 800043c:	2402      	movs	r4, #2
 800043e:	e7dd      	b.n	80003fc <__aeabi_fadd+0x138>
 8000440:	2a00      	cmp	r2, #0
 8000442:	d124      	bne.n	800048e <__aeabi_fadd+0x1ca>
 8000444:	1c62      	adds	r2, r4, #1
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	2a01      	cmp	r2, #1
 800044a:	ddde      	ble.n	800040a <__aeabi_fadd+0x146>
 800044c:	1bde      	subs	r6, r3, r7
 800044e:	0172      	lsls	r2, r6, #5
 8000450:	d535      	bpl.n	80004be <__aeabi_fadd+0x1fa>
 8000452:	1afe      	subs	r6, r7, r3
 8000454:	000d      	movs	r5, r1
 8000456:	e75c      	b.n	8000312 <__aeabi_fadd+0x4e>
 8000458:	002a      	movs	r2, r5
 800045a:	2300      	movs	r3, #0
 800045c:	e77e      	b.n	800035c <__aeabi_fadd+0x98>
 800045e:	0033      	movs	r3, r6
 8000460:	4a60      	ldr	r2, [pc, #384]	; (80005e4 <__aeabi_fadd+0x320>)
 8000462:	1a24      	subs	r4, r4, r0
 8000464:	4013      	ands	r3, r2
 8000466:	e768      	b.n	800033a <__aeabi_fadd+0x76>
 8000468:	2900      	cmp	r1, #0
 800046a:	d163      	bne.n	8000534 <__aeabi_fadd+0x270>
 800046c:	1c61      	adds	r1, r4, #1
 800046e:	b2c8      	uxtb	r0, r1
 8000470:	2801      	cmp	r0, #1
 8000472:	dd4e      	ble.n	8000512 <__aeabi_fadd+0x24e>
 8000474:	29ff      	cmp	r1, #255	; 0xff
 8000476:	d049      	beq.n	800050c <__aeabi_fadd+0x248>
 8000478:	4463      	add	r3, ip
 800047a:	085b      	lsrs	r3, r3, #1
 800047c:	000c      	movs	r4, r1
 800047e:	e75c      	b.n	800033a <__aeabi_fadd+0x76>
 8000480:	2aff      	cmp	r2, #255	; 0xff
 8000482:	d041      	beq.n	8000508 <__aeabi_fadd+0x244>
 8000484:	000a      	movs	r2, r1
 8000486:	e779      	b.n	800037c <__aeabi_fadd+0xb8>
 8000488:	2201      	movs	r2, #1
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	e784      	b.n	8000398 <__aeabi_fadd+0xd4>
 800048e:	2c00      	cmp	r4, #0
 8000490:	d01d      	beq.n	80004ce <__aeabi_fadd+0x20a>
 8000492:	28ff      	cmp	r0, #255	; 0xff
 8000494:	d022      	beq.n	80004dc <__aeabi_fadd+0x218>
 8000496:	2480      	movs	r4, #128	; 0x80
 8000498:	04e4      	lsls	r4, r4, #19
 800049a:	4252      	negs	r2, r2
 800049c:	4323      	orrs	r3, r4
 800049e:	2a1b      	cmp	r2, #27
 80004a0:	dd00      	ble.n	80004a4 <__aeabi_fadd+0x1e0>
 80004a2:	e08a      	b.n	80005ba <__aeabi_fadd+0x2f6>
 80004a4:	001c      	movs	r4, r3
 80004a6:	2520      	movs	r5, #32
 80004a8:	40d4      	lsrs	r4, r2
 80004aa:	1aaa      	subs	r2, r5, r2
 80004ac:	4093      	lsls	r3, r2
 80004ae:	1e5a      	subs	r2, r3, #1
 80004b0:	4193      	sbcs	r3, r2
 80004b2:	4323      	orrs	r3, r4
 80004b4:	4662      	mov	r2, ip
 80004b6:	0004      	movs	r4, r0
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	000d      	movs	r5, r1
 80004bc:	e725      	b.n	800030a <__aeabi_fadd+0x46>
 80004be:	2e00      	cmp	r6, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e726      	b.n	8000312 <__aeabi_fadd+0x4e>
 80004c4:	2200      	movs	r2, #0
 80004c6:	2400      	movs	r4, #0
 80004c8:	e7a9      	b.n	800041e <__aeabi_fadd+0x15a>
 80004ca:	000c      	movs	r4, r1
 80004cc:	e735      	b.n	800033a <__aeabi_fadd+0x76>
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d04d      	beq.n	800056e <__aeabi_fadd+0x2aa>
 80004d2:	43d2      	mvns	r2, r2
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d0ed      	beq.n	80004b4 <__aeabi_fadd+0x1f0>
 80004d8:	28ff      	cmp	r0, #255	; 0xff
 80004da:	d1e0      	bne.n	800049e <__aeabi_fadd+0x1da>
 80004dc:	4663      	mov	r3, ip
 80004de:	24ff      	movs	r4, #255	; 0xff
 80004e0:	000d      	movs	r5, r1
 80004e2:	e72a      	b.n	800033a <__aeabi_fadd+0x76>
 80004e4:	29ff      	cmp	r1, #255	; 0xff
 80004e6:	d00f      	beq.n	8000508 <__aeabi_fadd+0x244>
 80004e8:	0001      	movs	r1, r0
 80004ea:	e773      	b.n	80003d4 <__aeabi_fadd+0x110>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d061      	beq.n	80005b4 <__aeabi_fadd+0x2f0>
 80004f0:	24ff      	movs	r4, #255	; 0xff
 80004f2:	2f00      	cmp	r7, #0
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fadd+0x234>
 80004f6:	e720      	b.n	800033a <__aeabi_fadd+0x76>
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	4641      	mov	r1, r8
 80004fc:	03d2      	lsls	r2, r2, #15
 80004fe:	4211      	tst	r1, r2
 8000500:	d002      	beq.n	8000508 <__aeabi_fadd+0x244>
 8000502:	4216      	tst	r6, r2
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x244>
 8000506:	003b      	movs	r3, r7
 8000508:	24ff      	movs	r4, #255	; 0xff
 800050a:	e716      	b.n	800033a <__aeabi_fadd+0x76>
 800050c:	24ff      	movs	r4, #255	; 0xff
 800050e:	2300      	movs	r3, #0
 8000510:	e724      	b.n	800035c <__aeabi_fadd+0x98>
 8000512:	2c00      	cmp	r4, #0
 8000514:	d1ea      	bne.n	80004ec <__aeabi_fadd+0x228>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d058      	beq.n	80005cc <__aeabi_fadd+0x308>
 800051a:	2f00      	cmp	r7, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x25c>
 800051e:	e70c      	b.n	800033a <__aeabi_fadd+0x76>
 8000520:	4463      	add	r3, ip
 8000522:	015a      	lsls	r2, r3, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0x264>
 8000526:	e739      	b.n	800039c <__aeabi_fadd+0xd8>
 8000528:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <__aeabi_fadd+0x320>)
 800052a:	000c      	movs	r4, r1
 800052c:	4013      	ands	r3, r2
 800052e:	e704      	b.n	800033a <__aeabi_fadd+0x76>
 8000530:	2101      	movs	r1, #1
 8000532:	e75c      	b.n	80003ee <__aeabi_fadd+0x12a>
 8000534:	2c00      	cmp	r4, #0
 8000536:	d11e      	bne.n	8000576 <__aeabi_fadd+0x2b2>
 8000538:	2b00      	cmp	r3, #0
 800053a:	d040      	beq.n	80005be <__aeabi_fadd+0x2fa>
 800053c:	43c9      	mvns	r1, r1
 800053e:	2900      	cmp	r1, #0
 8000540:	d00b      	beq.n	800055a <__aeabi_fadd+0x296>
 8000542:	28ff      	cmp	r0, #255	; 0xff
 8000544:	d036      	beq.n	80005b4 <__aeabi_fadd+0x2f0>
 8000546:	291b      	cmp	r1, #27
 8000548:	dc47      	bgt.n	80005da <__aeabi_fadd+0x316>
 800054a:	001c      	movs	r4, r3
 800054c:	2620      	movs	r6, #32
 800054e:	40cc      	lsrs	r4, r1
 8000550:	1a71      	subs	r1, r6, r1
 8000552:	408b      	lsls	r3, r1
 8000554:	1e59      	subs	r1, r3, #1
 8000556:	418b      	sbcs	r3, r1
 8000558:	4323      	orrs	r3, r4
 800055a:	4463      	add	r3, ip
 800055c:	0004      	movs	r4, r0
 800055e:	e747      	b.n	80003f0 <__aeabi_fadd+0x12c>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d118      	bne.n	8000596 <__aeabi_fadd+0x2d2>
 8000564:	1e3b      	subs	r3, r7, #0
 8000566:	d02d      	beq.n	80005c4 <__aeabi_fadd+0x300>
 8000568:	000d      	movs	r5, r1
 800056a:	24ff      	movs	r4, #255	; 0xff
 800056c:	e6e5      	b.n	800033a <__aeabi_fadd+0x76>
 800056e:	003b      	movs	r3, r7
 8000570:	0004      	movs	r4, r0
 8000572:	000d      	movs	r5, r1
 8000574:	e6e1      	b.n	800033a <__aeabi_fadd+0x76>
 8000576:	28ff      	cmp	r0, #255	; 0xff
 8000578:	d01c      	beq.n	80005b4 <__aeabi_fadd+0x2f0>
 800057a:	2480      	movs	r4, #128	; 0x80
 800057c:	04e4      	lsls	r4, r4, #19
 800057e:	4249      	negs	r1, r1
 8000580:	4323      	orrs	r3, r4
 8000582:	e7e0      	b.n	8000546 <__aeabi_fadd+0x282>
 8000584:	2f00      	cmp	r7, #0
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x2c6>
 8000588:	e6d7      	b.n	800033a <__aeabi_fadd+0x76>
 800058a:	1bde      	subs	r6, r3, r7
 800058c:	0172      	lsls	r2, r6, #5
 800058e:	d51f      	bpl.n	80005d0 <__aeabi_fadd+0x30c>
 8000590:	1afb      	subs	r3, r7, r3
 8000592:	000d      	movs	r5, r1
 8000594:	e6d1      	b.n	800033a <__aeabi_fadd+0x76>
 8000596:	24ff      	movs	r4, #255	; 0xff
 8000598:	2f00      	cmp	r7, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x2da>
 800059c:	e6cd      	b.n	800033a <__aeabi_fadd+0x76>
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	4640      	mov	r0, r8
 80005a2:	03d2      	lsls	r2, r2, #15
 80005a4:	4210      	tst	r0, r2
 80005a6:	d0af      	beq.n	8000508 <__aeabi_fadd+0x244>
 80005a8:	4216      	tst	r6, r2
 80005aa:	d1ad      	bne.n	8000508 <__aeabi_fadd+0x244>
 80005ac:	003b      	movs	r3, r7
 80005ae:	000d      	movs	r5, r1
 80005b0:	24ff      	movs	r4, #255	; 0xff
 80005b2:	e6c2      	b.n	800033a <__aeabi_fadd+0x76>
 80005b4:	4663      	mov	r3, ip
 80005b6:	24ff      	movs	r4, #255	; 0xff
 80005b8:	e6bf      	b.n	800033a <__aeabi_fadd+0x76>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e77a      	b.n	80004b4 <__aeabi_fadd+0x1f0>
 80005be:	003b      	movs	r3, r7
 80005c0:	0004      	movs	r4, r0
 80005c2:	e6ba      	b.n	800033a <__aeabi_fadd+0x76>
 80005c4:	2680      	movs	r6, #128	; 0x80
 80005c6:	2200      	movs	r2, #0
 80005c8:	03f6      	lsls	r6, r6, #15
 80005ca:	e6f0      	b.n	80003ae <__aeabi_fadd+0xea>
 80005cc:	003b      	movs	r3, r7
 80005ce:	e6b4      	b.n	800033a <__aeabi_fadd+0x76>
 80005d0:	1e33      	subs	r3, r6, #0
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0x312>
 80005d4:	e6e2      	b.n	800039c <__aeabi_fadd+0xd8>
 80005d6:	2200      	movs	r2, #0
 80005d8:	e721      	b.n	800041e <__aeabi_fadd+0x15a>
 80005da:	2301      	movs	r3, #1
 80005dc:	e7bd      	b.n	800055a <__aeabi_fadd+0x296>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	7dffffff 	.word	0x7dffffff
 80005e4:	fbffffff 	.word	0xfbffffff

080005e8 <__aeabi_fdiv>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	4657      	mov	r7, sl
 80005ec:	464e      	mov	r6, r9
 80005ee:	46de      	mov	lr, fp
 80005f0:	4645      	mov	r5, r8
 80005f2:	b5e0      	push	{r5, r6, r7, lr}
 80005f4:	0244      	lsls	r4, r0, #9
 80005f6:	0043      	lsls	r3, r0, #1
 80005f8:	0fc6      	lsrs	r6, r0, #31
 80005fa:	b083      	sub	sp, #12
 80005fc:	1c0f      	adds	r7, r1, #0
 80005fe:	0a64      	lsrs	r4, r4, #9
 8000600:	0e1b      	lsrs	r3, r3, #24
 8000602:	46b2      	mov	sl, r6
 8000604:	d053      	beq.n	80006ae <__aeabi_fdiv+0xc6>
 8000606:	2bff      	cmp	r3, #255	; 0xff
 8000608:	d027      	beq.n	800065a <__aeabi_fdiv+0x72>
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	00e4      	lsls	r4, r4, #3
 800060e:	04d2      	lsls	r2, r2, #19
 8000610:	4314      	orrs	r4, r2
 8000612:	227f      	movs	r2, #127	; 0x7f
 8000614:	4252      	negs	r2, r2
 8000616:	4690      	mov	r8, r2
 8000618:	4498      	add	r8, r3
 800061a:	2300      	movs	r3, #0
 800061c:	4699      	mov	r9, r3
 800061e:	469b      	mov	fp, r3
 8000620:	027d      	lsls	r5, r7, #9
 8000622:	0078      	lsls	r0, r7, #1
 8000624:	0ffb      	lsrs	r3, r7, #31
 8000626:	0a6d      	lsrs	r5, r5, #9
 8000628:	0e00      	lsrs	r0, r0, #24
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	d024      	beq.n	8000678 <__aeabi_fdiv+0x90>
 800062e:	28ff      	cmp	r0, #255	; 0xff
 8000630:	d046      	beq.n	80006c0 <__aeabi_fdiv+0xd8>
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	2100      	movs	r1, #0
 8000636:	00ed      	lsls	r5, r5, #3
 8000638:	04db      	lsls	r3, r3, #19
 800063a:	431d      	orrs	r5, r3
 800063c:	387f      	subs	r0, #127	; 0x7f
 800063e:	4647      	mov	r7, r8
 8000640:	1a38      	subs	r0, r7, r0
 8000642:	464f      	mov	r7, r9
 8000644:	430f      	orrs	r7, r1
 8000646:	00bf      	lsls	r7, r7, #2
 8000648:	46b9      	mov	r9, r7
 800064a:	0033      	movs	r3, r6
 800064c:	9a00      	ldr	r2, [sp, #0]
 800064e:	4f87      	ldr	r7, [pc, #540]	; (800086c <__aeabi_fdiv+0x284>)
 8000650:	4053      	eors	r3, r2
 8000652:	464a      	mov	r2, r9
 8000654:	58ba      	ldr	r2, [r7, r2]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	4697      	mov	pc, r2
 800065a:	2c00      	cmp	r4, #0
 800065c:	d14e      	bne.n	80006fc <__aeabi_fdiv+0x114>
 800065e:	2308      	movs	r3, #8
 8000660:	4699      	mov	r9, r3
 8000662:	33f7      	adds	r3, #247	; 0xf7
 8000664:	4698      	mov	r8, r3
 8000666:	3bfd      	subs	r3, #253	; 0xfd
 8000668:	469b      	mov	fp, r3
 800066a:	027d      	lsls	r5, r7, #9
 800066c:	0078      	lsls	r0, r7, #1
 800066e:	0ffb      	lsrs	r3, r7, #31
 8000670:	0a6d      	lsrs	r5, r5, #9
 8000672:	0e00      	lsrs	r0, r0, #24
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	d1da      	bne.n	800062e <__aeabi_fdiv+0x46>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d126      	bne.n	80006ca <__aeabi_fdiv+0xe2>
 800067c:	2000      	movs	r0, #0
 800067e:	2101      	movs	r1, #1
 8000680:	0033      	movs	r3, r6
 8000682:	9a00      	ldr	r2, [sp, #0]
 8000684:	4f7a      	ldr	r7, [pc, #488]	; (8000870 <__aeabi_fdiv+0x288>)
 8000686:	4053      	eors	r3, r2
 8000688:	4642      	mov	r2, r8
 800068a:	1a10      	subs	r0, r2, r0
 800068c:	464a      	mov	r2, r9
 800068e:	430a      	orrs	r2, r1
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	58ba      	ldr	r2, [r7, r2]
 8000694:	001d      	movs	r5, r3
 8000696:	4697      	mov	pc, r2
 8000698:	9b00      	ldr	r3, [sp, #0]
 800069a:	002c      	movs	r4, r5
 800069c:	469a      	mov	sl, r3
 800069e:	468b      	mov	fp, r1
 80006a0:	465b      	mov	r3, fp
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d131      	bne.n	800070a <__aeabi_fdiv+0x122>
 80006a6:	4653      	mov	r3, sl
 80006a8:	21ff      	movs	r1, #255	; 0xff
 80006aa:	2400      	movs	r4, #0
 80006ac:	e038      	b.n	8000720 <__aeabi_fdiv+0x138>
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d117      	bne.n	80006e2 <__aeabi_fdiv+0xfa>
 80006b2:	2304      	movs	r3, #4
 80006b4:	4699      	mov	r9, r3
 80006b6:	2300      	movs	r3, #0
 80006b8:	4698      	mov	r8, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	469b      	mov	fp, r3
 80006be:	e7af      	b.n	8000620 <__aeabi_fdiv+0x38>
 80006c0:	20ff      	movs	r0, #255	; 0xff
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d10b      	bne.n	80006de <__aeabi_fdiv+0xf6>
 80006c6:	2102      	movs	r1, #2
 80006c8:	e7da      	b.n	8000680 <__aeabi_fdiv+0x98>
 80006ca:	0028      	movs	r0, r5
 80006cc:	f001 f8de 	bl	800188c <__clzsi2>
 80006d0:	1f43      	subs	r3, r0, #5
 80006d2:	409d      	lsls	r5, r3
 80006d4:	2376      	movs	r3, #118	; 0x76
 80006d6:	425b      	negs	r3, r3
 80006d8:	1a18      	subs	r0, r3, r0
 80006da:	2100      	movs	r1, #0
 80006dc:	e7af      	b.n	800063e <__aeabi_fdiv+0x56>
 80006de:	2103      	movs	r1, #3
 80006e0:	e7ad      	b.n	800063e <__aeabi_fdiv+0x56>
 80006e2:	0020      	movs	r0, r4
 80006e4:	f001 f8d2 	bl	800188c <__clzsi2>
 80006e8:	1f43      	subs	r3, r0, #5
 80006ea:	409c      	lsls	r4, r3
 80006ec:	2376      	movs	r3, #118	; 0x76
 80006ee:	425b      	negs	r3, r3
 80006f0:	1a1b      	subs	r3, r3, r0
 80006f2:	4698      	mov	r8, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	4699      	mov	r9, r3
 80006f8:	469b      	mov	fp, r3
 80006fa:	e791      	b.n	8000620 <__aeabi_fdiv+0x38>
 80006fc:	230c      	movs	r3, #12
 80006fe:	4699      	mov	r9, r3
 8000700:	33f3      	adds	r3, #243	; 0xf3
 8000702:	4698      	mov	r8, r3
 8000704:	3bfc      	subs	r3, #252	; 0xfc
 8000706:	469b      	mov	fp, r3
 8000708:	e78a      	b.n	8000620 <__aeabi_fdiv+0x38>
 800070a:	2b03      	cmp	r3, #3
 800070c:	d100      	bne.n	8000710 <__aeabi_fdiv+0x128>
 800070e:	e0a5      	b.n	800085c <__aeabi_fdiv+0x274>
 8000710:	4655      	mov	r5, sl
 8000712:	2b01      	cmp	r3, #1
 8000714:	d000      	beq.n	8000718 <__aeabi_fdiv+0x130>
 8000716:	e081      	b.n	800081c <__aeabi_fdiv+0x234>
 8000718:	2301      	movs	r3, #1
 800071a:	2100      	movs	r1, #0
 800071c:	2400      	movs	r4, #0
 800071e:	402b      	ands	r3, r5
 8000720:	0264      	lsls	r4, r4, #9
 8000722:	05c9      	lsls	r1, r1, #23
 8000724:	0a60      	lsrs	r0, r4, #9
 8000726:	07db      	lsls	r3, r3, #31
 8000728:	4308      	orrs	r0, r1
 800072a:	4318      	orrs	r0, r3
 800072c:	b003      	add	sp, #12
 800072e:	bc3c      	pop	{r2, r3, r4, r5}
 8000730:	4690      	mov	r8, r2
 8000732:	4699      	mov	r9, r3
 8000734:	46a2      	mov	sl, r4
 8000736:	46ab      	mov	fp, r5
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	2480      	movs	r4, #128	; 0x80
 800073c:	2300      	movs	r3, #0
 800073e:	03e4      	lsls	r4, r4, #15
 8000740:	21ff      	movs	r1, #255	; 0xff
 8000742:	e7ed      	b.n	8000720 <__aeabi_fdiv+0x138>
 8000744:	21ff      	movs	r1, #255	; 0xff
 8000746:	2400      	movs	r4, #0
 8000748:	e7ea      	b.n	8000720 <__aeabi_fdiv+0x138>
 800074a:	2301      	movs	r3, #1
 800074c:	1a59      	subs	r1, r3, r1
 800074e:	291b      	cmp	r1, #27
 8000750:	dd66      	ble.n	8000820 <__aeabi_fdiv+0x238>
 8000752:	9a01      	ldr	r2, [sp, #4]
 8000754:	4013      	ands	r3, r2
 8000756:	2100      	movs	r1, #0
 8000758:	2400      	movs	r4, #0
 800075a:	e7e1      	b.n	8000720 <__aeabi_fdiv+0x138>
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	03db      	lsls	r3, r3, #15
 8000760:	421c      	tst	r4, r3
 8000762:	d038      	beq.n	80007d6 <__aeabi_fdiv+0x1ee>
 8000764:	421d      	tst	r5, r3
 8000766:	d051      	beq.n	800080c <__aeabi_fdiv+0x224>
 8000768:	431c      	orrs	r4, r3
 800076a:	0264      	lsls	r4, r4, #9
 800076c:	0a64      	lsrs	r4, r4, #9
 800076e:	0033      	movs	r3, r6
 8000770:	21ff      	movs	r1, #255	; 0xff
 8000772:	e7d5      	b.n	8000720 <__aeabi_fdiv+0x138>
 8000774:	0163      	lsls	r3, r4, #5
 8000776:	016c      	lsls	r4, r5, #5
 8000778:	42a3      	cmp	r3, r4
 800077a:	d23b      	bcs.n	80007f4 <__aeabi_fdiv+0x20c>
 800077c:	261b      	movs	r6, #27
 800077e:	2100      	movs	r1, #0
 8000780:	3801      	subs	r0, #1
 8000782:	2501      	movs	r5, #1
 8000784:	001f      	movs	r7, r3
 8000786:	0049      	lsls	r1, r1, #1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	2f00      	cmp	r7, #0
 800078c:	db01      	blt.n	8000792 <__aeabi_fdiv+0x1aa>
 800078e:	429c      	cmp	r4, r3
 8000790:	d801      	bhi.n	8000796 <__aeabi_fdiv+0x1ae>
 8000792:	1b1b      	subs	r3, r3, r4
 8000794:	4329      	orrs	r1, r5
 8000796:	3e01      	subs	r6, #1
 8000798:	2e00      	cmp	r6, #0
 800079a:	d1f3      	bne.n	8000784 <__aeabi_fdiv+0x19c>
 800079c:	001c      	movs	r4, r3
 800079e:	1e63      	subs	r3, r4, #1
 80007a0:	419c      	sbcs	r4, r3
 80007a2:	430c      	orrs	r4, r1
 80007a4:	0001      	movs	r1, r0
 80007a6:	317f      	adds	r1, #127	; 0x7f
 80007a8:	2900      	cmp	r1, #0
 80007aa:	ddce      	ble.n	800074a <__aeabi_fdiv+0x162>
 80007ac:	0763      	lsls	r3, r4, #29
 80007ae:	d004      	beq.n	80007ba <__aeabi_fdiv+0x1d2>
 80007b0:	230f      	movs	r3, #15
 80007b2:	4023      	ands	r3, r4
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d000      	beq.n	80007ba <__aeabi_fdiv+0x1d2>
 80007b8:	3404      	adds	r4, #4
 80007ba:	0123      	lsls	r3, r4, #4
 80007bc:	d503      	bpl.n	80007c6 <__aeabi_fdiv+0x1de>
 80007be:	0001      	movs	r1, r0
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <__aeabi_fdiv+0x28c>)
 80007c2:	3180      	adds	r1, #128	; 0x80
 80007c4:	401c      	ands	r4, r3
 80007c6:	29fe      	cmp	r1, #254	; 0xfe
 80007c8:	dd0d      	ble.n	80007e6 <__aeabi_fdiv+0x1fe>
 80007ca:	2301      	movs	r3, #1
 80007cc:	9a01      	ldr	r2, [sp, #4]
 80007ce:	21ff      	movs	r1, #255	; 0xff
 80007d0:	4013      	ands	r3, r2
 80007d2:	2400      	movs	r4, #0
 80007d4:	e7a4      	b.n	8000720 <__aeabi_fdiv+0x138>
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	03db      	lsls	r3, r3, #15
 80007da:	431c      	orrs	r4, r3
 80007dc:	0264      	lsls	r4, r4, #9
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0033      	movs	r3, r6
 80007e2:	21ff      	movs	r1, #255	; 0xff
 80007e4:	e79c      	b.n	8000720 <__aeabi_fdiv+0x138>
 80007e6:	2301      	movs	r3, #1
 80007e8:	9a01      	ldr	r2, [sp, #4]
 80007ea:	01a4      	lsls	r4, r4, #6
 80007ec:	0a64      	lsrs	r4, r4, #9
 80007ee:	b2c9      	uxtb	r1, r1
 80007f0:	4013      	ands	r3, r2
 80007f2:	e795      	b.n	8000720 <__aeabi_fdiv+0x138>
 80007f4:	1b1b      	subs	r3, r3, r4
 80007f6:	261a      	movs	r6, #26
 80007f8:	2101      	movs	r1, #1
 80007fa:	e7c2      	b.n	8000782 <__aeabi_fdiv+0x19a>
 80007fc:	9b00      	ldr	r3, [sp, #0]
 80007fe:	468b      	mov	fp, r1
 8000800:	469a      	mov	sl, r3
 8000802:	2400      	movs	r4, #0
 8000804:	e74c      	b.n	80006a0 <__aeabi_fdiv+0xb8>
 8000806:	0263      	lsls	r3, r4, #9
 8000808:	d5e5      	bpl.n	80007d6 <__aeabi_fdiv+0x1ee>
 800080a:	2500      	movs	r5, #0
 800080c:	2480      	movs	r4, #128	; 0x80
 800080e:	03e4      	lsls	r4, r4, #15
 8000810:	432c      	orrs	r4, r5
 8000812:	0264      	lsls	r4, r4, #9
 8000814:	0a64      	lsrs	r4, r4, #9
 8000816:	9b00      	ldr	r3, [sp, #0]
 8000818:	21ff      	movs	r1, #255	; 0xff
 800081a:	e781      	b.n	8000720 <__aeabi_fdiv+0x138>
 800081c:	9501      	str	r5, [sp, #4]
 800081e:	e7c1      	b.n	80007a4 <__aeabi_fdiv+0x1bc>
 8000820:	0023      	movs	r3, r4
 8000822:	2020      	movs	r0, #32
 8000824:	40cb      	lsrs	r3, r1
 8000826:	1a41      	subs	r1, r0, r1
 8000828:	408c      	lsls	r4, r1
 800082a:	1e61      	subs	r1, r4, #1
 800082c:	418c      	sbcs	r4, r1
 800082e:	431c      	orrs	r4, r3
 8000830:	0763      	lsls	r3, r4, #29
 8000832:	d004      	beq.n	800083e <__aeabi_fdiv+0x256>
 8000834:	230f      	movs	r3, #15
 8000836:	4023      	ands	r3, r4
 8000838:	2b04      	cmp	r3, #4
 800083a:	d000      	beq.n	800083e <__aeabi_fdiv+0x256>
 800083c:	3404      	adds	r4, #4
 800083e:	0163      	lsls	r3, r4, #5
 8000840:	d505      	bpl.n	800084e <__aeabi_fdiv+0x266>
 8000842:	2301      	movs	r3, #1
 8000844:	9a01      	ldr	r2, [sp, #4]
 8000846:	2101      	movs	r1, #1
 8000848:	4013      	ands	r3, r2
 800084a:	2400      	movs	r4, #0
 800084c:	e768      	b.n	8000720 <__aeabi_fdiv+0x138>
 800084e:	2301      	movs	r3, #1
 8000850:	9a01      	ldr	r2, [sp, #4]
 8000852:	01a4      	lsls	r4, r4, #6
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	4013      	ands	r3, r2
 8000858:	2100      	movs	r1, #0
 800085a:	e761      	b.n	8000720 <__aeabi_fdiv+0x138>
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	03db      	lsls	r3, r3, #15
 8000860:	431c      	orrs	r4, r3
 8000862:	0264      	lsls	r4, r4, #9
 8000864:	0a64      	lsrs	r4, r4, #9
 8000866:	4653      	mov	r3, sl
 8000868:	21ff      	movs	r1, #255	; 0xff
 800086a:	e759      	b.n	8000720 <__aeabi_fdiv+0x138>
 800086c:	08003b98 	.word	0x08003b98
 8000870:	08003bd8 	.word	0x08003bd8
 8000874:	f7ffffff 	.word	0xf7ffffff

08000878 <__aeabi_fmul>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	4657      	mov	r7, sl
 800087c:	464e      	mov	r6, r9
 800087e:	4645      	mov	r5, r8
 8000880:	46de      	mov	lr, fp
 8000882:	b5e0      	push	{r5, r6, r7, lr}
 8000884:	0247      	lsls	r7, r0, #9
 8000886:	0046      	lsls	r6, r0, #1
 8000888:	4688      	mov	r8, r1
 800088a:	0a7f      	lsrs	r7, r7, #9
 800088c:	0e36      	lsrs	r6, r6, #24
 800088e:	0fc4      	lsrs	r4, r0, #31
 8000890:	2e00      	cmp	r6, #0
 8000892:	d047      	beq.n	8000924 <__aeabi_fmul+0xac>
 8000894:	2eff      	cmp	r6, #255	; 0xff
 8000896:	d024      	beq.n	80008e2 <__aeabi_fmul+0x6a>
 8000898:	00fb      	lsls	r3, r7, #3
 800089a:	2780      	movs	r7, #128	; 0x80
 800089c:	04ff      	lsls	r7, r7, #19
 800089e:	431f      	orrs	r7, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	4699      	mov	r9, r3
 80008a4:	469a      	mov	sl, r3
 80008a6:	3e7f      	subs	r6, #127	; 0x7f
 80008a8:	4643      	mov	r3, r8
 80008aa:	025d      	lsls	r5, r3, #9
 80008ac:	0058      	lsls	r0, r3, #1
 80008ae:	0fdb      	lsrs	r3, r3, #31
 80008b0:	0a6d      	lsrs	r5, r5, #9
 80008b2:	0e00      	lsrs	r0, r0, #24
 80008b4:	4698      	mov	r8, r3
 80008b6:	d043      	beq.n	8000940 <__aeabi_fmul+0xc8>
 80008b8:	28ff      	cmp	r0, #255	; 0xff
 80008ba:	d03b      	beq.n	8000934 <__aeabi_fmul+0xbc>
 80008bc:	00eb      	lsls	r3, r5, #3
 80008be:	2580      	movs	r5, #128	; 0x80
 80008c0:	2200      	movs	r2, #0
 80008c2:	04ed      	lsls	r5, r5, #19
 80008c4:	431d      	orrs	r5, r3
 80008c6:	387f      	subs	r0, #127	; 0x7f
 80008c8:	1836      	adds	r6, r6, r0
 80008ca:	1c73      	adds	r3, r6, #1
 80008cc:	4641      	mov	r1, r8
 80008ce:	469b      	mov	fp, r3
 80008d0:	464b      	mov	r3, r9
 80008d2:	4061      	eors	r1, r4
 80008d4:	4313      	orrs	r3, r2
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d864      	bhi.n	80009a4 <__aeabi_fmul+0x12c>
 80008da:	4875      	ldr	r0, [pc, #468]	; (8000ab0 <__aeabi_fmul+0x238>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	58c3      	ldr	r3, [r0, r3]
 80008e0:	469f      	mov	pc, r3
 80008e2:	2f00      	cmp	r7, #0
 80008e4:	d142      	bne.n	800096c <__aeabi_fmul+0xf4>
 80008e6:	2308      	movs	r3, #8
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b06      	subs	r3, #6
 80008ec:	26ff      	movs	r6, #255	; 0xff
 80008ee:	469a      	mov	sl, r3
 80008f0:	e7da      	b.n	80008a8 <__aeabi_fmul+0x30>
 80008f2:	4641      	mov	r1, r8
 80008f4:	2a02      	cmp	r2, #2
 80008f6:	d028      	beq.n	800094a <__aeabi_fmul+0xd2>
 80008f8:	2a03      	cmp	r2, #3
 80008fa:	d100      	bne.n	80008fe <__aeabi_fmul+0x86>
 80008fc:	e0ce      	b.n	8000a9c <__aeabi_fmul+0x224>
 80008fe:	2a01      	cmp	r2, #1
 8000900:	d000      	beq.n	8000904 <__aeabi_fmul+0x8c>
 8000902:	e0ac      	b.n	8000a5e <__aeabi_fmul+0x1e6>
 8000904:	4011      	ands	r1, r2
 8000906:	2000      	movs	r0, #0
 8000908:	2200      	movs	r2, #0
 800090a:	b2cc      	uxtb	r4, r1
 800090c:	0240      	lsls	r0, r0, #9
 800090e:	05d2      	lsls	r2, r2, #23
 8000910:	0a40      	lsrs	r0, r0, #9
 8000912:	07e4      	lsls	r4, r4, #31
 8000914:	4310      	orrs	r0, r2
 8000916:	4320      	orrs	r0, r4
 8000918:	bc3c      	pop	{r2, r3, r4, r5}
 800091a:	4690      	mov	r8, r2
 800091c:	4699      	mov	r9, r3
 800091e:	46a2      	mov	sl, r4
 8000920:	46ab      	mov	fp, r5
 8000922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000924:	2f00      	cmp	r7, #0
 8000926:	d115      	bne.n	8000954 <__aeabi_fmul+0xdc>
 8000928:	2304      	movs	r3, #4
 800092a:	4699      	mov	r9, r3
 800092c:	3b03      	subs	r3, #3
 800092e:	2600      	movs	r6, #0
 8000930:	469a      	mov	sl, r3
 8000932:	e7b9      	b.n	80008a8 <__aeabi_fmul+0x30>
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	2202      	movs	r2, #2
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0c5      	beq.n	80008c8 <__aeabi_fmul+0x50>
 800093c:	2203      	movs	r2, #3
 800093e:	e7c3      	b.n	80008c8 <__aeabi_fmul+0x50>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d119      	bne.n	8000978 <__aeabi_fmul+0x100>
 8000944:	2000      	movs	r0, #0
 8000946:	2201      	movs	r2, #1
 8000948:	e7be      	b.n	80008c8 <__aeabi_fmul+0x50>
 800094a:	2401      	movs	r4, #1
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	400c      	ands	r4, r1
 8000950:	2000      	movs	r0, #0
 8000952:	e7db      	b.n	800090c <__aeabi_fmul+0x94>
 8000954:	0038      	movs	r0, r7
 8000956:	f000 ff99 	bl	800188c <__clzsi2>
 800095a:	2676      	movs	r6, #118	; 0x76
 800095c:	1f43      	subs	r3, r0, #5
 800095e:	409f      	lsls	r7, r3
 8000960:	2300      	movs	r3, #0
 8000962:	4276      	negs	r6, r6
 8000964:	1a36      	subs	r6, r6, r0
 8000966:	4699      	mov	r9, r3
 8000968:	469a      	mov	sl, r3
 800096a:	e79d      	b.n	80008a8 <__aeabi_fmul+0x30>
 800096c:	230c      	movs	r3, #12
 800096e:	4699      	mov	r9, r3
 8000970:	3b09      	subs	r3, #9
 8000972:	26ff      	movs	r6, #255	; 0xff
 8000974:	469a      	mov	sl, r3
 8000976:	e797      	b.n	80008a8 <__aeabi_fmul+0x30>
 8000978:	0028      	movs	r0, r5
 800097a:	f000 ff87 	bl	800188c <__clzsi2>
 800097e:	1f43      	subs	r3, r0, #5
 8000980:	409d      	lsls	r5, r3
 8000982:	2376      	movs	r3, #118	; 0x76
 8000984:	425b      	negs	r3, r3
 8000986:	1a18      	subs	r0, r3, r0
 8000988:	2200      	movs	r2, #0
 800098a:	e79d      	b.n	80008c8 <__aeabi_fmul+0x50>
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	2400      	movs	r4, #0
 8000990:	03c0      	lsls	r0, r0, #15
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	e7ba      	b.n	800090c <__aeabi_fmul+0x94>
 8000996:	003d      	movs	r5, r7
 8000998:	4652      	mov	r2, sl
 800099a:	e7ab      	b.n	80008f4 <__aeabi_fmul+0x7c>
 800099c:	003d      	movs	r5, r7
 800099e:	0021      	movs	r1, r4
 80009a0:	4652      	mov	r2, sl
 80009a2:	e7a7      	b.n	80008f4 <__aeabi_fmul+0x7c>
 80009a4:	0c3b      	lsrs	r3, r7, #16
 80009a6:	469c      	mov	ip, r3
 80009a8:	042a      	lsls	r2, r5, #16
 80009aa:	0c12      	lsrs	r2, r2, #16
 80009ac:	0c2b      	lsrs	r3, r5, #16
 80009ae:	0014      	movs	r4, r2
 80009b0:	4660      	mov	r0, ip
 80009b2:	4665      	mov	r5, ip
 80009b4:	043f      	lsls	r7, r7, #16
 80009b6:	0c3f      	lsrs	r7, r7, #16
 80009b8:	437c      	muls	r4, r7
 80009ba:	4342      	muls	r2, r0
 80009bc:	435d      	muls	r5, r3
 80009be:	437b      	muls	r3, r7
 80009c0:	0c27      	lsrs	r7, r4, #16
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	18ff      	adds	r7, r7, r3
 80009c6:	42ba      	cmp	r2, r7
 80009c8:	d903      	bls.n	80009d2 <__aeabi_fmul+0x15a>
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	025b      	lsls	r3, r3, #9
 80009ce:	469c      	mov	ip, r3
 80009d0:	4465      	add	r5, ip
 80009d2:	0424      	lsls	r4, r4, #16
 80009d4:	043a      	lsls	r2, r7, #16
 80009d6:	0c24      	lsrs	r4, r4, #16
 80009d8:	1912      	adds	r2, r2, r4
 80009da:	0193      	lsls	r3, r2, #6
 80009dc:	1e5c      	subs	r4, r3, #1
 80009de:	41a3      	sbcs	r3, r4
 80009e0:	0c3f      	lsrs	r7, r7, #16
 80009e2:	0e92      	lsrs	r2, r2, #26
 80009e4:	197d      	adds	r5, r7, r5
 80009e6:	431a      	orrs	r2, r3
 80009e8:	01ad      	lsls	r5, r5, #6
 80009ea:	4315      	orrs	r5, r2
 80009ec:	012b      	lsls	r3, r5, #4
 80009ee:	d504      	bpl.n	80009fa <__aeabi_fmul+0x182>
 80009f0:	2301      	movs	r3, #1
 80009f2:	465e      	mov	r6, fp
 80009f4:	086a      	lsrs	r2, r5, #1
 80009f6:	401d      	ands	r5, r3
 80009f8:	4315      	orrs	r5, r2
 80009fa:	0032      	movs	r2, r6
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	2a00      	cmp	r2, #0
 8000a00:	dd25      	ble.n	8000a4e <__aeabi_fmul+0x1d6>
 8000a02:	076b      	lsls	r3, r5, #29
 8000a04:	d004      	beq.n	8000a10 <__aeabi_fmul+0x198>
 8000a06:	230f      	movs	r3, #15
 8000a08:	402b      	ands	r3, r5
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fmul+0x198>
 8000a0e:	3504      	adds	r5, #4
 8000a10:	012b      	lsls	r3, r5, #4
 8000a12:	d503      	bpl.n	8000a1c <__aeabi_fmul+0x1a4>
 8000a14:	0032      	movs	r2, r6
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <__aeabi_fmul+0x23c>)
 8000a18:	3280      	adds	r2, #128	; 0x80
 8000a1a:	401d      	ands	r5, r3
 8000a1c:	2afe      	cmp	r2, #254	; 0xfe
 8000a1e:	dc94      	bgt.n	800094a <__aeabi_fmul+0xd2>
 8000a20:	2401      	movs	r4, #1
 8000a22:	01a8      	lsls	r0, r5, #6
 8000a24:	0a40      	lsrs	r0, r0, #9
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	400c      	ands	r4, r1
 8000a2a:	e76f      	b.n	800090c <__aeabi_fmul+0x94>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	03c0      	lsls	r0, r0, #15
 8000a30:	4207      	tst	r7, r0
 8000a32:	d007      	beq.n	8000a44 <__aeabi_fmul+0x1cc>
 8000a34:	4205      	tst	r5, r0
 8000a36:	d105      	bne.n	8000a44 <__aeabi_fmul+0x1cc>
 8000a38:	4328      	orrs	r0, r5
 8000a3a:	0240      	lsls	r0, r0, #9
 8000a3c:	0a40      	lsrs	r0, r0, #9
 8000a3e:	4644      	mov	r4, r8
 8000a40:	22ff      	movs	r2, #255	; 0xff
 8000a42:	e763      	b.n	800090c <__aeabi_fmul+0x94>
 8000a44:	4338      	orrs	r0, r7
 8000a46:	0240      	lsls	r0, r0, #9
 8000a48:	0a40      	lsrs	r0, r0, #9
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75e      	b.n	800090c <__aeabi_fmul+0x94>
 8000a4e:	2401      	movs	r4, #1
 8000a50:	1aa3      	subs	r3, r4, r2
 8000a52:	2b1b      	cmp	r3, #27
 8000a54:	dd05      	ble.n	8000a62 <__aeabi_fmul+0x1ea>
 8000a56:	400c      	ands	r4, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	e756      	b.n	800090c <__aeabi_fmul+0x94>
 8000a5e:	465e      	mov	r6, fp
 8000a60:	e7cb      	b.n	80009fa <__aeabi_fmul+0x182>
 8000a62:	002a      	movs	r2, r5
 8000a64:	2020      	movs	r0, #32
 8000a66:	40da      	lsrs	r2, r3
 8000a68:	1ac3      	subs	r3, r0, r3
 8000a6a:	409d      	lsls	r5, r3
 8000a6c:	002b      	movs	r3, r5
 8000a6e:	1e5d      	subs	r5, r3, #1
 8000a70:	41ab      	sbcs	r3, r5
 8000a72:	4313      	orrs	r3, r2
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	d004      	beq.n	8000a82 <__aeabi_fmul+0x20a>
 8000a78:	220f      	movs	r2, #15
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	2a04      	cmp	r2, #4
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fmul+0x20a>
 8000a80:	3304      	adds	r3, #4
 8000a82:	015a      	lsls	r2, r3, #5
 8000a84:	d504      	bpl.n	8000a90 <__aeabi_fmul+0x218>
 8000a86:	2401      	movs	r4, #1
 8000a88:	2201      	movs	r2, #1
 8000a8a:	400c      	ands	r4, r1
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e73d      	b.n	800090c <__aeabi_fmul+0x94>
 8000a90:	2401      	movs	r4, #1
 8000a92:	019b      	lsls	r3, r3, #6
 8000a94:	0a58      	lsrs	r0, r3, #9
 8000a96:	400c      	ands	r4, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	e737      	b.n	800090c <__aeabi_fmul+0x94>
 8000a9c:	2080      	movs	r0, #128	; 0x80
 8000a9e:	2401      	movs	r4, #1
 8000aa0:	03c0      	lsls	r0, r0, #15
 8000aa2:	4328      	orrs	r0, r5
 8000aa4:	0240      	lsls	r0, r0, #9
 8000aa6:	0a40      	lsrs	r0, r0, #9
 8000aa8:	400c      	ands	r4, r1
 8000aaa:	22ff      	movs	r2, #255	; 0xff
 8000aac:	e72e      	b.n	800090c <__aeabi_fmul+0x94>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	08003c18 	.word	0x08003c18
 8000ab4:	f7ffffff 	.word	0xf7ffffff

08000ab8 <__aeabi_fsub>:
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	464f      	mov	r7, r9
 8000abc:	46d6      	mov	lr, sl
 8000abe:	4646      	mov	r6, r8
 8000ac0:	0044      	lsls	r4, r0, #1
 8000ac2:	b5c0      	push	{r6, r7, lr}
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	0247      	lsls	r7, r0, #9
 8000ac8:	0248      	lsls	r0, r1, #9
 8000aca:	0a40      	lsrs	r0, r0, #9
 8000acc:	4684      	mov	ip, r0
 8000ace:	4666      	mov	r6, ip
 8000ad0:	0a7b      	lsrs	r3, r7, #9
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0fc9      	lsrs	r1, r1, #31
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	0e24      	lsrs	r4, r4, #24
 8000ada:	0015      	movs	r5, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	0e00      	lsrs	r0, r0, #24
 8000ae0:	4689      	mov	r9, r1
 8000ae2:	00f6      	lsls	r6, r6, #3
 8000ae4:	28ff      	cmp	r0, #255	; 0xff
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fsub+0x32>
 8000ae8:	e08f      	b.n	8000c0a <__aeabi_fsub+0x152>
 8000aea:	2101      	movs	r1, #1
 8000aec:	464f      	mov	r7, r9
 8000aee:	404f      	eors	r7, r1
 8000af0:	0039      	movs	r1, r7
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d066      	beq.n	8000bc4 <__aeabi_fsub+0x10c>
 8000af6:	1a22      	subs	r2, r4, r0
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	dc00      	bgt.n	8000afe <__aeabi_fsub+0x46>
 8000afc:	e09d      	b.n	8000c3a <__aeabi_fsub+0x182>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d13d      	bne.n	8000b7e <__aeabi_fsub+0xc6>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x50>
 8000b06:	e08b      	b.n	8000c20 <__aeabi_fsub+0x168>
 8000b08:	1e51      	subs	r1, r2, #1
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x58>
 8000b0e:	e0b5      	b.n	8000c7c <__aeabi_fsub+0x1c4>
 8000b10:	2401      	movs	r4, #1
 8000b12:	1b9b      	subs	r3, r3, r6
 8000b14:	015a      	lsls	r2, r3, #5
 8000b16:	d544      	bpl.n	8000ba2 <__aeabi_fsub+0xea>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099f      	lsrs	r7, r3, #6
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	f000 feb5 	bl	800188c <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4087      	lsls	r7, r0
 8000b26:	4284      	cmp	r4, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x74>
 8000b2a:	e096      	b.n	8000c5a <__aeabi_fsub+0x1a2>
 8000b2c:	1b04      	subs	r4, r0, r4
 8000b2e:	003a      	movs	r2, r7
 8000b30:	2020      	movs	r0, #32
 8000b32:	3401      	adds	r4, #1
 8000b34:	40e2      	lsrs	r2, r4
 8000b36:	1b04      	subs	r4, r0, r4
 8000b38:	40a7      	lsls	r7, r4
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	1e5f      	subs	r7, r3, #1
 8000b3e:	41bb      	sbcs	r3, r7
 8000b40:	2400      	movs	r4, #0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	075a      	lsls	r2, r3, #29
 8000b46:	d004      	beq.n	8000b52 <__aeabi_fsub+0x9a>
 8000b48:	220f      	movs	r2, #15
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	2a04      	cmp	r2, #4
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_fsub+0x9a>
 8000b50:	3304      	adds	r3, #4
 8000b52:	015a      	lsls	r2, r3, #5
 8000b54:	d527      	bpl.n	8000ba6 <__aeabi_fsub+0xee>
 8000b56:	3401      	adds	r4, #1
 8000b58:	2cff      	cmp	r4, #255	; 0xff
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0xa6>
 8000b5c:	e079      	b.n	8000c52 <__aeabi_fsub+0x19a>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	b2e4      	uxtb	r4, r4
 8000b66:	402a      	ands	r2, r5
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	05e4      	lsls	r4, r4, #23
 8000b6c:	0a58      	lsrs	r0, r3, #9
 8000b6e:	07d2      	lsls	r2, r2, #31
 8000b70:	4320      	orrs	r0, r4
 8000b72:	4310      	orrs	r0, r2
 8000b74:	bc1c      	pop	{r2, r3, r4}
 8000b76:	4690      	mov	r8, r2
 8000b78:	4699      	mov	r9, r3
 8000b7a:	46a2      	mov	sl, r4
 8000b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7e:	2cff      	cmp	r4, #255	; 0xff
 8000b80:	d0e0      	beq.n	8000b44 <__aeabi_fsub+0x8c>
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	04c9      	lsls	r1, r1, #19
 8000b86:	430e      	orrs	r6, r1
 8000b88:	2a1b      	cmp	r2, #27
 8000b8a:	dc7b      	bgt.n	8000c84 <__aeabi_fsub+0x1cc>
 8000b8c:	0031      	movs	r1, r6
 8000b8e:	2020      	movs	r0, #32
 8000b90:	40d1      	lsrs	r1, r2
 8000b92:	1a82      	subs	r2, r0, r2
 8000b94:	4096      	lsls	r6, r2
 8000b96:	1e72      	subs	r2, r6, #1
 8000b98:	4196      	sbcs	r6, r2
 8000b9a:	430e      	orrs	r6, r1
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	015a      	lsls	r2, r3, #5
 8000ba0:	d4ba      	bmi.n	8000b18 <__aeabi_fsub+0x60>
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d1d0      	bne.n	8000b48 <__aeabi_fsub+0x90>
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	08df      	lsrs	r7, r3, #3
 8000baa:	402a      	ands	r2, r5
 8000bac:	2cff      	cmp	r4, #255	; 0xff
 8000bae:	d133      	bne.n	8000c18 <__aeabi_fsub+0x160>
 8000bb0:	2f00      	cmp	r7, #0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_fsub+0xfe>
 8000bb4:	e0a8      	b.n	8000d08 <__aeabi_fsub+0x250>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	433b      	orrs	r3, r7
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	24ff      	movs	r4, #255	; 0xff
 8000bc2:	e7d1      	b.n	8000b68 <__aeabi_fsub+0xb0>
 8000bc4:	1a21      	subs	r1, r4, r0
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	dd4c      	ble.n	8000c64 <__aeabi_fsub+0x1ac>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d02a      	beq.n	8000c24 <__aeabi_fsub+0x16c>
 8000bce:	2cff      	cmp	r4, #255	; 0xff
 8000bd0:	d0b8      	beq.n	8000b44 <__aeabi_fsub+0x8c>
 8000bd2:	2080      	movs	r0, #128	; 0x80
 8000bd4:	04c0      	lsls	r0, r0, #19
 8000bd6:	4306      	orrs	r6, r0
 8000bd8:	291b      	cmp	r1, #27
 8000bda:	dd00      	ble.n	8000bde <__aeabi_fsub+0x126>
 8000bdc:	e0af      	b.n	8000d3e <__aeabi_fsub+0x286>
 8000bde:	0030      	movs	r0, r6
 8000be0:	2720      	movs	r7, #32
 8000be2:	40c8      	lsrs	r0, r1
 8000be4:	1a79      	subs	r1, r7, r1
 8000be6:	408e      	lsls	r6, r1
 8000be8:	1e71      	subs	r1, r6, #1
 8000bea:	418e      	sbcs	r6, r1
 8000bec:	4306      	orrs	r6, r0
 8000bee:	199b      	adds	r3, r3, r6
 8000bf0:	0159      	lsls	r1, r3, #5
 8000bf2:	d5d6      	bpl.n	8000ba2 <__aeabi_fsub+0xea>
 8000bf4:	3401      	adds	r4, #1
 8000bf6:	2cff      	cmp	r4, #255	; 0xff
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fsub+0x144>
 8000bfa:	e085      	b.n	8000d08 <__aeabi_fsub+0x250>
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	497a      	ldr	r1, [pc, #488]	; (8000de8 <__aeabi_fsub+0x330>)
 8000c00:	401a      	ands	r2, r3
 8000c02:	085b      	lsrs	r3, r3, #1
 8000c04:	400b      	ands	r3, r1
 8000c06:	4313      	orrs	r3, r2
 8000c08:	e79c      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_fsub+0x158>
 8000c0e:	e770      	b.n	8000af2 <__aeabi_fsub+0x3a>
 8000c10:	e76b      	b.n	8000aea <__aeabi_fsub+0x32>
 8000c12:	1e3b      	subs	r3, r7, #0
 8000c14:	d1c5      	bne.n	8000ba2 <__aeabi_fsub+0xea>
 8000c16:	2200      	movs	r2, #0
 8000c18:	027b      	lsls	r3, r7, #9
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	b2e4      	uxtb	r4, r4
 8000c1e:	e7a3      	b.n	8000b68 <__aeabi_fsub+0xb0>
 8000c20:	0014      	movs	r4, r2
 8000c22:	e78f      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d04d      	beq.n	8000cc4 <__aeabi_fsub+0x20c>
 8000c28:	1e48      	subs	r0, r1, #1
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d157      	bne.n	8000cde <__aeabi_fsub+0x226>
 8000c2e:	199b      	adds	r3, r3, r6
 8000c30:	2401      	movs	r4, #1
 8000c32:	015a      	lsls	r2, r3, #5
 8000c34:	d5b5      	bpl.n	8000ba2 <__aeabi_fsub+0xea>
 8000c36:	2402      	movs	r4, #2
 8000c38:	e7e0      	b.n	8000bfc <__aeabi_fsub+0x144>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d125      	bne.n	8000c8a <__aeabi_fsub+0x1d2>
 8000c3e:	1c62      	adds	r2, r4, #1
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	2a01      	cmp	r2, #1
 8000c44:	dd72      	ble.n	8000d2c <__aeabi_fsub+0x274>
 8000c46:	1b9f      	subs	r7, r3, r6
 8000c48:	017a      	lsls	r2, r7, #5
 8000c4a:	d535      	bpl.n	8000cb8 <__aeabi_fsub+0x200>
 8000c4c:	1af7      	subs	r7, r6, r3
 8000c4e:	000d      	movs	r5, r1
 8000c50:	e764      	b.n	8000b1c <__aeabi_fsub+0x64>
 8000c52:	2201      	movs	r2, #1
 8000c54:	2300      	movs	r3, #0
 8000c56:	402a      	ands	r2, r5
 8000c58:	e786      	b.n	8000b68 <__aeabi_fsub+0xb0>
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	4a63      	ldr	r2, [pc, #396]	; (8000dec <__aeabi_fsub+0x334>)
 8000c5e:	1a24      	subs	r4, r4, r0
 8000c60:	4013      	ands	r3, r2
 8000c62:	e76f      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d16c      	bne.n	8000d42 <__aeabi_fsub+0x28a>
 8000c68:	1c61      	adds	r1, r4, #1
 8000c6a:	b2c8      	uxtb	r0, r1
 8000c6c:	2801      	cmp	r0, #1
 8000c6e:	dd4e      	ble.n	8000d0e <__aeabi_fsub+0x256>
 8000c70:	29ff      	cmp	r1, #255	; 0xff
 8000c72:	d049      	beq.n	8000d08 <__aeabi_fsub+0x250>
 8000c74:	199b      	adds	r3, r3, r6
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	000c      	movs	r4, r1
 8000c7a:	e763      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000c7c:	2aff      	cmp	r2, #255	; 0xff
 8000c7e:	d041      	beq.n	8000d04 <__aeabi_fsub+0x24c>
 8000c80:	000a      	movs	r2, r1
 8000c82:	e781      	b.n	8000b88 <__aeabi_fsub+0xd0>
 8000c84:	2601      	movs	r6, #1
 8000c86:	1b9b      	subs	r3, r3, r6
 8000c88:	e789      	b.n	8000b9e <__aeabi_fsub+0xe6>
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d01c      	beq.n	8000cc8 <__aeabi_fsub+0x210>
 8000c8e:	28ff      	cmp	r0, #255	; 0xff
 8000c90:	d021      	beq.n	8000cd6 <__aeabi_fsub+0x21e>
 8000c92:	2480      	movs	r4, #128	; 0x80
 8000c94:	04e4      	lsls	r4, r4, #19
 8000c96:	4252      	negs	r2, r2
 8000c98:	4323      	orrs	r3, r4
 8000c9a:	2a1b      	cmp	r2, #27
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_fsub+0x1e8>
 8000c9e:	e096      	b.n	8000dce <__aeabi_fsub+0x316>
 8000ca0:	001c      	movs	r4, r3
 8000ca2:	2520      	movs	r5, #32
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	1aaa      	subs	r2, r5, r2
 8000ca8:	4093      	lsls	r3, r2
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	4193      	sbcs	r3, r2
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	1af3      	subs	r3, r6, r3
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	000d      	movs	r5, r1
 8000cb6:	e72d      	b.n	8000b14 <__aeabi_fsub+0x5c>
 8000cb8:	2f00      	cmp	r7, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_fsub+0x206>
 8000cbc:	e72e      	b.n	8000b1c <__aeabi_fsub+0x64>
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	e7a9      	b.n	8000c18 <__aeabi_fsub+0x160>
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	e73d      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d058      	beq.n	8000d7e <__aeabi_fsub+0x2c6>
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d0ee      	beq.n	8000cb0 <__aeabi_fsub+0x1f8>
 8000cd2:	28ff      	cmp	r0, #255	; 0xff
 8000cd4:	d1e1      	bne.n	8000c9a <__aeabi_fsub+0x1e2>
 8000cd6:	0033      	movs	r3, r6
 8000cd8:	24ff      	movs	r4, #255	; 0xff
 8000cda:	000d      	movs	r5, r1
 8000cdc:	e732      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000cde:	29ff      	cmp	r1, #255	; 0xff
 8000ce0:	d010      	beq.n	8000d04 <__aeabi_fsub+0x24c>
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	e778      	b.n	8000bd8 <__aeabi_fsub+0x120>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d06e      	beq.n	8000dc8 <__aeabi_fsub+0x310>
 8000cea:	24ff      	movs	r4, #255	; 0xff
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0x23a>
 8000cf0:	e728      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	4651      	mov	r1, sl
 8000cf6:	03d2      	lsls	r2, r2, #15
 8000cf8:	4211      	tst	r1, r2
 8000cfa:	d003      	beq.n	8000d04 <__aeabi_fsub+0x24c>
 8000cfc:	4661      	mov	r1, ip
 8000cfe:	4211      	tst	r1, r2
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x24c>
 8000d02:	0033      	movs	r3, r6
 8000d04:	24ff      	movs	r4, #255	; 0xff
 8000d06:	e71d      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000d08:	24ff      	movs	r4, #255	; 0xff
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e72c      	b.n	8000b68 <__aeabi_fsub+0xb0>
 8000d0e:	2c00      	cmp	r4, #0
 8000d10:	d1e9      	bne.n	8000ce6 <__aeabi_fsub+0x22e>
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d063      	beq.n	8000dde <__aeabi_fsub+0x326>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x264>
 8000d1a:	e713      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000d1c:	199b      	adds	r3, r3, r6
 8000d1e:	015a      	lsls	r2, r3, #5
 8000d20:	d400      	bmi.n	8000d24 <__aeabi_fsub+0x26c>
 8000d22:	e73e      	b.n	8000ba2 <__aeabi_fsub+0xea>
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <__aeabi_fsub+0x334>)
 8000d26:	000c      	movs	r4, r1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	e70b      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000d2c:	2c00      	cmp	r4, #0
 8000d2e:	d11e      	bne.n	8000d6e <__aeabi_fsub+0x2b6>
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d12f      	bne.n	8000d94 <__aeabi_fsub+0x2dc>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d04f      	beq.n	8000dd8 <__aeabi_fsub+0x320>
 8000d38:	0033      	movs	r3, r6
 8000d3a:	000d      	movs	r5, r1
 8000d3c:	e702      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000d3e:	2601      	movs	r6, #1
 8000d40:	e755      	b.n	8000bee <__aeabi_fsub+0x136>
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	d11f      	bne.n	8000d86 <__aeabi_fsub+0x2ce>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d043      	beq.n	8000dd2 <__aeabi_fsub+0x31a>
 8000d4a:	43c9      	mvns	r1, r1
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d00b      	beq.n	8000d68 <__aeabi_fsub+0x2b0>
 8000d50:	28ff      	cmp	r0, #255	; 0xff
 8000d52:	d039      	beq.n	8000dc8 <__aeabi_fsub+0x310>
 8000d54:	291b      	cmp	r1, #27
 8000d56:	dc44      	bgt.n	8000de2 <__aeabi_fsub+0x32a>
 8000d58:	001c      	movs	r4, r3
 8000d5a:	2720      	movs	r7, #32
 8000d5c:	40cc      	lsrs	r4, r1
 8000d5e:	1a79      	subs	r1, r7, r1
 8000d60:	408b      	lsls	r3, r1
 8000d62:	1e59      	subs	r1, r3, #1
 8000d64:	418b      	sbcs	r3, r1
 8000d66:	4323      	orrs	r3, r4
 8000d68:	199b      	adds	r3, r3, r6
 8000d6a:	0004      	movs	r4, r0
 8000d6c:	e740      	b.n	8000bf0 <__aeabi_fsub+0x138>
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d11a      	bne.n	8000da8 <__aeabi_fsub+0x2f0>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d124      	bne.n	8000dc0 <__aeabi_fsub+0x308>
 8000d76:	2780      	movs	r7, #128	; 0x80
 8000d78:	2200      	movs	r2, #0
 8000d7a:	03ff      	lsls	r7, r7, #15
 8000d7c:	e71b      	b.n	8000bb6 <__aeabi_fsub+0xfe>
 8000d7e:	0033      	movs	r3, r6
 8000d80:	0004      	movs	r4, r0
 8000d82:	000d      	movs	r5, r1
 8000d84:	e6de      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000d86:	28ff      	cmp	r0, #255	; 0xff
 8000d88:	d01e      	beq.n	8000dc8 <__aeabi_fsub+0x310>
 8000d8a:	2480      	movs	r4, #128	; 0x80
 8000d8c:	04e4      	lsls	r4, r4, #19
 8000d8e:	4249      	negs	r1, r1
 8000d90:	4323      	orrs	r3, r4
 8000d92:	e7df      	b.n	8000d54 <__aeabi_fsub+0x29c>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_fsub+0x2e2>
 8000d98:	e6d4      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000d9a:	1b9f      	subs	r7, r3, r6
 8000d9c:	017a      	lsls	r2, r7, #5
 8000d9e:	d400      	bmi.n	8000da2 <__aeabi_fsub+0x2ea>
 8000da0:	e737      	b.n	8000c12 <__aeabi_fsub+0x15a>
 8000da2:	1af3      	subs	r3, r6, r3
 8000da4:	000d      	movs	r5, r1
 8000da6:	e6cd      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000da8:	24ff      	movs	r4, #255	; 0xff
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x2f8>
 8000dae:	e6c9      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	4650      	mov	r0, sl
 8000db4:	03d2      	lsls	r2, r2, #15
 8000db6:	4210      	tst	r0, r2
 8000db8:	d0a4      	beq.n	8000d04 <__aeabi_fsub+0x24c>
 8000dba:	4660      	mov	r0, ip
 8000dbc:	4210      	tst	r0, r2
 8000dbe:	d1a1      	bne.n	8000d04 <__aeabi_fsub+0x24c>
 8000dc0:	0033      	movs	r3, r6
 8000dc2:	000d      	movs	r5, r1
 8000dc4:	24ff      	movs	r4, #255	; 0xff
 8000dc6:	e6bd      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000dc8:	0033      	movs	r3, r6
 8000dca:	24ff      	movs	r4, #255	; 0xff
 8000dcc:	e6ba      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e76e      	b.n	8000cb0 <__aeabi_fsub+0x1f8>
 8000dd2:	0033      	movs	r3, r6
 8000dd4:	0004      	movs	r4, r0
 8000dd6:	e6b5      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000dd8:	2700      	movs	r7, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	e71c      	b.n	8000c18 <__aeabi_fsub+0x160>
 8000dde:	0033      	movs	r3, r6
 8000de0:	e6b0      	b.n	8000b44 <__aeabi_fsub+0x8c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e7c0      	b.n	8000d68 <__aeabi_fsub+0x2b0>
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	7dffffff 	.word	0x7dffffff
 8000dec:	fbffffff 	.word	0xfbffffff

08000df0 <__aeabi_f2iz>:
 8000df0:	0241      	lsls	r1, r0, #9
 8000df2:	0043      	lsls	r3, r0, #1
 8000df4:	0fc2      	lsrs	r2, r0, #31
 8000df6:	0a49      	lsrs	r1, r1, #9
 8000df8:	0e1b      	lsrs	r3, r3, #24
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	2b7e      	cmp	r3, #126	; 0x7e
 8000dfe:	dd0d      	ble.n	8000e1c <__aeabi_f2iz+0x2c>
 8000e00:	2b9d      	cmp	r3, #157	; 0x9d
 8000e02:	dc0c      	bgt.n	8000e1e <__aeabi_f2iz+0x2e>
 8000e04:	2080      	movs	r0, #128	; 0x80
 8000e06:	0400      	lsls	r0, r0, #16
 8000e08:	4301      	orrs	r1, r0
 8000e0a:	2b95      	cmp	r3, #149	; 0x95
 8000e0c:	dc0a      	bgt.n	8000e24 <__aeabi_f2iz+0x34>
 8000e0e:	2096      	movs	r0, #150	; 0x96
 8000e10:	1ac3      	subs	r3, r0, r3
 8000e12:	40d9      	lsrs	r1, r3
 8000e14:	4248      	negs	r0, r1
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_f2iz+0x2c>
 8000e1a:	0008      	movs	r0, r1
 8000e1c:	4770      	bx	lr
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <__aeabi_f2iz+0x3c>)
 8000e20:	18d0      	adds	r0, r2, r3
 8000e22:	e7fb      	b.n	8000e1c <__aeabi_f2iz+0x2c>
 8000e24:	3b96      	subs	r3, #150	; 0x96
 8000e26:	4099      	lsls	r1, r3
 8000e28:	e7f4      	b.n	8000e14 <__aeabi_f2iz+0x24>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	7fffffff 	.word	0x7fffffff

08000e30 <__aeabi_dadd>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	4645      	mov	r5, r8
 8000e34:	46de      	mov	lr, fp
 8000e36:	4657      	mov	r7, sl
 8000e38:	464e      	mov	r6, r9
 8000e3a:	030c      	lsls	r4, r1, #12
 8000e3c:	b5e0      	push	{r5, r6, r7, lr}
 8000e3e:	004e      	lsls	r6, r1, #1
 8000e40:	0fc9      	lsrs	r1, r1, #31
 8000e42:	4688      	mov	r8, r1
 8000e44:	000d      	movs	r5, r1
 8000e46:	0a61      	lsrs	r1, r4, #9
 8000e48:	0f44      	lsrs	r4, r0, #29
 8000e4a:	430c      	orrs	r4, r1
 8000e4c:	00c7      	lsls	r7, r0, #3
 8000e4e:	0319      	lsls	r1, r3, #12
 8000e50:	0058      	lsls	r0, r3, #1
 8000e52:	0fdb      	lsrs	r3, r3, #31
 8000e54:	469b      	mov	fp, r3
 8000e56:	0a4b      	lsrs	r3, r1, #9
 8000e58:	0f51      	lsrs	r1, r2, #29
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	0d76      	lsrs	r6, r6, #21
 8000e5e:	0d40      	lsrs	r0, r0, #21
 8000e60:	0019      	movs	r1, r3
 8000e62:	00d2      	lsls	r2, r2, #3
 8000e64:	45d8      	cmp	r8, fp
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dadd+0x3a>
 8000e68:	e0ae      	b.n	8000fc8 <__aeabi_dadd+0x198>
 8000e6a:	1a35      	subs	r5, r6, r0
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dadd+0x42>
 8000e70:	e0f6      	b.n	8001060 <__aeabi_dadd+0x230>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d10f      	bne.n	8000e96 <__aeabi_dadd+0x66>
 8000e76:	4313      	orrs	r3, r2
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x4c>
 8000e7a:	e0db      	b.n	8001034 <__aeabi_dadd+0x204>
 8000e7c:	1e6b      	subs	r3, r5, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_dadd+0x54>
 8000e82:	e137      	b.n	80010f4 <__aeabi_dadd+0x2c4>
 8000e84:	1aba      	subs	r2, r7, r2
 8000e86:	4297      	cmp	r7, r2
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	1a64      	subs	r4, r4, r1
 8000e8c:	427f      	negs	r7, r7
 8000e8e:	1be4      	subs	r4, r4, r7
 8000e90:	2601      	movs	r6, #1
 8000e92:	0017      	movs	r7, r2
 8000e94:	e024      	b.n	8000ee0 <__aeabi_dadd+0xb0>
 8000e96:	4bc6      	ldr	r3, [pc, #792]	; (80011b0 <__aeabi_dadd+0x380>)
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d04d      	beq.n	8000f38 <__aeabi_dadd+0x108>
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	041b      	lsls	r3, r3, #16
 8000ea0:	4319      	orrs	r1, r3
 8000ea2:	2d38      	cmp	r5, #56	; 0x38
 8000ea4:	dd00      	ble.n	8000ea8 <__aeabi_dadd+0x78>
 8000ea6:	e107      	b.n	80010b8 <__aeabi_dadd+0x288>
 8000ea8:	2d1f      	cmp	r5, #31
 8000eaa:	dd00      	ble.n	8000eae <__aeabi_dadd+0x7e>
 8000eac:	e138      	b.n	8001120 <__aeabi_dadd+0x2f0>
 8000eae:	2020      	movs	r0, #32
 8000eb0:	1b43      	subs	r3, r0, r5
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	4083      	lsls	r3, r0
 8000eba:	4699      	mov	r9, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	4648      	mov	r0, r9
 8000ec0:	40eb      	lsrs	r3, r5
 8000ec2:	4318      	orrs	r0, r3
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	4082      	lsls	r2, r0
 8000eca:	1e50      	subs	r0, r2, #1
 8000ecc:	4182      	sbcs	r2, r0
 8000ece:	40e9      	lsrs	r1, r5
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	1aba      	subs	r2, r7, r2
 8000ed4:	1a61      	subs	r1, r4, r1
 8000ed6:	4297      	cmp	r7, r2
 8000ed8:	41a4      	sbcs	r4, r4
 8000eda:	0017      	movs	r7, r2
 8000edc:	4264      	negs	r4, r4
 8000ede:	1b0c      	subs	r4, r1, r4
 8000ee0:	0223      	lsls	r3, r4, #8
 8000ee2:	d562      	bpl.n	8000faa <__aeabi_dadd+0x17a>
 8000ee4:	0264      	lsls	r4, r4, #9
 8000ee6:	0a65      	lsrs	r5, r4, #9
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0xbe>
 8000eec:	e0df      	b.n	80010ae <__aeabi_dadd+0x27e>
 8000eee:	0028      	movs	r0, r5
 8000ef0:	f000 fccc 	bl	800188c <__clzsi2>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	3b08      	subs	r3, #8
 8000ef8:	2b1f      	cmp	r3, #31
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dadd+0xce>
 8000efc:	e0d2      	b.n	80010a4 <__aeabi_dadd+0x274>
 8000efe:	2220      	movs	r2, #32
 8000f00:	003c      	movs	r4, r7
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	409d      	lsls	r5, r3
 8000f06:	40d4      	lsrs	r4, r2
 8000f08:	409f      	lsls	r7, r3
 8000f0a:	4325      	orrs	r5, r4
 8000f0c:	429e      	cmp	r6, r3
 8000f0e:	dd00      	ble.n	8000f12 <__aeabi_dadd+0xe2>
 8000f10:	e0c4      	b.n	800109c <__aeabi_dadd+0x26c>
 8000f12:	1b9e      	subs	r6, r3, r6
 8000f14:	1c73      	adds	r3, r6, #1
 8000f16:	2b1f      	cmp	r3, #31
 8000f18:	dd00      	ble.n	8000f1c <__aeabi_dadd+0xec>
 8000f1a:	e0f1      	b.n	8001100 <__aeabi_dadd+0x2d0>
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	0038      	movs	r0, r7
 8000f20:	0029      	movs	r1, r5
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	40d8      	lsrs	r0, r3
 8000f26:	4091      	lsls	r1, r2
 8000f28:	4097      	lsls	r7, r2
 8000f2a:	002c      	movs	r4, r5
 8000f2c:	4301      	orrs	r1, r0
 8000f2e:	1e78      	subs	r0, r7, #1
 8000f30:	4187      	sbcs	r7, r0
 8000f32:	40dc      	lsrs	r4, r3
 8000f34:	2600      	movs	r6, #0
 8000f36:	430f      	orrs	r7, r1
 8000f38:	077b      	lsls	r3, r7, #29
 8000f3a:	d009      	beq.n	8000f50 <__aeabi_dadd+0x120>
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	403b      	ands	r3, r7
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <__aeabi_dadd+0x120>
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	42bb      	cmp	r3, r7
 8000f48:	41bf      	sbcs	r7, r7
 8000f4a:	427f      	negs	r7, r7
 8000f4c:	19e4      	adds	r4, r4, r7
 8000f4e:	001f      	movs	r7, r3
 8000f50:	0223      	lsls	r3, r4, #8
 8000f52:	d52c      	bpl.n	8000fae <__aeabi_dadd+0x17e>
 8000f54:	4b96      	ldr	r3, [pc, #600]	; (80011b0 <__aeabi_dadd+0x380>)
 8000f56:	3601      	adds	r6, #1
 8000f58:	429e      	cmp	r6, r3
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dadd+0x12e>
 8000f5c:	e09a      	b.n	8001094 <__aeabi_dadd+0x264>
 8000f5e:	4645      	mov	r5, r8
 8000f60:	4b94      	ldr	r3, [pc, #592]	; (80011b4 <__aeabi_dadd+0x384>)
 8000f62:	08ff      	lsrs	r7, r7, #3
 8000f64:	401c      	ands	r4, r3
 8000f66:	0760      	lsls	r0, r4, #29
 8000f68:	0576      	lsls	r6, r6, #21
 8000f6a:	0264      	lsls	r4, r4, #9
 8000f6c:	4307      	orrs	r7, r0
 8000f6e:	0b24      	lsrs	r4, r4, #12
 8000f70:	0d76      	lsrs	r6, r6, #21
 8000f72:	2100      	movs	r1, #0
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	0b23      	lsrs	r3, r4, #12
 8000f78:	0d0c      	lsrs	r4, r1, #20
 8000f7a:	4a8f      	ldr	r2, [pc, #572]	; (80011b8 <__aeabi_dadd+0x388>)
 8000f7c:	0524      	lsls	r4, r4, #20
 8000f7e:	431c      	orrs	r4, r3
 8000f80:	4014      	ands	r4, r2
 8000f82:	0533      	lsls	r3, r6, #20
 8000f84:	4323      	orrs	r3, r4
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	07ed      	lsls	r5, r5, #31
 8000f8a:	085b      	lsrs	r3, r3, #1
 8000f8c:	432b      	orrs	r3, r5
 8000f8e:	0038      	movs	r0, r7
 8000f90:	0019      	movs	r1, r3
 8000f92:	bc3c      	pop	{r2, r3, r4, r5}
 8000f94:	4690      	mov	r8, r2
 8000f96:	4699      	mov	r9, r3
 8000f98:	46a2      	mov	sl, r4
 8000f9a:	46ab      	mov	fp, r5
 8000f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f9e:	4664      	mov	r4, ip
 8000fa0:	4304      	orrs	r4, r0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x176>
 8000fa4:	e211      	b.n	80013ca <__aeabi_dadd+0x59a>
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	4667      	mov	r7, ip
 8000faa:	077b      	lsls	r3, r7, #29
 8000fac:	d1c6      	bne.n	8000f3c <__aeabi_dadd+0x10c>
 8000fae:	4645      	mov	r5, r8
 8000fb0:	0760      	lsls	r0, r4, #29
 8000fb2:	08ff      	lsrs	r7, r7, #3
 8000fb4:	4307      	orrs	r7, r0
 8000fb6:	08e4      	lsrs	r4, r4, #3
 8000fb8:	4b7d      	ldr	r3, [pc, #500]	; (80011b0 <__aeabi_dadd+0x380>)
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	d030      	beq.n	8001020 <__aeabi_dadd+0x1f0>
 8000fbe:	0324      	lsls	r4, r4, #12
 8000fc0:	0576      	lsls	r6, r6, #21
 8000fc2:	0b24      	lsrs	r4, r4, #12
 8000fc4:	0d76      	lsrs	r6, r6, #21
 8000fc6:	e7d4      	b.n	8000f72 <__aeabi_dadd+0x142>
 8000fc8:	1a33      	subs	r3, r6, r0
 8000fca:	469a      	mov	sl, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dd78      	ble.n	80010c2 <__aeabi_dadd+0x292>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d031      	beq.n	8001038 <__aeabi_dadd+0x208>
 8000fd4:	4876      	ldr	r0, [pc, #472]	; (80011b0 <__aeabi_dadd+0x380>)
 8000fd6:	4286      	cmp	r6, r0
 8000fd8:	d0ae      	beq.n	8000f38 <__aeabi_dadd+0x108>
 8000fda:	2080      	movs	r0, #128	; 0x80
 8000fdc:	0400      	lsls	r0, r0, #16
 8000fde:	4301      	orrs	r1, r0
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	2b38      	cmp	r3, #56	; 0x38
 8000fe4:	dc00      	bgt.n	8000fe8 <__aeabi_dadd+0x1b8>
 8000fe6:	e0e9      	b.n	80011bc <__aeabi_dadd+0x38c>
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	1e51      	subs	r1, r2, #1
 8000fec:	418a      	sbcs	r2, r1
 8000fee:	2100      	movs	r1, #0
 8000ff0:	19d2      	adds	r2, r2, r7
 8000ff2:	42ba      	cmp	r2, r7
 8000ff4:	41bf      	sbcs	r7, r7
 8000ff6:	1909      	adds	r1, r1, r4
 8000ff8:	427c      	negs	r4, r7
 8000ffa:	0017      	movs	r7, r2
 8000ffc:	190c      	adds	r4, r1, r4
 8000ffe:	0223      	lsls	r3, r4, #8
 8001000:	d5d3      	bpl.n	8000faa <__aeabi_dadd+0x17a>
 8001002:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <__aeabi_dadd+0x380>)
 8001004:	3601      	adds	r6, #1
 8001006:	429e      	cmp	r6, r3
 8001008:	d100      	bne.n	800100c <__aeabi_dadd+0x1dc>
 800100a:	e13a      	b.n	8001282 <__aeabi_dadd+0x452>
 800100c:	2001      	movs	r0, #1
 800100e:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <__aeabi_dadd+0x384>)
 8001010:	401c      	ands	r4, r3
 8001012:	087b      	lsrs	r3, r7, #1
 8001014:	4007      	ands	r7, r0
 8001016:	431f      	orrs	r7, r3
 8001018:	07e0      	lsls	r0, r4, #31
 800101a:	4307      	orrs	r7, r0
 800101c:	0864      	lsrs	r4, r4, #1
 800101e:	e78b      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001020:	0023      	movs	r3, r4
 8001022:	433b      	orrs	r3, r7
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x1f8>
 8001026:	e1cb      	b.n	80013c0 <__aeabi_dadd+0x590>
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	0312      	lsls	r2, r2, #12
 800102c:	4314      	orrs	r4, r2
 800102e:	0324      	lsls	r4, r4, #12
 8001030:	0b24      	lsrs	r4, r4, #12
 8001032:	e79e      	b.n	8000f72 <__aeabi_dadd+0x142>
 8001034:	002e      	movs	r6, r5
 8001036:	e77f      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001038:	0008      	movs	r0, r1
 800103a:	4310      	orrs	r0, r2
 800103c:	d100      	bne.n	8001040 <__aeabi_dadd+0x210>
 800103e:	e0b4      	b.n	80011aa <__aeabi_dadd+0x37a>
 8001040:	1e58      	subs	r0, r3, #1
 8001042:	2800      	cmp	r0, #0
 8001044:	d000      	beq.n	8001048 <__aeabi_dadd+0x218>
 8001046:	e0de      	b.n	8001206 <__aeabi_dadd+0x3d6>
 8001048:	18ba      	adds	r2, r7, r2
 800104a:	42ba      	cmp	r2, r7
 800104c:	419b      	sbcs	r3, r3
 800104e:	1864      	adds	r4, r4, r1
 8001050:	425b      	negs	r3, r3
 8001052:	18e4      	adds	r4, r4, r3
 8001054:	0017      	movs	r7, r2
 8001056:	2601      	movs	r6, #1
 8001058:	0223      	lsls	r3, r4, #8
 800105a:	d5a6      	bpl.n	8000faa <__aeabi_dadd+0x17a>
 800105c:	2602      	movs	r6, #2
 800105e:	e7d5      	b.n	800100c <__aeabi_dadd+0x1dc>
 8001060:	2d00      	cmp	r5, #0
 8001062:	d16e      	bne.n	8001142 <__aeabi_dadd+0x312>
 8001064:	1c70      	adds	r0, r6, #1
 8001066:	0540      	lsls	r0, r0, #21
 8001068:	0d40      	lsrs	r0, r0, #21
 800106a:	2801      	cmp	r0, #1
 800106c:	dc00      	bgt.n	8001070 <__aeabi_dadd+0x240>
 800106e:	e0f9      	b.n	8001264 <__aeabi_dadd+0x434>
 8001070:	1ab8      	subs	r0, r7, r2
 8001072:	4684      	mov	ip, r0
 8001074:	4287      	cmp	r7, r0
 8001076:	4180      	sbcs	r0, r0
 8001078:	1ae5      	subs	r5, r4, r3
 800107a:	4240      	negs	r0, r0
 800107c:	1a2d      	subs	r5, r5, r0
 800107e:	0228      	lsls	r0, r5, #8
 8001080:	d400      	bmi.n	8001084 <__aeabi_dadd+0x254>
 8001082:	e089      	b.n	8001198 <__aeabi_dadd+0x368>
 8001084:	1bd7      	subs	r7, r2, r7
 8001086:	42ba      	cmp	r2, r7
 8001088:	4192      	sbcs	r2, r2
 800108a:	1b1c      	subs	r4, r3, r4
 800108c:	4252      	negs	r2, r2
 800108e:	1aa5      	subs	r5, r4, r2
 8001090:	46d8      	mov	r8, fp
 8001092:	e729      	b.n	8000ee8 <__aeabi_dadd+0xb8>
 8001094:	4645      	mov	r5, r8
 8001096:	2400      	movs	r4, #0
 8001098:	2700      	movs	r7, #0
 800109a:	e76a      	b.n	8000f72 <__aeabi_dadd+0x142>
 800109c:	4c45      	ldr	r4, [pc, #276]	; (80011b4 <__aeabi_dadd+0x384>)
 800109e:	1af6      	subs	r6, r6, r3
 80010a0:	402c      	ands	r4, r5
 80010a2:	e749      	b.n	8000f38 <__aeabi_dadd+0x108>
 80010a4:	003d      	movs	r5, r7
 80010a6:	3828      	subs	r0, #40	; 0x28
 80010a8:	4085      	lsls	r5, r0
 80010aa:	2700      	movs	r7, #0
 80010ac:	e72e      	b.n	8000f0c <__aeabi_dadd+0xdc>
 80010ae:	0038      	movs	r0, r7
 80010b0:	f000 fbec 	bl	800188c <__clzsi2>
 80010b4:	3020      	adds	r0, #32
 80010b6:	e71d      	b.n	8000ef4 <__aeabi_dadd+0xc4>
 80010b8:	430a      	orrs	r2, r1
 80010ba:	1e51      	subs	r1, r2, #1
 80010bc:	418a      	sbcs	r2, r1
 80010be:	2100      	movs	r1, #0
 80010c0:	e707      	b.n	8000ed2 <__aeabi_dadd+0xa2>
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d000      	beq.n	80010c8 <__aeabi_dadd+0x298>
 80010c6:	e0f3      	b.n	80012b0 <__aeabi_dadd+0x480>
 80010c8:	1c70      	adds	r0, r6, #1
 80010ca:	0543      	lsls	r3, r0, #21
 80010cc:	0d5b      	lsrs	r3, r3, #21
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_dadd+0x2a4>
 80010d2:	e0ad      	b.n	8001230 <__aeabi_dadd+0x400>
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <__aeabi_dadd+0x380>)
 80010d6:	4298      	cmp	r0, r3
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x2ac>
 80010da:	e0d1      	b.n	8001280 <__aeabi_dadd+0x450>
 80010dc:	18ba      	adds	r2, r7, r2
 80010de:	42ba      	cmp	r2, r7
 80010e0:	41bf      	sbcs	r7, r7
 80010e2:	1864      	adds	r4, r4, r1
 80010e4:	427f      	negs	r7, r7
 80010e6:	19e4      	adds	r4, r4, r7
 80010e8:	07e7      	lsls	r7, r4, #31
 80010ea:	0852      	lsrs	r2, r2, #1
 80010ec:	4317      	orrs	r7, r2
 80010ee:	0864      	lsrs	r4, r4, #1
 80010f0:	0006      	movs	r6, r0
 80010f2:	e721      	b.n	8000f38 <__aeabi_dadd+0x108>
 80010f4:	482e      	ldr	r0, [pc, #184]	; (80011b0 <__aeabi_dadd+0x380>)
 80010f6:	4285      	cmp	r5, r0
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x2cc>
 80010fa:	e093      	b.n	8001224 <__aeabi_dadd+0x3f4>
 80010fc:	001d      	movs	r5, r3
 80010fe:	e6d0      	b.n	8000ea2 <__aeabi_dadd+0x72>
 8001100:	0029      	movs	r1, r5
 8001102:	3e1f      	subs	r6, #31
 8001104:	40f1      	lsrs	r1, r6
 8001106:	2b20      	cmp	r3, #32
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x2dc>
 800110a:	e08d      	b.n	8001228 <__aeabi_dadd+0x3f8>
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	409d      	lsls	r5, r3
 8001112:	432f      	orrs	r7, r5
 8001114:	1e7d      	subs	r5, r7, #1
 8001116:	41af      	sbcs	r7, r5
 8001118:	2400      	movs	r4, #0
 800111a:	430f      	orrs	r7, r1
 800111c:	2600      	movs	r6, #0
 800111e:	e744      	b.n	8000faa <__aeabi_dadd+0x17a>
 8001120:	002b      	movs	r3, r5
 8001122:	0008      	movs	r0, r1
 8001124:	3b20      	subs	r3, #32
 8001126:	40d8      	lsrs	r0, r3
 8001128:	0003      	movs	r3, r0
 800112a:	2d20      	cmp	r5, #32
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x300>
 800112e:	e07d      	b.n	800122c <__aeabi_dadd+0x3fc>
 8001130:	2040      	movs	r0, #64	; 0x40
 8001132:	1b45      	subs	r5, r0, r5
 8001134:	40a9      	lsls	r1, r5
 8001136:	430a      	orrs	r2, r1
 8001138:	1e51      	subs	r1, r2, #1
 800113a:	418a      	sbcs	r2, r1
 800113c:	2100      	movs	r1, #0
 800113e:	431a      	orrs	r2, r3
 8001140:	e6c7      	b.n	8000ed2 <__aeabi_dadd+0xa2>
 8001142:	2e00      	cmp	r6, #0
 8001144:	d050      	beq.n	80011e8 <__aeabi_dadd+0x3b8>
 8001146:	4e1a      	ldr	r6, [pc, #104]	; (80011b0 <__aeabi_dadd+0x380>)
 8001148:	42b0      	cmp	r0, r6
 800114a:	d057      	beq.n	80011fc <__aeabi_dadd+0x3cc>
 800114c:	2680      	movs	r6, #128	; 0x80
 800114e:	426b      	negs	r3, r5
 8001150:	4699      	mov	r9, r3
 8001152:	0436      	lsls	r6, r6, #16
 8001154:	4334      	orrs	r4, r6
 8001156:	464b      	mov	r3, r9
 8001158:	2b38      	cmp	r3, #56	; 0x38
 800115a:	dd00      	ble.n	800115e <__aeabi_dadd+0x32e>
 800115c:	e0d6      	b.n	800130c <__aeabi_dadd+0x4dc>
 800115e:	2b1f      	cmp	r3, #31
 8001160:	dd00      	ble.n	8001164 <__aeabi_dadd+0x334>
 8001162:	e135      	b.n	80013d0 <__aeabi_dadd+0x5a0>
 8001164:	2620      	movs	r6, #32
 8001166:	1af5      	subs	r5, r6, r3
 8001168:	0026      	movs	r6, r4
 800116a:	40ae      	lsls	r6, r5
 800116c:	46b2      	mov	sl, r6
 800116e:	003e      	movs	r6, r7
 8001170:	40de      	lsrs	r6, r3
 8001172:	46ac      	mov	ip, r5
 8001174:	0035      	movs	r5, r6
 8001176:	4656      	mov	r6, sl
 8001178:	432e      	orrs	r6, r5
 800117a:	4665      	mov	r5, ip
 800117c:	40af      	lsls	r7, r5
 800117e:	1e7d      	subs	r5, r7, #1
 8001180:	41af      	sbcs	r7, r5
 8001182:	40dc      	lsrs	r4, r3
 8001184:	4337      	orrs	r7, r6
 8001186:	1bd7      	subs	r7, r2, r7
 8001188:	42ba      	cmp	r2, r7
 800118a:	4192      	sbcs	r2, r2
 800118c:	1b0c      	subs	r4, r1, r4
 800118e:	4252      	negs	r2, r2
 8001190:	1aa4      	subs	r4, r4, r2
 8001192:	0006      	movs	r6, r0
 8001194:	46d8      	mov	r8, fp
 8001196:	e6a3      	b.n	8000ee0 <__aeabi_dadd+0xb0>
 8001198:	4664      	mov	r4, ip
 800119a:	4667      	mov	r7, ip
 800119c:	432c      	orrs	r4, r5
 800119e:	d000      	beq.n	80011a2 <__aeabi_dadd+0x372>
 80011a0:	e6a2      	b.n	8000ee8 <__aeabi_dadd+0xb8>
 80011a2:	2500      	movs	r5, #0
 80011a4:	2600      	movs	r6, #0
 80011a6:	2700      	movs	r7, #0
 80011a8:	e706      	b.n	8000fb8 <__aeabi_dadd+0x188>
 80011aa:	001e      	movs	r6, r3
 80011ac:	e6c4      	b.n	8000f38 <__aeabi_dadd+0x108>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	000007ff 	.word	0x000007ff
 80011b4:	ff7fffff 	.word	0xff7fffff
 80011b8:	800fffff 	.word	0x800fffff
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	dc63      	bgt.n	8001288 <__aeabi_dadd+0x458>
 80011c0:	2020      	movs	r0, #32
 80011c2:	1ac3      	subs	r3, r0, r3
 80011c4:	0008      	movs	r0, r1
 80011c6:	4098      	lsls	r0, r3
 80011c8:	469c      	mov	ip, r3
 80011ca:	4683      	mov	fp, r0
 80011cc:	4653      	mov	r3, sl
 80011ce:	0010      	movs	r0, r2
 80011d0:	40d8      	lsrs	r0, r3
 80011d2:	0003      	movs	r3, r0
 80011d4:	4658      	mov	r0, fp
 80011d6:	4318      	orrs	r0, r3
 80011d8:	4663      	mov	r3, ip
 80011da:	409a      	lsls	r2, r3
 80011dc:	1e53      	subs	r3, r2, #1
 80011de:	419a      	sbcs	r2, r3
 80011e0:	4653      	mov	r3, sl
 80011e2:	4302      	orrs	r2, r0
 80011e4:	40d9      	lsrs	r1, r3
 80011e6:	e703      	b.n	8000ff0 <__aeabi_dadd+0x1c0>
 80011e8:	0026      	movs	r6, r4
 80011ea:	433e      	orrs	r6, r7
 80011ec:	d006      	beq.n	80011fc <__aeabi_dadd+0x3cc>
 80011ee:	43eb      	mvns	r3, r5
 80011f0:	4699      	mov	r9, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0c7      	beq.n	8001186 <__aeabi_dadd+0x356>
 80011f6:	4e94      	ldr	r6, [pc, #592]	; (8001448 <__aeabi_dadd+0x618>)
 80011f8:	42b0      	cmp	r0, r6
 80011fa:	d1ac      	bne.n	8001156 <__aeabi_dadd+0x326>
 80011fc:	000c      	movs	r4, r1
 80011fe:	0017      	movs	r7, r2
 8001200:	0006      	movs	r6, r0
 8001202:	46d8      	mov	r8, fp
 8001204:	e698      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001206:	4b90      	ldr	r3, [pc, #576]	; (8001448 <__aeabi_dadd+0x618>)
 8001208:	459a      	cmp	sl, r3
 800120a:	d00b      	beq.n	8001224 <__aeabi_dadd+0x3f4>
 800120c:	4682      	mov	sl, r0
 800120e:	e6e7      	b.n	8000fe0 <__aeabi_dadd+0x1b0>
 8001210:	2800      	cmp	r0, #0
 8001212:	d000      	beq.n	8001216 <__aeabi_dadd+0x3e6>
 8001214:	e09e      	b.n	8001354 <__aeabi_dadd+0x524>
 8001216:	0018      	movs	r0, r3
 8001218:	4310      	orrs	r0, r2
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x3ee>
 800121c:	e0e9      	b.n	80013f2 <__aeabi_dadd+0x5c2>
 800121e:	001c      	movs	r4, r3
 8001220:	0017      	movs	r7, r2
 8001222:	46d8      	mov	r8, fp
 8001224:	4e88      	ldr	r6, [pc, #544]	; (8001448 <__aeabi_dadd+0x618>)
 8001226:	e687      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001228:	2500      	movs	r5, #0
 800122a:	e772      	b.n	8001112 <__aeabi_dadd+0x2e2>
 800122c:	2100      	movs	r1, #0
 800122e:	e782      	b.n	8001136 <__aeabi_dadd+0x306>
 8001230:	0023      	movs	r3, r4
 8001232:	433b      	orrs	r3, r7
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x40a>
 8001238:	e0ab      	b.n	8001392 <__aeabi_dadd+0x562>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <__aeabi_dadd+0x410>
 800123e:	e0e7      	b.n	8001410 <__aeabi_dadd+0x5e0>
 8001240:	000b      	movs	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	d100      	bne.n	8001248 <__aeabi_dadd+0x418>
 8001246:	e677      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001248:	18ba      	adds	r2, r7, r2
 800124a:	42ba      	cmp	r2, r7
 800124c:	41bf      	sbcs	r7, r7
 800124e:	1864      	adds	r4, r4, r1
 8001250:	427f      	negs	r7, r7
 8001252:	19e4      	adds	r4, r4, r7
 8001254:	0223      	lsls	r3, r4, #8
 8001256:	d400      	bmi.n	800125a <__aeabi_dadd+0x42a>
 8001258:	e0f2      	b.n	8001440 <__aeabi_dadd+0x610>
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <__aeabi_dadd+0x61c>)
 800125c:	0017      	movs	r7, r2
 800125e:	401c      	ands	r4, r3
 8001260:	0006      	movs	r6, r0
 8001262:	e669      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001264:	0020      	movs	r0, r4
 8001266:	4338      	orrs	r0, r7
 8001268:	2e00      	cmp	r6, #0
 800126a:	d1d1      	bne.n	8001210 <__aeabi_dadd+0x3e0>
 800126c:	2800      	cmp	r0, #0
 800126e:	d15b      	bne.n	8001328 <__aeabi_dadd+0x4f8>
 8001270:	001c      	movs	r4, r3
 8001272:	4314      	orrs	r4, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x448>
 8001276:	e0a8      	b.n	80013ca <__aeabi_dadd+0x59a>
 8001278:	001c      	movs	r4, r3
 800127a:	0017      	movs	r7, r2
 800127c:	46d8      	mov	r8, fp
 800127e:	e65b      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001280:	0006      	movs	r6, r0
 8001282:	2400      	movs	r4, #0
 8001284:	2700      	movs	r7, #0
 8001286:	e697      	b.n	8000fb8 <__aeabi_dadd+0x188>
 8001288:	4650      	mov	r0, sl
 800128a:	000b      	movs	r3, r1
 800128c:	3820      	subs	r0, #32
 800128e:	40c3      	lsrs	r3, r0
 8001290:	4699      	mov	r9, r3
 8001292:	4653      	mov	r3, sl
 8001294:	2b20      	cmp	r3, #32
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x46a>
 8001298:	e095      	b.n	80013c6 <__aeabi_dadd+0x596>
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	4650      	mov	r0, sl
 800129e:	1a1b      	subs	r3, r3, r0
 80012a0:	4099      	lsls	r1, r3
 80012a2:	430a      	orrs	r2, r1
 80012a4:	1e51      	subs	r1, r2, #1
 80012a6:	418a      	sbcs	r2, r1
 80012a8:	464b      	mov	r3, r9
 80012aa:	2100      	movs	r1, #0
 80012ac:	431a      	orrs	r2, r3
 80012ae:	e69f      	b.n	8000ff0 <__aeabi_dadd+0x1c0>
 80012b0:	2e00      	cmp	r6, #0
 80012b2:	d130      	bne.n	8001316 <__aeabi_dadd+0x4e6>
 80012b4:	0026      	movs	r6, r4
 80012b6:	433e      	orrs	r6, r7
 80012b8:	d067      	beq.n	800138a <__aeabi_dadd+0x55a>
 80012ba:	43db      	mvns	r3, r3
 80012bc:	469a      	mov	sl, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d01c      	beq.n	80012fc <__aeabi_dadd+0x4cc>
 80012c2:	4e61      	ldr	r6, [pc, #388]	; (8001448 <__aeabi_dadd+0x618>)
 80012c4:	42b0      	cmp	r0, r6
 80012c6:	d060      	beq.n	800138a <__aeabi_dadd+0x55a>
 80012c8:	4653      	mov	r3, sl
 80012ca:	2b38      	cmp	r3, #56	; 0x38
 80012cc:	dd00      	ble.n	80012d0 <__aeabi_dadd+0x4a0>
 80012ce:	e096      	b.n	80013fe <__aeabi_dadd+0x5ce>
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0x4a6>
 80012d4:	e09f      	b.n	8001416 <__aeabi_dadd+0x5e6>
 80012d6:	2620      	movs	r6, #32
 80012d8:	1af3      	subs	r3, r6, r3
 80012da:	0026      	movs	r6, r4
 80012dc:	409e      	lsls	r6, r3
 80012de:	469c      	mov	ip, r3
 80012e0:	46b3      	mov	fp, r6
 80012e2:	4653      	mov	r3, sl
 80012e4:	003e      	movs	r6, r7
 80012e6:	40de      	lsrs	r6, r3
 80012e8:	0033      	movs	r3, r6
 80012ea:	465e      	mov	r6, fp
 80012ec:	431e      	orrs	r6, r3
 80012ee:	4663      	mov	r3, ip
 80012f0:	409f      	lsls	r7, r3
 80012f2:	1e7b      	subs	r3, r7, #1
 80012f4:	419f      	sbcs	r7, r3
 80012f6:	4653      	mov	r3, sl
 80012f8:	40dc      	lsrs	r4, r3
 80012fa:	4337      	orrs	r7, r6
 80012fc:	18bf      	adds	r7, r7, r2
 80012fe:	4297      	cmp	r7, r2
 8001300:	4192      	sbcs	r2, r2
 8001302:	1864      	adds	r4, r4, r1
 8001304:	4252      	negs	r2, r2
 8001306:	18a4      	adds	r4, r4, r2
 8001308:	0006      	movs	r6, r0
 800130a:	e678      	b.n	8000ffe <__aeabi_dadd+0x1ce>
 800130c:	4327      	orrs	r7, r4
 800130e:	1e7c      	subs	r4, r7, #1
 8001310:	41a7      	sbcs	r7, r4
 8001312:	2400      	movs	r4, #0
 8001314:	e737      	b.n	8001186 <__aeabi_dadd+0x356>
 8001316:	4e4c      	ldr	r6, [pc, #304]	; (8001448 <__aeabi_dadd+0x618>)
 8001318:	42b0      	cmp	r0, r6
 800131a:	d036      	beq.n	800138a <__aeabi_dadd+0x55a>
 800131c:	2680      	movs	r6, #128	; 0x80
 800131e:	425b      	negs	r3, r3
 8001320:	0436      	lsls	r6, r6, #16
 8001322:	469a      	mov	sl, r3
 8001324:	4334      	orrs	r4, r6
 8001326:	e7cf      	b.n	80012c8 <__aeabi_dadd+0x498>
 8001328:	0018      	movs	r0, r3
 800132a:	4310      	orrs	r0, r2
 800132c:	d100      	bne.n	8001330 <__aeabi_dadd+0x500>
 800132e:	e603      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001330:	1ab8      	subs	r0, r7, r2
 8001332:	4684      	mov	ip, r0
 8001334:	4567      	cmp	r7, ip
 8001336:	41ad      	sbcs	r5, r5
 8001338:	1ae0      	subs	r0, r4, r3
 800133a:	426d      	negs	r5, r5
 800133c:	1b40      	subs	r0, r0, r5
 800133e:	0205      	lsls	r5, r0, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_dadd+0x514>
 8001342:	e62c      	b.n	8000f9e <__aeabi_dadd+0x16e>
 8001344:	1bd7      	subs	r7, r2, r7
 8001346:	42ba      	cmp	r2, r7
 8001348:	4192      	sbcs	r2, r2
 800134a:	1b1c      	subs	r4, r3, r4
 800134c:	4252      	negs	r2, r2
 800134e:	1aa4      	subs	r4, r4, r2
 8001350:	46d8      	mov	r8, fp
 8001352:	e5f1      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001354:	0018      	movs	r0, r3
 8001356:	4310      	orrs	r0, r2
 8001358:	d100      	bne.n	800135c <__aeabi_dadd+0x52c>
 800135a:	e763      	b.n	8001224 <__aeabi_dadd+0x3f4>
 800135c:	08f8      	lsrs	r0, r7, #3
 800135e:	0767      	lsls	r7, r4, #29
 8001360:	4307      	orrs	r7, r0
 8001362:	2080      	movs	r0, #128	; 0x80
 8001364:	08e4      	lsrs	r4, r4, #3
 8001366:	0300      	lsls	r0, r0, #12
 8001368:	4204      	tst	r4, r0
 800136a:	d008      	beq.n	800137e <__aeabi_dadd+0x54e>
 800136c:	08dd      	lsrs	r5, r3, #3
 800136e:	4205      	tst	r5, r0
 8001370:	d105      	bne.n	800137e <__aeabi_dadd+0x54e>
 8001372:	08d2      	lsrs	r2, r2, #3
 8001374:	0759      	lsls	r1, r3, #29
 8001376:	4311      	orrs	r1, r2
 8001378:	000f      	movs	r7, r1
 800137a:	002c      	movs	r4, r5
 800137c:	46d8      	mov	r8, fp
 800137e:	0f7b      	lsrs	r3, r7, #29
 8001380:	00e4      	lsls	r4, r4, #3
 8001382:	431c      	orrs	r4, r3
 8001384:	00ff      	lsls	r7, r7, #3
 8001386:	4e30      	ldr	r6, [pc, #192]	; (8001448 <__aeabi_dadd+0x618>)
 8001388:	e5d6      	b.n	8000f38 <__aeabi_dadd+0x108>
 800138a:	000c      	movs	r4, r1
 800138c:	0017      	movs	r7, r2
 800138e:	0006      	movs	r6, r0
 8001390:	e5d2      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001392:	2b00      	cmp	r3, #0
 8001394:	d038      	beq.n	8001408 <__aeabi_dadd+0x5d8>
 8001396:	000b      	movs	r3, r1
 8001398:	4313      	orrs	r3, r2
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x56e>
 800139c:	e742      	b.n	8001224 <__aeabi_dadd+0x3f4>
 800139e:	08f8      	lsrs	r0, r7, #3
 80013a0:	0767      	lsls	r7, r4, #29
 80013a2:	4307      	orrs	r7, r0
 80013a4:	2080      	movs	r0, #128	; 0x80
 80013a6:	08e4      	lsrs	r4, r4, #3
 80013a8:	0300      	lsls	r0, r0, #12
 80013aa:	4204      	tst	r4, r0
 80013ac:	d0e7      	beq.n	800137e <__aeabi_dadd+0x54e>
 80013ae:	08cb      	lsrs	r3, r1, #3
 80013b0:	4203      	tst	r3, r0
 80013b2:	d1e4      	bne.n	800137e <__aeabi_dadd+0x54e>
 80013b4:	08d2      	lsrs	r2, r2, #3
 80013b6:	0749      	lsls	r1, r1, #29
 80013b8:	4311      	orrs	r1, r2
 80013ba:	000f      	movs	r7, r1
 80013bc:	001c      	movs	r4, r3
 80013be:	e7de      	b.n	800137e <__aeabi_dadd+0x54e>
 80013c0:	2700      	movs	r7, #0
 80013c2:	2400      	movs	r4, #0
 80013c4:	e5d5      	b.n	8000f72 <__aeabi_dadd+0x142>
 80013c6:	2100      	movs	r1, #0
 80013c8:	e76b      	b.n	80012a2 <__aeabi_dadd+0x472>
 80013ca:	2500      	movs	r5, #0
 80013cc:	2700      	movs	r7, #0
 80013ce:	e5f3      	b.n	8000fb8 <__aeabi_dadd+0x188>
 80013d0:	464e      	mov	r6, r9
 80013d2:	0025      	movs	r5, r4
 80013d4:	3e20      	subs	r6, #32
 80013d6:	40f5      	lsrs	r5, r6
 80013d8:	464b      	mov	r3, r9
 80013da:	002e      	movs	r6, r5
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d02d      	beq.n	800143c <__aeabi_dadd+0x60c>
 80013e0:	2540      	movs	r5, #64	; 0x40
 80013e2:	1aed      	subs	r5, r5, r3
 80013e4:	40ac      	lsls	r4, r5
 80013e6:	4327      	orrs	r7, r4
 80013e8:	1e7c      	subs	r4, r7, #1
 80013ea:	41a7      	sbcs	r7, r4
 80013ec:	2400      	movs	r4, #0
 80013ee:	4337      	orrs	r7, r6
 80013f0:	e6c9      	b.n	8001186 <__aeabi_dadd+0x356>
 80013f2:	2480      	movs	r4, #128	; 0x80
 80013f4:	2500      	movs	r5, #0
 80013f6:	0324      	lsls	r4, r4, #12
 80013f8:	4e13      	ldr	r6, [pc, #76]	; (8001448 <__aeabi_dadd+0x618>)
 80013fa:	2700      	movs	r7, #0
 80013fc:	e5dc      	b.n	8000fb8 <__aeabi_dadd+0x188>
 80013fe:	4327      	orrs	r7, r4
 8001400:	1e7c      	subs	r4, r7, #1
 8001402:	41a7      	sbcs	r7, r4
 8001404:	2400      	movs	r4, #0
 8001406:	e779      	b.n	80012fc <__aeabi_dadd+0x4cc>
 8001408:	000c      	movs	r4, r1
 800140a:	0017      	movs	r7, r2
 800140c:	4e0e      	ldr	r6, [pc, #56]	; (8001448 <__aeabi_dadd+0x618>)
 800140e:	e593      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001410:	000c      	movs	r4, r1
 8001412:	0017      	movs	r7, r2
 8001414:	e590      	b.n	8000f38 <__aeabi_dadd+0x108>
 8001416:	4656      	mov	r6, sl
 8001418:	0023      	movs	r3, r4
 800141a:	3e20      	subs	r6, #32
 800141c:	40f3      	lsrs	r3, r6
 800141e:	4699      	mov	r9, r3
 8001420:	4653      	mov	r3, sl
 8001422:	2b20      	cmp	r3, #32
 8001424:	d00e      	beq.n	8001444 <__aeabi_dadd+0x614>
 8001426:	2340      	movs	r3, #64	; 0x40
 8001428:	4656      	mov	r6, sl
 800142a:	1b9b      	subs	r3, r3, r6
 800142c:	409c      	lsls	r4, r3
 800142e:	4327      	orrs	r7, r4
 8001430:	1e7c      	subs	r4, r7, #1
 8001432:	41a7      	sbcs	r7, r4
 8001434:	464b      	mov	r3, r9
 8001436:	2400      	movs	r4, #0
 8001438:	431f      	orrs	r7, r3
 800143a:	e75f      	b.n	80012fc <__aeabi_dadd+0x4cc>
 800143c:	2400      	movs	r4, #0
 800143e:	e7d2      	b.n	80013e6 <__aeabi_dadd+0x5b6>
 8001440:	0017      	movs	r7, r2
 8001442:	e5b2      	b.n	8000faa <__aeabi_dadd+0x17a>
 8001444:	2400      	movs	r4, #0
 8001446:	e7f2      	b.n	800142e <__aeabi_dadd+0x5fe>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	ff7fffff 	.word	0xff7fffff

08001450 <__eqdf2>:
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	464f      	mov	r7, r9
 8001454:	4646      	mov	r6, r8
 8001456:	46d6      	mov	lr, sl
 8001458:	005c      	lsls	r4, r3, #1
 800145a:	b5c0      	push	{r6, r7, lr}
 800145c:	031f      	lsls	r7, r3, #12
 800145e:	0fdb      	lsrs	r3, r3, #31
 8001460:	469a      	mov	sl, r3
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <__eqdf2+0x70>)
 8001464:	030e      	lsls	r6, r1, #12
 8001466:	004d      	lsls	r5, r1, #1
 8001468:	4684      	mov	ip, r0
 800146a:	4680      	mov	r8, r0
 800146c:	0b36      	lsrs	r6, r6, #12
 800146e:	0d6d      	lsrs	r5, r5, #21
 8001470:	0fc9      	lsrs	r1, r1, #31
 8001472:	4691      	mov	r9, r2
 8001474:	0b3f      	lsrs	r7, r7, #12
 8001476:	0d64      	lsrs	r4, r4, #21
 8001478:	2001      	movs	r0, #1
 800147a:	429d      	cmp	r5, r3
 800147c:	d008      	beq.n	8001490 <__eqdf2+0x40>
 800147e:	429c      	cmp	r4, r3
 8001480:	d001      	beq.n	8001486 <__eqdf2+0x36>
 8001482:	42a5      	cmp	r5, r4
 8001484:	d00b      	beq.n	800149e <__eqdf2+0x4e>
 8001486:	bc1c      	pop	{r2, r3, r4}
 8001488:	4690      	mov	r8, r2
 800148a:	4699      	mov	r9, r3
 800148c:	46a2      	mov	sl, r4
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	4663      	mov	r3, ip
 8001492:	4333      	orrs	r3, r6
 8001494:	d1f7      	bne.n	8001486 <__eqdf2+0x36>
 8001496:	42ac      	cmp	r4, r5
 8001498:	d1f5      	bne.n	8001486 <__eqdf2+0x36>
 800149a:	433a      	orrs	r2, r7
 800149c:	d1f3      	bne.n	8001486 <__eqdf2+0x36>
 800149e:	2001      	movs	r0, #1
 80014a0:	42be      	cmp	r6, r7
 80014a2:	d1f0      	bne.n	8001486 <__eqdf2+0x36>
 80014a4:	45c8      	cmp	r8, r9
 80014a6:	d1ee      	bne.n	8001486 <__eqdf2+0x36>
 80014a8:	4551      	cmp	r1, sl
 80014aa:	d007      	beq.n	80014bc <__eqdf2+0x6c>
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	d1ea      	bne.n	8001486 <__eqdf2+0x36>
 80014b0:	4663      	mov	r3, ip
 80014b2:	431e      	orrs	r6, r3
 80014b4:	0030      	movs	r0, r6
 80014b6:	1e46      	subs	r6, r0, #1
 80014b8:	41b0      	sbcs	r0, r6
 80014ba:	e7e4      	b.n	8001486 <__eqdf2+0x36>
 80014bc:	2000      	movs	r0, #0
 80014be:	e7e2      	b.n	8001486 <__eqdf2+0x36>
 80014c0:	000007ff 	.word	0x000007ff

080014c4 <__gedf2>:
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	4645      	mov	r5, r8
 80014c8:	46de      	mov	lr, fp
 80014ca:	4657      	mov	r7, sl
 80014cc:	464e      	mov	r6, r9
 80014ce:	b5e0      	push	{r5, r6, r7, lr}
 80014d0:	031f      	lsls	r7, r3, #12
 80014d2:	0b3d      	lsrs	r5, r7, #12
 80014d4:	4f2c      	ldr	r7, [pc, #176]	; (8001588 <__gedf2+0xc4>)
 80014d6:	030e      	lsls	r6, r1, #12
 80014d8:	004c      	lsls	r4, r1, #1
 80014da:	46ab      	mov	fp, r5
 80014dc:	005d      	lsls	r5, r3, #1
 80014de:	4684      	mov	ip, r0
 80014e0:	0b36      	lsrs	r6, r6, #12
 80014e2:	0d64      	lsrs	r4, r4, #21
 80014e4:	0fc9      	lsrs	r1, r1, #31
 80014e6:	4690      	mov	r8, r2
 80014e8:	0d6d      	lsrs	r5, r5, #21
 80014ea:	0fdb      	lsrs	r3, r3, #31
 80014ec:	42bc      	cmp	r4, r7
 80014ee:	d02a      	beq.n	8001546 <__gedf2+0x82>
 80014f0:	4f25      	ldr	r7, [pc, #148]	; (8001588 <__gedf2+0xc4>)
 80014f2:	42bd      	cmp	r5, r7
 80014f4:	d02d      	beq.n	8001552 <__gedf2+0x8e>
 80014f6:	2c00      	cmp	r4, #0
 80014f8:	d10f      	bne.n	800151a <__gedf2+0x56>
 80014fa:	4330      	orrs	r0, r6
 80014fc:	0007      	movs	r7, r0
 80014fe:	4681      	mov	r9, r0
 8001500:	4278      	negs	r0, r7
 8001502:	4178      	adcs	r0, r7
 8001504:	b2c0      	uxtb	r0, r0
 8001506:	2d00      	cmp	r5, #0
 8001508:	d117      	bne.n	800153a <__gedf2+0x76>
 800150a:	465f      	mov	r7, fp
 800150c:	433a      	orrs	r2, r7
 800150e:	d114      	bne.n	800153a <__gedf2+0x76>
 8001510:	464b      	mov	r3, r9
 8001512:	2000      	movs	r0, #0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00a      	beq.n	800152e <__gedf2+0x6a>
 8001518:	e006      	b.n	8001528 <__gedf2+0x64>
 800151a:	2d00      	cmp	r5, #0
 800151c:	d102      	bne.n	8001524 <__gedf2+0x60>
 800151e:	4658      	mov	r0, fp
 8001520:	4302      	orrs	r2, r0
 8001522:	d001      	beq.n	8001528 <__gedf2+0x64>
 8001524:	4299      	cmp	r1, r3
 8001526:	d018      	beq.n	800155a <__gedf2+0x96>
 8001528:	4248      	negs	r0, r1
 800152a:	2101      	movs	r1, #1
 800152c:	4308      	orrs	r0, r1
 800152e:	bc3c      	pop	{r2, r3, r4, r5}
 8001530:	4690      	mov	r8, r2
 8001532:	4699      	mov	r9, r3
 8001534:	46a2      	mov	sl, r4
 8001536:	46ab      	mov	fp, r5
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	2800      	cmp	r0, #0
 800153c:	d0f2      	beq.n	8001524 <__gedf2+0x60>
 800153e:	2001      	movs	r0, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	4318      	orrs	r0, r3
 8001544:	e7f3      	b.n	800152e <__gedf2+0x6a>
 8001546:	0037      	movs	r7, r6
 8001548:	4307      	orrs	r7, r0
 800154a:	d0d1      	beq.n	80014f0 <__gedf2+0x2c>
 800154c:	2002      	movs	r0, #2
 800154e:	4240      	negs	r0, r0
 8001550:	e7ed      	b.n	800152e <__gedf2+0x6a>
 8001552:	465f      	mov	r7, fp
 8001554:	4317      	orrs	r7, r2
 8001556:	d0ce      	beq.n	80014f6 <__gedf2+0x32>
 8001558:	e7f8      	b.n	800154c <__gedf2+0x88>
 800155a:	42ac      	cmp	r4, r5
 800155c:	dce4      	bgt.n	8001528 <__gedf2+0x64>
 800155e:	da03      	bge.n	8001568 <__gedf2+0xa4>
 8001560:	1e48      	subs	r0, r1, #1
 8001562:	2101      	movs	r1, #1
 8001564:	4308      	orrs	r0, r1
 8001566:	e7e2      	b.n	800152e <__gedf2+0x6a>
 8001568:	455e      	cmp	r6, fp
 800156a:	d8dd      	bhi.n	8001528 <__gedf2+0x64>
 800156c:	d006      	beq.n	800157c <__gedf2+0xb8>
 800156e:	2000      	movs	r0, #0
 8001570:	455e      	cmp	r6, fp
 8001572:	d2dc      	bcs.n	800152e <__gedf2+0x6a>
 8001574:	2301      	movs	r3, #1
 8001576:	1e48      	subs	r0, r1, #1
 8001578:	4318      	orrs	r0, r3
 800157a:	e7d8      	b.n	800152e <__gedf2+0x6a>
 800157c:	45c4      	cmp	ip, r8
 800157e:	d8d3      	bhi.n	8001528 <__gedf2+0x64>
 8001580:	2000      	movs	r0, #0
 8001582:	45c4      	cmp	ip, r8
 8001584:	d3f6      	bcc.n	8001574 <__gedf2+0xb0>
 8001586:	e7d2      	b.n	800152e <__gedf2+0x6a>
 8001588:	000007ff 	.word	0x000007ff

0800158c <__ledf2>:
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	464e      	mov	r6, r9
 8001590:	4645      	mov	r5, r8
 8001592:	46de      	mov	lr, fp
 8001594:	4657      	mov	r7, sl
 8001596:	005c      	lsls	r4, r3, #1
 8001598:	b5e0      	push	{r5, r6, r7, lr}
 800159a:	031f      	lsls	r7, r3, #12
 800159c:	0fdb      	lsrs	r3, r3, #31
 800159e:	4699      	mov	r9, r3
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <__ledf2+0xc0>)
 80015a2:	030e      	lsls	r6, r1, #12
 80015a4:	004d      	lsls	r5, r1, #1
 80015a6:	0fc9      	lsrs	r1, r1, #31
 80015a8:	4684      	mov	ip, r0
 80015aa:	0b36      	lsrs	r6, r6, #12
 80015ac:	0d6d      	lsrs	r5, r5, #21
 80015ae:	468b      	mov	fp, r1
 80015b0:	4690      	mov	r8, r2
 80015b2:	0b3f      	lsrs	r7, r7, #12
 80015b4:	0d64      	lsrs	r4, r4, #21
 80015b6:	429d      	cmp	r5, r3
 80015b8:	d020      	beq.n	80015fc <__ledf2+0x70>
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <__ledf2+0xc0>)
 80015bc:	429c      	cmp	r4, r3
 80015be:	d022      	beq.n	8001606 <__ledf2+0x7a>
 80015c0:	2d00      	cmp	r5, #0
 80015c2:	d112      	bne.n	80015ea <__ledf2+0x5e>
 80015c4:	4330      	orrs	r0, r6
 80015c6:	4243      	negs	r3, r0
 80015c8:	4143      	adcs	r3, r0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d01f      	beq.n	8001610 <__ledf2+0x84>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <__ledf2+0x62>
 80015d4:	464b      	mov	r3, r9
 80015d6:	2001      	movs	r0, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	4303      	orrs	r3, r0
 80015dc:	0018      	movs	r0, r3
 80015de:	bc3c      	pop	{r2, r3, r4, r5}
 80015e0:	4690      	mov	r8, r2
 80015e2:	4699      	mov	r9, r3
 80015e4:	46a2      	mov	sl, r4
 80015e6:	46ab      	mov	fp, r5
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	d016      	beq.n	800161c <__ledf2+0x90>
 80015ee:	45cb      	cmp	fp, r9
 80015f0:	d017      	beq.n	8001622 <__ledf2+0x96>
 80015f2:	465b      	mov	r3, fp
 80015f4:	4259      	negs	r1, r3
 80015f6:	2301      	movs	r3, #1
 80015f8:	430b      	orrs	r3, r1
 80015fa:	e7ef      	b.n	80015dc <__ledf2+0x50>
 80015fc:	0031      	movs	r1, r6
 80015fe:	2302      	movs	r3, #2
 8001600:	4301      	orrs	r1, r0
 8001602:	d1eb      	bne.n	80015dc <__ledf2+0x50>
 8001604:	e7d9      	b.n	80015ba <__ledf2+0x2e>
 8001606:	0039      	movs	r1, r7
 8001608:	2302      	movs	r3, #2
 800160a:	4311      	orrs	r1, r2
 800160c:	d1e6      	bne.n	80015dc <__ledf2+0x50>
 800160e:	e7d7      	b.n	80015c0 <__ledf2+0x34>
 8001610:	433a      	orrs	r2, r7
 8001612:	d1dd      	bne.n	80015d0 <__ledf2+0x44>
 8001614:	2300      	movs	r3, #0
 8001616:	2800      	cmp	r0, #0
 8001618:	d0e0      	beq.n	80015dc <__ledf2+0x50>
 800161a:	e7ea      	b.n	80015f2 <__ledf2+0x66>
 800161c:	433a      	orrs	r2, r7
 800161e:	d1e6      	bne.n	80015ee <__ledf2+0x62>
 8001620:	e7e7      	b.n	80015f2 <__ledf2+0x66>
 8001622:	42a5      	cmp	r5, r4
 8001624:	dce5      	bgt.n	80015f2 <__ledf2+0x66>
 8001626:	db05      	blt.n	8001634 <__ledf2+0xa8>
 8001628:	42be      	cmp	r6, r7
 800162a:	d8e2      	bhi.n	80015f2 <__ledf2+0x66>
 800162c:	d007      	beq.n	800163e <__ledf2+0xb2>
 800162e:	2300      	movs	r3, #0
 8001630:	42be      	cmp	r6, r7
 8001632:	d2d3      	bcs.n	80015dc <__ledf2+0x50>
 8001634:	4659      	mov	r1, fp
 8001636:	2301      	movs	r3, #1
 8001638:	3901      	subs	r1, #1
 800163a:	430b      	orrs	r3, r1
 800163c:	e7ce      	b.n	80015dc <__ledf2+0x50>
 800163e:	45c4      	cmp	ip, r8
 8001640:	d8d7      	bhi.n	80015f2 <__ledf2+0x66>
 8001642:	2300      	movs	r3, #0
 8001644:	45c4      	cmp	ip, r8
 8001646:	d3f5      	bcc.n	8001634 <__ledf2+0xa8>
 8001648:	e7c8      	b.n	80015dc <__ledf2+0x50>
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	000007ff 	.word	0x000007ff

08001650 <__aeabi_i2d>:
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	2800      	cmp	r0, #0
 8001654:	d030      	beq.n	80016b8 <__aeabi_i2d+0x68>
 8001656:	17c3      	asrs	r3, r0, #31
 8001658:	18c4      	adds	r4, r0, r3
 800165a:	405c      	eors	r4, r3
 800165c:	0fc5      	lsrs	r5, r0, #31
 800165e:	0020      	movs	r0, r4
 8001660:	f000 f914 	bl	800188c <__clzsi2>
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <__aeabi_i2d+0x74>)
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <__aeabi_i2d+0x78>)
 8001668:	1a1b      	subs	r3, r3, r0
 800166a:	1ad2      	subs	r2, r2, r3
 800166c:	2a1f      	cmp	r2, #31
 800166e:	dd18      	ble.n	80016a2 <__aeabi_i2d+0x52>
 8001670:	4a16      	ldr	r2, [pc, #88]	; (80016cc <__aeabi_i2d+0x7c>)
 8001672:	1ad2      	subs	r2, r2, r3
 8001674:	4094      	lsls	r4, r2
 8001676:	2200      	movs	r2, #0
 8001678:	0324      	lsls	r4, r4, #12
 800167a:	055b      	lsls	r3, r3, #21
 800167c:	0b24      	lsrs	r4, r4, #12
 800167e:	0d5b      	lsrs	r3, r3, #21
 8001680:	2100      	movs	r1, #0
 8001682:	0010      	movs	r0, r2
 8001684:	0324      	lsls	r4, r4, #12
 8001686:	0d0a      	lsrs	r2, r1, #20
 8001688:	0b24      	lsrs	r4, r4, #12
 800168a:	0512      	lsls	r2, r2, #20
 800168c:	4322      	orrs	r2, r4
 800168e:	4c10      	ldr	r4, [pc, #64]	; (80016d0 <__aeabi_i2d+0x80>)
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	4022      	ands	r2, r4
 8001694:	4313      	orrs	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	07ed      	lsls	r5, r5, #31
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	432b      	orrs	r3, r5
 800169e:	0019      	movs	r1, r3
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	0021      	movs	r1, r4
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	210b      	movs	r1, #11
 80016aa:	1a08      	subs	r0, r1, r0
 80016ac:	40c4      	lsrs	r4, r0
 80016ae:	055b      	lsls	r3, r3, #21
 80016b0:	0324      	lsls	r4, r4, #12
 80016b2:	0b24      	lsrs	r4, r4, #12
 80016b4:	0d5b      	lsrs	r3, r3, #21
 80016b6:	e7e3      	b.n	8001680 <__aeabi_i2d+0x30>
 80016b8:	2500      	movs	r5, #0
 80016ba:	2300      	movs	r3, #0
 80016bc:	2400      	movs	r4, #0
 80016be:	2200      	movs	r2, #0
 80016c0:	e7de      	b.n	8001680 <__aeabi_i2d+0x30>
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	0000041e 	.word	0x0000041e
 80016c8:	00000433 	.word	0x00000433
 80016cc:	00000413 	.word	0x00000413
 80016d0:	800fffff 	.word	0x800fffff

080016d4 <__aeabi_f2d>:
 80016d4:	0041      	lsls	r1, r0, #1
 80016d6:	0e09      	lsrs	r1, r1, #24
 80016d8:	1c4b      	adds	r3, r1, #1
 80016da:	b570      	push	{r4, r5, r6, lr}
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	0246      	lsls	r6, r0, #9
 80016e0:	0a75      	lsrs	r5, r6, #9
 80016e2:	0fc4      	lsrs	r4, r0, #31
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	dd14      	ble.n	8001712 <__aeabi_f2d+0x3e>
 80016e8:	23e0      	movs	r3, #224	; 0xe0
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	076d      	lsls	r5, r5, #29
 80016ee:	0b36      	lsrs	r6, r6, #12
 80016f0:	18cb      	adds	r3, r1, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	0d0a      	lsrs	r2, r1, #20
 80016f6:	0028      	movs	r0, r5
 80016f8:	0512      	lsls	r2, r2, #20
 80016fa:	4d1c      	ldr	r5, [pc, #112]	; (800176c <__aeabi_f2d+0x98>)
 80016fc:	4332      	orrs	r2, r6
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	402a      	ands	r2, r5
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	4313      	orrs	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	07e4      	lsls	r4, r4, #31
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	4323      	orrs	r3, r4
 800170e:	0019      	movs	r1, r3
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	2900      	cmp	r1, #0
 8001714:	d114      	bne.n	8001740 <__aeabi_f2d+0x6c>
 8001716:	2d00      	cmp	r5, #0
 8001718:	d01e      	beq.n	8001758 <__aeabi_f2d+0x84>
 800171a:	0028      	movs	r0, r5
 800171c:	f000 f8b6 	bl	800188c <__clzsi2>
 8001720:	280a      	cmp	r0, #10
 8001722:	dc1c      	bgt.n	800175e <__aeabi_f2d+0x8a>
 8001724:	230b      	movs	r3, #11
 8001726:	002a      	movs	r2, r5
 8001728:	1a1b      	subs	r3, r3, r0
 800172a:	40da      	lsrs	r2, r3
 800172c:	0003      	movs	r3, r0
 800172e:	3315      	adds	r3, #21
 8001730:	409d      	lsls	r5, r3
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <__aeabi_f2d+0x9c>)
 8001734:	0312      	lsls	r2, r2, #12
 8001736:	1a1b      	subs	r3, r3, r0
 8001738:	055b      	lsls	r3, r3, #21
 800173a:	0b16      	lsrs	r6, r2, #12
 800173c:	0d5b      	lsrs	r3, r3, #21
 800173e:	e7d8      	b.n	80016f2 <__aeabi_f2d+0x1e>
 8001740:	2d00      	cmp	r5, #0
 8001742:	d006      	beq.n	8001752 <__aeabi_f2d+0x7e>
 8001744:	0b32      	lsrs	r2, r6, #12
 8001746:	2680      	movs	r6, #128	; 0x80
 8001748:	0336      	lsls	r6, r6, #12
 800174a:	076d      	lsls	r5, r5, #29
 800174c:	4316      	orrs	r6, r2
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <__aeabi_f2d+0xa0>)
 8001750:	e7cf      	b.n	80016f2 <__aeabi_f2d+0x1e>
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <__aeabi_f2d+0xa0>)
 8001754:	2600      	movs	r6, #0
 8001756:	e7cc      	b.n	80016f2 <__aeabi_f2d+0x1e>
 8001758:	2300      	movs	r3, #0
 800175a:	2600      	movs	r6, #0
 800175c:	e7c9      	b.n	80016f2 <__aeabi_f2d+0x1e>
 800175e:	0003      	movs	r3, r0
 8001760:	002a      	movs	r2, r5
 8001762:	3b0b      	subs	r3, #11
 8001764:	409a      	lsls	r2, r3
 8001766:	2500      	movs	r5, #0
 8001768:	e7e3      	b.n	8001732 <__aeabi_f2d+0x5e>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	800fffff 	.word	0x800fffff
 8001770:	00000389 	.word	0x00000389
 8001774:	000007ff 	.word	0x000007ff

08001778 <__aeabi_d2f>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	004c      	lsls	r4, r1, #1
 800177c:	0d64      	lsrs	r4, r4, #21
 800177e:	030b      	lsls	r3, r1, #12
 8001780:	1c62      	adds	r2, r4, #1
 8001782:	0f45      	lsrs	r5, r0, #29
 8001784:	0a5b      	lsrs	r3, r3, #9
 8001786:	0552      	lsls	r2, r2, #21
 8001788:	432b      	orrs	r3, r5
 800178a:	0fc9      	lsrs	r1, r1, #31
 800178c:	00c5      	lsls	r5, r0, #3
 800178e:	0d52      	lsrs	r2, r2, #21
 8001790:	2a01      	cmp	r2, #1
 8001792:	dd28      	ble.n	80017e6 <__aeabi_d2f+0x6e>
 8001794:	4a3a      	ldr	r2, [pc, #232]	; (8001880 <__aeabi_d2f+0x108>)
 8001796:	18a6      	adds	r6, r4, r2
 8001798:	2efe      	cmp	r6, #254	; 0xfe
 800179a:	dc1b      	bgt.n	80017d4 <__aeabi_d2f+0x5c>
 800179c:	2e00      	cmp	r6, #0
 800179e:	dd3e      	ble.n	800181e <__aeabi_d2f+0xa6>
 80017a0:	0180      	lsls	r0, r0, #6
 80017a2:	0002      	movs	r2, r0
 80017a4:	1e50      	subs	r0, r2, #1
 80017a6:	4182      	sbcs	r2, r0
 80017a8:	0f6d      	lsrs	r5, r5, #29
 80017aa:	432a      	orrs	r2, r5
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	075a      	lsls	r2, r3, #29
 80017b2:	d004      	beq.n	80017be <__aeabi_d2f+0x46>
 80017b4:	220f      	movs	r2, #15
 80017b6:	401a      	ands	r2, r3
 80017b8:	2a04      	cmp	r2, #4
 80017ba:	d000      	beq.n	80017be <__aeabi_d2f+0x46>
 80017bc:	3304      	adds	r3, #4
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	04d2      	lsls	r2, r2, #19
 80017c2:	401a      	ands	r2, r3
 80017c4:	d05a      	beq.n	800187c <__aeabi_d2f+0x104>
 80017c6:	3601      	adds	r6, #1
 80017c8:	2eff      	cmp	r6, #255	; 0xff
 80017ca:	d003      	beq.n	80017d4 <__aeabi_d2f+0x5c>
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	0a5b      	lsrs	r3, r3, #9
 80017d0:	b2f4      	uxtb	r4, r6
 80017d2:	e001      	b.n	80017d8 <__aeabi_d2f+0x60>
 80017d4:	24ff      	movs	r4, #255	; 0xff
 80017d6:	2300      	movs	r3, #0
 80017d8:	0258      	lsls	r0, r3, #9
 80017da:	05e4      	lsls	r4, r4, #23
 80017dc:	0a40      	lsrs	r0, r0, #9
 80017de:	07c9      	lsls	r1, r1, #31
 80017e0:	4320      	orrs	r0, r4
 80017e2:	4308      	orrs	r0, r1
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	d007      	beq.n	80017fa <__aeabi_d2f+0x82>
 80017ea:	431d      	orrs	r5, r3
 80017ec:	d0f2      	beq.n	80017d4 <__aeabi_d2f+0x5c>
 80017ee:	2080      	movs	r0, #128	; 0x80
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	0480      	lsls	r0, r0, #18
 80017f4:	4303      	orrs	r3, r0
 80017f6:	26ff      	movs	r6, #255	; 0xff
 80017f8:	e7da      	b.n	80017b0 <__aeabi_d2f+0x38>
 80017fa:	432b      	orrs	r3, r5
 80017fc:	d003      	beq.n	8001806 <__aeabi_d2f+0x8e>
 80017fe:	2305      	movs	r3, #5
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	2cff      	cmp	r4, #255	; 0xff
 8001804:	d003      	beq.n	800180e <__aeabi_d2f+0x96>
 8001806:	025b      	lsls	r3, r3, #9
 8001808:	0a5b      	lsrs	r3, r3, #9
 800180a:	b2e4      	uxtb	r4, r4
 800180c:	e7e4      	b.n	80017d8 <__aeabi_d2f+0x60>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d032      	beq.n	8001878 <__aeabi_d2f+0x100>
 8001812:	2080      	movs	r0, #128	; 0x80
 8001814:	03c0      	lsls	r0, r0, #15
 8001816:	4303      	orrs	r3, r0
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	0a5b      	lsrs	r3, r3, #9
 800181c:	e7dc      	b.n	80017d8 <__aeabi_d2f+0x60>
 800181e:	0032      	movs	r2, r6
 8001820:	3217      	adds	r2, #23
 8001822:	db14      	blt.n	800184e <__aeabi_d2f+0xd6>
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	271e      	movs	r7, #30
 8001828:	0412      	lsls	r2, r2, #16
 800182a:	4313      	orrs	r3, r2
 800182c:	1bbf      	subs	r7, r7, r6
 800182e:	2f1f      	cmp	r7, #31
 8001830:	dc0f      	bgt.n	8001852 <__aeabi_d2f+0xda>
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <__aeabi_d2f+0x10c>)
 8001834:	4694      	mov	ip, r2
 8001836:	4464      	add	r4, ip
 8001838:	002a      	movs	r2, r5
 800183a:	40a5      	lsls	r5, r4
 800183c:	002e      	movs	r6, r5
 800183e:	40a3      	lsls	r3, r4
 8001840:	1e75      	subs	r5, r6, #1
 8001842:	41ae      	sbcs	r6, r5
 8001844:	40fa      	lsrs	r2, r7
 8001846:	4333      	orrs	r3, r6
 8001848:	4313      	orrs	r3, r2
 800184a:	2600      	movs	r6, #0
 800184c:	e7b0      	b.n	80017b0 <__aeabi_d2f+0x38>
 800184e:	2400      	movs	r4, #0
 8001850:	e7d5      	b.n	80017fe <__aeabi_d2f+0x86>
 8001852:	2202      	movs	r2, #2
 8001854:	4252      	negs	r2, r2
 8001856:	1b96      	subs	r6, r2, r6
 8001858:	001a      	movs	r2, r3
 800185a:	40f2      	lsrs	r2, r6
 800185c:	2f20      	cmp	r7, #32
 800185e:	d009      	beq.n	8001874 <__aeabi_d2f+0xfc>
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <__aeabi_d2f+0x110>)
 8001862:	4684      	mov	ip, r0
 8001864:	4464      	add	r4, ip
 8001866:	40a3      	lsls	r3, r4
 8001868:	432b      	orrs	r3, r5
 800186a:	1e5d      	subs	r5, r3, #1
 800186c:	41ab      	sbcs	r3, r5
 800186e:	2600      	movs	r6, #0
 8001870:	4313      	orrs	r3, r2
 8001872:	e79d      	b.n	80017b0 <__aeabi_d2f+0x38>
 8001874:	2300      	movs	r3, #0
 8001876:	e7f7      	b.n	8001868 <__aeabi_d2f+0xf0>
 8001878:	2300      	movs	r3, #0
 800187a:	e7ad      	b.n	80017d8 <__aeabi_d2f+0x60>
 800187c:	0034      	movs	r4, r6
 800187e:	e7bf      	b.n	8001800 <__aeabi_d2f+0x88>
 8001880:	fffffc80 	.word	0xfffffc80
 8001884:	fffffc82 	.word	0xfffffc82
 8001888:	fffffca2 	.word	0xfffffca2

0800188c <__clzsi2>:
 800188c:	211c      	movs	r1, #28
 800188e:	2301      	movs	r3, #1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	4298      	cmp	r0, r3
 8001894:	d301      	bcc.n	800189a <__clzsi2+0xe>
 8001896:	0c00      	lsrs	r0, r0, #16
 8001898:	3910      	subs	r1, #16
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	4298      	cmp	r0, r3
 800189e:	d301      	bcc.n	80018a4 <__clzsi2+0x18>
 80018a0:	0a00      	lsrs	r0, r0, #8
 80018a2:	3908      	subs	r1, #8
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	4298      	cmp	r0, r3
 80018a8:	d301      	bcc.n	80018ae <__clzsi2+0x22>
 80018aa:	0900      	lsrs	r0, r0, #4
 80018ac:	3904      	subs	r1, #4
 80018ae:	a202      	add	r2, pc, #8	; (adr r2, 80018b8 <__clzsi2+0x2c>)
 80018b0:	5c10      	ldrb	r0, [r2, r0]
 80018b2:	1840      	adds	r0, r0, r1
 80018b4:	4770      	bx	lr
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	02020304 	.word	0x02020304
 80018bc:	01010101 	.word	0x01010101
	...

080018c8 <APP_TestApplication>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void APP_TestApplication()
{
 80018c8:	e7fe      	b.n	80018c8 <APP_TestApplication>

080018ca <APP_Init>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void APP_Init(void)
{
 80018ca:	b510      	push	{r4, lr}
	BSP_LEDStart();
 80018cc:	f000 f868 	bl	80019a0 <BSP_LEDStart>
	//BSP_UARTStart();
	//BSP_ADCStart();
	BSP_InitUART();
 80018d0:	f000 f804 	bl	80018dc <BSP_InitUART>
	BSP_PWMStart();
 80018d4:	f000 f86a 	bl	80019ac <BSP_PWMStart>
}
 80018d8:	bd10      	pop	{r4, pc}
	...

080018dc <BSP_InitUART>:

// Global function definitions -----------------------------------------------------------------------------------------

void BSP_InitUART()
{
	CharCount = 0;
 80018dc:	2200      	movs	r2, #0
{
 80018de:	b510      	push	{r4, lr}
	CharCount = 0;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <BSP_InitUART+0x14>)
	HAL_UART_Receive_IT(MAIN_BOARD_UART, &ReceiveBufferUART[CharCount], 1);
 80018e2:	4904      	ldr	r1, [pc, #16]	; (80018f4 <BSP_InitUART+0x18>)
	CharCount = 0;
 80018e4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(MAIN_BOARD_UART, &ReceiveBufferUART[CharCount], 1);
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <BSP_InitUART+0x1c>)
 80018e8:	3201      	adds	r2, #1
 80018ea:	f001 faf3 	bl	8002ed4 <HAL_UART_Receive_IT>
}
 80018ee:	bd10      	pop	{r4, pc}
 80018f0:	20000060 	.word	0x20000060
 80018f4:	20000064 	.word	0x20000064
 80018f8:	2000014c 	.word	0x2000014c

080018fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	if (huart == MAIN_BOARD_UART)
 80018fe:	4e1a      	ldr	r6, [pc, #104]	; (8001968 <HAL_UART_RxCpltCallback+0x6c>)
 8001900:	42b0      	cmp	r0, r6
 8001902:	d126      	bne.n	8001952 <HAL_UART_RxCpltCallback+0x56>
	{
		if (ReceiveBufferUART[CharCount] == '\n')
 8001904:	4d19      	ldr	r5, [pc, #100]	; (800196c <HAL_UART_RxCpltCallback+0x70>)
 8001906:	4c1a      	ldr	r4, [pc, #104]	; (8001970 <HAL_UART_RxCpltCallback+0x74>)
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	5ce2      	ldrb	r2, [r4, r3]
 800190c:	2a0a      	cmp	r2, #10
 800190e:	d128      	bne.n	8001962 <HAL_UART_RxCpltCallback+0x66>
		{

			CharCount = 0;
 8001910:	2000      	movs	r0, #0
	int i = 0;
 8001912:	0001      	movs	r1, r0
			CharCount = 0;
 8001914:	6028      	str	r0, [r5, #0]

			int32_t Converted = 0;
			while(ReceiveBufferUART[i] != '\r' && ReceiveBufferUART[i] != '\n')
 8001916:	5c63      	ldrb	r3, [r4, r1]
 8001918:	2b0d      	cmp	r3, #13
 800191a:	d11b      	bne.n	8001954 <HAL_UART_RxCpltCallback+0x58>
				Converted *= 10;
				Converted += ReceiveBufferUART[i] - '0';
				i++;
			}

			ConvertedDutyCycle = Converted + 0.0;
 800191c:	f7ff fe98 	bl	8001650 <__aeabi_i2d>
 8001920:	2200      	movs	r2, #0
 8001922:	2300      	movs	r3, #0
 8001924:	f7ff fa84 	bl	8000e30 <__aeabi_dadd>
 8001928:	f7ff ff26 	bl	8001778 <__aeabi_d2f>
			ConvertedDutyCycle /= 100;
 800192c:	4911      	ldr	r1, [pc, #68]	; (8001974 <HAL_UART_RxCpltCallback+0x78>)
 800192e:	f7fe fe5b 	bl	80005e8 <__aeabi_fdiv>
 8001932:	4f11      	ldr	r7, [pc, #68]	; (8001978 <HAL_UART_RxCpltCallback+0x7c>)
 8001934:	6038      	str	r0, [r7, #0]

			BSP_SetDutyCycle(&ConvertedDutyCycle);
 8001936:	0038      	movs	r0, r7
 8001938:	f000 f8c0 	bl	8001abc <BSP_SetDutyCycle>
			//BSP_SetLEDHeartbeatBlinkingDutyCyle(&ConvertedDutyCycle);
			HAL_UART_Transmit_IT(MAIN_BOARD_UART, response, 5);
 800193c:	2205      	movs	r2, #5
 800193e:	490f      	ldr	r1, [pc, #60]	; (800197c <HAL_UART_RxCpltCallback+0x80>)
 8001940:	0030      	movs	r0, r6
 8001942:	f001 fa99 	bl	8002e78 <HAL_UART_Transmit_IT>
		else
		{
			CharCount++;
		}

		HAL_UART_Receive_IT(MAIN_BOARD_UART, &ReceiveBufferUART[CharCount], 1);
 8001946:	6829      	ldr	r1, [r5, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	1861      	adds	r1, r4, r1
 800194c:	0030      	movs	r0, r6
 800194e:	f001 fac1 	bl	8002ed4 <HAL_UART_Receive_IT>
	}
}
 8001952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while(ReceiveBufferUART[i] != '\r' && ReceiveBufferUART[i] != '\n')
 8001954:	2b0a      	cmp	r3, #10
 8001956:	d0e1      	beq.n	800191c <HAL_UART_RxCpltCallback+0x20>
				Converted *= 10;
 8001958:	4350      	muls	r0, r2
				Converted += ReceiveBufferUART[i] - '0';
 800195a:	3b30      	subs	r3, #48	; 0x30
 800195c:	1818      	adds	r0, r3, r0
				i++;
 800195e:	3101      	adds	r1, #1
 8001960:	e7d9      	b.n	8001916 <HAL_UART_RxCpltCallback+0x1a>
			CharCount++;
 8001962:	3301      	adds	r3, #1
 8001964:	602b      	str	r3, [r5, #0]
 8001966:	e7ee      	b.n	8001946 <HAL_UART_RxCpltCallback+0x4a>
 8001968:	2000014c 	.word	0x2000014c
 800196c:	20000060 	.word	0x20000060
 8001970:	20000064 	.word	0x20000064
 8001974:	42c80000 	.word	0x42c80000
 8001978:	2000002c 	.word	0x2000002c
 800197c:	20000000 	.word	0x20000000

08001980 <BSP_SetLEDBurstOFF5V>:

// Local (static) function definitions ---------------------------------------------------------------------------------

void BSP_SetLEDBurstOFF5V(void)
{
	 HAL_GPIO_WritePin(BurstOFF5V_GPIO_Port, BurstOFF5V_Pin, GPIO_PIN_SET);
 8001980:	2090      	movs	r0, #144	; 0x90
{
 8001982:	b510      	push	{r4, lr}
	 HAL_GPIO_WritePin(BurstOFF5V_GPIO_Port, BurstOFF5V_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	05c0      	lsls	r0, r0, #23
 800198a:	f000 fbc5 	bl	8002118 <HAL_GPIO_WritePin>
}
 800198e:	bd10      	pop	{r4, pc}

08001990 <BSP_SetLEDBurtsOFF6V>:

void BSP_SetLEDBurtsOFF6V(void)
{
	HAL_GPIO_WritePin(BurstOFF6V_GPIO_Port, BurstOFF6V_Pin, GPIO_PIN_SET);
 8001990:	2090      	movs	r0, #144	; 0x90
{
 8001992:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BurstOFF6V_GPIO_Port, BurstOFF6V_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	05c0      	lsls	r0, r0, #23
 800199a:	f000 fbbd 	bl	8002118 <HAL_GPIO_WritePin>
}
 800199e:	bd10      	pop	{r4, pc}

080019a0 <BSP_LEDStart>:
{
	HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
}

void BSP_LEDStart(void)
{
 80019a0:	b510      	push	{r4, lr}
	BSP_SetLEDBurstOFF5V();
 80019a2:	f7ff ffed 	bl	8001980 <BSP_SetLEDBurstOFF5V>
	BSP_SetLEDBurtsOFF6V();
 80019a6:	f7ff fff3 	bl	8001990 <BSP_SetLEDBurtsOFF6V>
}
 80019aa:	bd10      	pop	{r4, pc}

080019ac <BSP_PWMStart>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void BSP_PWMStart()
{
 80019ac:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 80019ae:	4c0d      	ldr	r4, [pc, #52]	; (80019e4 <BSP_PWMStart+0x38>)
 80019b0:	0020      	movs	r0, r4
 80019b2:	f000 ffbd 	bl	8002930 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PERIOD/2);	//to prevent any impulse on the output by starting
 80019b6:	22fa      	movs	r2, #250	; 0xfa
 80019b8:	6823      	ldr	r3, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PERIOD/2);	//to prevent any impulse on the output by starting
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PERIOD/2);	//to prevent any impulse on the output by starting
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PERIOD/2);	//to prevent any impulse on the output by starting

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019ba:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PERIOD/2);	//to prevent any impulse on the output by starting
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019be:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PERIOD/2);	//to prevent any impulse on the output by starting
 80019c0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PERIOD/2);	//to prevent any impulse on the output by starting
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PERIOD/2);	//to prevent any impulse on the output by starting
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019c6:	f001 f983 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019ca:	2104      	movs	r1, #4
 80019cc:	0020      	movs	r0, r4
 80019ce:	f001 f97f 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019d2:	2108      	movs	r1, #8
 80019d4:	0020      	movs	r0, r4
 80019d6:	f001 f97b 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019da:	210c      	movs	r1, #12
 80019dc:	0020      	movs	r0, r4
 80019de:	f001 f977 	bl	8002cd0 <HAL_TIM_PWM_Start>
}
 80019e2:	bd10      	pop	{r4, pc}
 80019e4:	2000010c 	.word	0x2000010c

080019e8 <BSP_CreateCompareValue>:
	*DutyCycleHalfBridge1 = (DutyCycle + 1) / 2;
	*DutyCycleHalfBridge2 = 1 - *DutyCycleHalfBridge1;
}

void BSP_CreateCompareValue(float* DutyCycleHalfBridge, int32_t* CompareValueHigh, int32_t* CompareValueLow)
{
 80019e8:	b570      	push	{r4, r5, r6, lr}
	if( *DutyCycleHalfBridge < DUTY_CYCLE_HALF_BRIDGE_MAX)		//If the duty cycle of the half-bridge is "normal"
 80019ea:	6804      	ldr	r4, [r0, #0]
{
 80019ec:	0015      	movs	r5, r2
	if( *DutyCycleHalfBridge < DUTY_CYCLE_HALF_BRIDGE_MAX)		//If the duty cycle of the half-bridge is "normal"
 80019ee:	1c20      	adds	r0, r4, #0
{
 80019f0:	000e      	movs	r6, r1
	if( *DutyCycleHalfBridge < DUTY_CYCLE_HALF_BRIDGE_MAX)		//If the duty cycle of the half-bridge is "normal"
 80019f2:	f7ff fe6f 	bl	80016d4 <__aeabi_f2d>
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <BSP_CreateCompareValue+0x60>)
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <BSP_CreateCompareValue+0x64>)
 80019fa:	f7fe fc3b 	bl	8000274 <__aeabi_dcmplt>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d01a      	beq.n	8001a38 <BSP_CreateCompareValue+0x50>
	{
		*CompareValueHigh	= *DutyCycleHalfBridge 		* PERIOD	+ DEADTIME;
 8001a02:	4913      	ldr	r1, [pc, #76]	; (8001a50 <BSP_CreateCompareValue+0x68>)
 8001a04:	1c20      	adds	r0, r4, #0
 8001a06:	f7fe ff37 	bl	8000878 <__aeabi_fmul>
 8001a0a:	2182      	movs	r1, #130	; 0x82
 8001a0c:	05c9      	lsls	r1, r1, #23
 8001a0e:	f7fe fc59 	bl	80002c4 <__aeabi_fadd>
 8001a12:	f7ff f9ed 	bl	8000df0 <__aeabi_f2iz>
 8001a16:	6030      	str	r0, [r6, #0]
		*CompareValueLow	= (1 - *DutyCycleHalfBridge)	* PERIOD	- DEADTIME;
 8001a18:	20fe      	movs	r0, #254	; 0xfe
 8001a1a:	1c21      	adds	r1, r4, #0
 8001a1c:	0580      	lsls	r0, r0, #22
 8001a1e:	f7ff f84b 	bl	8000ab8 <__aeabi_fsub>
 8001a22:	490b      	ldr	r1, [pc, #44]	; (8001a50 <BSP_CreateCompareValue+0x68>)
 8001a24:	f7fe ff28 	bl	8000878 <__aeabi_fmul>
 8001a28:	2182      	movs	r1, #130	; 0x82
 8001a2a:	05c9      	lsls	r1, r1, #23
 8001a2c:	f7ff f844 	bl	8000ab8 <__aeabi_fsub>
 8001a30:	f7ff f9de 	bl	8000df0 <__aeabi_f2iz>
 8001a34:	6028      	str	r0, [r5, #0]
	else	//If the duty cycle of the half - bridge would be to big
	{
		*CompareValueHigh	= DUTY_CYCLE_HALF_BRIDGE_MAX 		* PERIOD	+ DEADTIME;
		*CompareValueLow	= (1 - DUTY_CYCLE_HALF_BRIDGE_MAX)	* PERIOD	- DEADTIME;
	}
}
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
		*CompareValueHigh	= DUTY_CYCLE_HALF_BRIDGE_MAX 		* PERIOD	+ DEADTIME;
 8001a38:	23e4      	movs	r3, #228	; 0xe4
 8001a3a:	33ff      	adds	r3, #255	; 0xff
 8001a3c:	6033      	str	r3, [r6, #0]
		*CompareValueLow	= (1 - DUTY_CYCLE_HALF_BRIDGE_MAX)	* PERIOD	- DEADTIME;
 8001a3e:	3bd3      	subs	r3, #211	; 0xd3
 8001a40:	3bff      	subs	r3, #255	; 0xff
 8001a42:	602b      	str	r3, [r5, #0]
}
 8001a44:	e7f7      	b.n	8001a36 <BSP_CreateCompareValue+0x4e>
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	3fee6666 	.word	0x3fee6666
 8001a50:	43fa0000 	.word	0x43fa0000

08001a54 <BSP_PWMSetCompareRegisters>:
								int32_t* CompareValueHigh2,		//Transistor 3	(because PCB)
								int32_t* CompareValueLow2,		//Transistor 4	(because PCB)
								int32_t* CompareValueHigh1,		//Transistor 1	(because PCB)
								int32_t* CompareValueLow1		//Transistor 2	(because PCB)
							)
{
 8001a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a56:	0007      	movs	r7, r0
 8001a58:	000e      	movs	r6, r1
 8001a5a:	0015      	movs	r5, r2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a5c:	4c16      	ldr	r4, [pc, #88]	; (8001ab8 <BSP_PWMSetCompareRegisters+0x64>)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	0020      	movs	r0, r4
{
 8001a62:	9301      	str	r3, [sp, #4]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a64:	f001 f95a 	bl	8002d1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001a68:	2104      	movs	r1, #4
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f001 f956 	bl	8002d1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001a70:	2108      	movs	r1, #8
 8001a72:	0020      	movs	r0, r4
 8001a74:	f001 f952 	bl	8002d1c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8001a78:	210c      	movs	r1, #12
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f001 f94e 	bl	8002d1c <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, *CompareValueHigh2);		//Transistor 3
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	683a      	ldr	r2, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, *CompareValueLow2);		//Transistor 4
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, *CompareValueHigh1);		//Transistor 1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, *CompareValueLow1);		//Transistor 2

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a84:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, *CompareValueHigh2);		//Transistor 3
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, *CompareValueLow2);		//Transistor 4
 8001a88:	6832      	ldr	r2, [r6, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a8a:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, *CompareValueLow2);		//Transistor 4
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, *CompareValueHigh1);		//Transistor 1
 8001a8e:	682a      	ldr	r2, [r5, #0]
 8001a90:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, *CompareValueLow1);		//Transistor 2
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a98:	f001 f91a 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	0020      	movs	r0, r4
 8001aa0:	f001 f916 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	0020      	movs	r0, r4
 8001aa8:	f001 f912 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001aac:	210c      	movs	r1, #12
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f001 f90e 	bl	8002cd0 <HAL_TIM_PWM_Start>
}
 8001ab4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	2000010c 	.word	0x2000010c

08001abc <BSP_SetDutyCycle>:
	*DutyCycleHalfBridge1 = (DutyCycle + 1) / 2;
 8001abc:	21fe      	movs	r1, #254	; 0xfe

void BSP_SetDutyCycle(float* DutyCycle)
{
 8001abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*DutyCycleHalfBridge1 = (DutyCycle + 1) / 2;
 8001ac0:	6800      	ldr	r0, [r0, #0]
 8001ac2:	0589      	lsls	r1, r1, #22
 8001ac4:	f7fe fbfe 	bl	80002c4 <__aeabi_fadd>
 8001ac8:	21fc      	movs	r1, #252	; 0xfc
 8001aca:	0589      	lsls	r1, r1, #22
 8001acc:	f7fe fed4 	bl	8000878 <__aeabi_fmul>
 8001ad0:	4c0e      	ldr	r4, [pc, #56]	; (8001b0c <BSP_SetDutyCycle+0x50>)
 8001ad2:	1c01      	adds	r1, r0, #0
 8001ad4:	6020      	str	r0, [r4, #0]
	*DutyCycleHalfBridge2 = 1 - *DutyCycleHalfBridge1;
 8001ad6:	20fe      	movs	r0, #254	; 0xfe
 8001ad8:	0580      	lsls	r0, r0, #22
 8001ada:	f7fe ffed 	bl	8000ab8 <__aeabi_fsub>
 8001ade:	4f0c      	ldr	r7, [pc, #48]	; (8001b10 <BSP_SetDutyCycle+0x54>)
	BSP_CreateDutyCycle(*DutyCycle, &DutyCycleHalfBridge1, &DutyCycleHalfBridge2);
	BSP_CreateCompareValue(&DutyCycleHalfBridge1, &CompareValueHigh1, &CompareValueLow1);
 8001ae0:	4e0c      	ldr	r6, [pc, #48]	; (8001b14 <BSP_SetDutyCycle+0x58>)
	*DutyCycleHalfBridge2 = 1 - *DutyCycleHalfBridge1;
 8001ae2:	6038      	str	r0, [r7, #0]
	BSP_CreateCompareValue(&DutyCycleHalfBridge1, &CompareValueHigh1, &CompareValueLow1);
 8001ae4:	0031      	movs	r1, r6
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <BSP_SetDutyCycle+0x5c>)
 8001aea:	f7ff ff7d 	bl	80019e8 <BSP_CreateCompareValue>
	BSP_CreateCompareValue(&DutyCycleHalfBridge2, &CompareValueHigh2, &CompareValueLow2);
 8001aee:	4d0b      	ldr	r5, [pc, #44]	; (8001b1c <BSP_SetDutyCycle+0x60>)
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <BSP_SetDutyCycle+0x64>)
 8001af2:	002a      	movs	r2, r5
 8001af4:	0038      	movs	r0, r7
 8001af6:	0021      	movs	r1, r4
 8001af8:	f7ff ff76 	bl	80019e8 <BSP_CreateCompareValue>
	BSP_PWMSetCompareRegisters	(
 8001afc:	0032      	movs	r2, r6
 8001afe:	0029      	movs	r1, r5
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <BSP_SetDutyCycle+0x5c>)
 8001b02:	0020      	movs	r0, r4
 8001b04:	f7ff ffa6 	bl	8001a54 <BSP_PWMSetCompareRegisters>
								&CompareValueHigh2,
								&CompareValueLow2,
								&CompareValueHigh1,
								&CompareValueLow1
						);
}
 8001b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000050 	.word	0x20000050
 8001b10:	2000005c 	.word	0x2000005c
 8001b14:	20000054 	.word	0x20000054
 8001b18:	2000004c 	.word	0x2000004c
 8001b1c:	20000058 	.word	0x20000058
 8001b20:	20000048 	.word	0x20000048

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001b28:	f000 fda6 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8001b2c:	21fa      	movs	r1, #250	; 0xfa
 8001b2e:	0089      	lsls	r1, r1, #2
 8001b30:	f7fe fafe 	bl	8000130 <__udivsi3>
 8001b34:	f000 f9f0 	bl	8001f18 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	0021      	movs	r1, r4
 8001b3e:	4240      	negs	r0, r0
 8001b40:	f000 f9b0 	bl	8001ea4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001b44:	2000      	movs	r0, #0
 8001b46:	bd10      	pop	{r4, pc}

08001b48 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	2310      	movs	r3, #16
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_Init+0x1c>)
{
 8001b4c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b50:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	f7ff ffe5 	bl	8001b24 <HAL_InitTick>
  HAL_MspInit();
 8001b5a:	f001 fdb9 	bl	80036d0 <HAL_MspInit>
}
 8001b5e:	2000      	movs	r0, #0
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001b68:	4a02      	ldr	r2, [pc, #8]	; (8001b74 <HAL_IncTick+0xc>)
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	4770      	bx	lr
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	2000007c 	.word	0x2000007c

08001b78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b78:	4b01      	ldr	r3, [pc, #4]	; (8001b80 <HAL_GetTick+0x8>)
 8001b7a:	6818      	ldr	r0, [r3, #0]
}
 8001b7c:	4770      	bx	lr
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	2000007c 	.word	0x2000007c

08001b84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001b88:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001b8a:	2c00      	cmp	r4, #0
 8001b8c:	d072      	beq.n	8001c74 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b94:	0022      	movs	r2, r4
 8001b96:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8001b98:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001b9c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001b9e:	f001 fca3 	bl	80034e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ba2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ba4:	06db      	lsls	r3, r3, #27
 8001ba6:	d500      	bpl.n	8001baa <HAL_ADC_Init+0x26>
 8001ba8:	e079      	b.n	8001c9e <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001baa:	2204      	movs	r2, #4
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	6898      	ldr	r0, [r3, #8]
 8001bb0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001bb2:	d000      	beq.n	8001bb6 <HAL_ADC_Init+0x32>
 8001bb4:	e073      	b.n	8001c9e <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001bb8:	4942      	ldr	r1, [pc, #264]	; (8001cc4 <HAL_ADC_Init+0x140>)
 8001bba:	4011      	ands	r1, r2
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001bc0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	2a01      	cmp	r2, #1
 8001bca:	d000      	beq.n	8001bce <HAL_ADC_Init+0x4a>
 8001bcc:	e06d      	b.n	8001caa <HAL_ADC_Init+0x126>
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	4211      	tst	r1, r2
 8001bd2:	d102      	bne.n	8001bda <HAL_ADC_Init+0x56>
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	0412      	lsls	r2, r2, #16
 8001bd8:	d567      	bpl.n	8001caa <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	493a      	ldr	r1, [pc, #232]	; (8001cc8 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001bde:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001be0:	400a      	ands	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001be4:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001be6:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001be8:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001bea:	69e2      	ldr	r2, [r4, #28]
 8001bec:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001bee:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001bf0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	1e56      	subs	r6, r2, #1
 8001bf6:	41b2      	sbcs	r2, r6
 8001bf8:	0316      	lsls	r6, r2, #12
 8001bfa:	68e2      	ldr	r2, [r4, #12]
 8001bfc:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001bfe:	6922      	ldr	r2, [r4, #16]
 8001c00:	430f      	orrs	r7, r1
 8001c02:	2a02      	cmp	r2, #2
 8001c04:	d100      	bne.n	8001c08 <HAL_ADC_Init+0x84>
 8001c06:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001c08:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001c0c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001c0e:	433a      	orrs	r2, r7
 8001c10:	4332      	orrs	r2, r6
 8001c12:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c14:	2901      	cmp	r1, #1
 8001c16:	d104      	bne.n	8001c22 <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c18:	2d00      	cmp	r5, #0
 8001c1a:	d12c      	bne.n	8001c76 <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0249      	lsls	r1, r1, #9
 8001c20:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c22:	20c2      	movs	r0, #194	; 0xc2
 8001c24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c26:	30ff      	adds	r0, #255	; 0xff
 8001c28:	4281      	cmp	r1, r0
 8001c2a:	d002      	beq.n	8001c32 <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c2e:	4301      	orrs	r1, r0
 8001c30:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c32:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c34:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c36:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c3e:	4281      	cmp	r1, r0
 8001c40:	d002      	beq.n	8001c48 <HAL_ADC_Init+0xc4>
 8001c42:	1e48      	subs	r0, r1, #1
 8001c44:	2806      	cmp	r0, #6
 8001c46:	d807      	bhi.n	8001c58 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c48:	2507      	movs	r5, #7
 8001c4a:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c4c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c4e:	43a8      	bics	r0, r5
 8001c50:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c52:	6958      	ldr	r0, [r3, #20]
 8001c54:	4301      	orrs	r1, r0
 8001c56:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	491c      	ldr	r1, [pc, #112]	; (8001ccc <HAL_ADC_Init+0x148>)
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d111      	bne.n	8001c86 <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c64:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001c66:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8001c68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4313      	orrs	r3, r2
 8001c72:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c76:	2020      	movs	r0, #32
 8001c78:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001c7a:	4328      	orrs	r0, r5
 8001c7c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001c80:	4301      	orrs	r1, r0
 8001c82:	64a1      	str	r1, [r4, #72]	; 0x48
 8001c84:	e7cd      	b.n	8001c22 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8001c86:	2212      	movs	r2, #18
 8001c88:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	001a      	movs	r2, r3
 8001c90:	2310      	movs	r3, #16
 8001c92:	4313      	orrs	r3, r2
 8001c94:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c98:	4303      	orrs	r3, r0
 8001c9a:	64a3      	str	r3, [r4, #72]	; 0x48
 8001c9c:	e7ea      	b.n	8001c74 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	6463      	str	r3, [r4, #68]	; 0x44
 8001ca8:	e7e4      	b.n	8001c74 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001caa:	2118      	movs	r1, #24
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	438a      	bics	r2, r1
 8001cb0:	68a1      	ldr	r1, [r4, #8]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	6862      	ldr	r2, [r4, #4]
 8001cba:	0089      	lsls	r1, r1, #2
 8001cbc:	0889      	lsrs	r1, r1, #2
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	6119      	str	r1, [r3, #16]
 8001cc2:	e78a      	b.n	8001bda <HAL_ADC_Init+0x56>
 8001cc4:	fffffefd 	.word	0xfffffefd
 8001cc8:	fffe0219 	.word	0xfffe0219
 8001ccc:	833fffe7 	.word	0x833fffe7

08001cd0 <HAL_ADC_ConvCpltCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_ADC_LevelOutOfWindowCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001cd8:	2204      	movs	r2, #4
 8001cda:	6803      	ldr	r3, [r0, #0]
{
 8001cdc:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001cde:	6819      	ldr	r1, [r3, #0]
{
 8001ce0:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001ce2:	4211      	tst	r1, r2
 8001ce4:	d002      	beq.n	8001cec <HAL_ADC_IRQHandler+0x14>
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	4211      	tst	r1, r2
 8001cea:	d106      	bne.n	8001cfa <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001cec:	2208      	movs	r2, #8
 8001cee:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001cf0:	4211      	tst	r1, r2
 8001cf2:	d028      	beq.n	8001d46 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001cf4:	6859      	ldr	r1, [r3, #4]
 8001cf6:	4211      	tst	r1, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cfc:	06d2      	lsls	r2, r2, #27
 8001cfe:	d404      	bmi.n	8001d0a <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	430a      	orrs	r2, r1
 8001d08:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d0a:	22c0      	movs	r2, #192	; 0xc0
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	4211      	tst	r1, r2
 8001d12:	d112      	bne.n	8001d3a <HAL_ADC_IRQHandler+0x62>
 8001d14:	6a22      	ldr	r2, [r4, #32]
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d10f      	bne.n	8001d3a <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	0712      	lsls	r2, r2, #28
 8001d1e:	d50c      	bpl.n	8001d3a <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	0752      	lsls	r2, r2, #29
 8001d24:	d43c      	bmi.n	8001da0 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d26:	210c      	movs	r1, #12
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001d2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_ADC_IRQHandler+0xdc>)
 8001d32:	401a      	ands	r2, r3
 8001d34:	2301      	movs	r3, #1
 8001d36:	4313      	orrs	r3, r2
 8001d38:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8001d3a:	0020      	movs	r0, r4
 8001d3c:	f7ff ffc8 	bl	8001cd0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001d40:	220c      	movs	r2, #12
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d46:	2580      	movs	r5, #128	; 0x80
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	422a      	tst	r2, r5
 8001d4e:	d00c      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x92>
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	422b      	tst	r3, r5
 8001d54:	d009      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d5a:	025b      	lsls	r3, r3, #9
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d60:	0020      	movs	r0, r4
 8001d62:	f7ff ffb6 	bl	8001cd2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	4211      	tst	r1, r2
 8001d72:	d014      	beq.n	8001d9e <HAL_ADC_IRQHandler+0xc6>
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	4211      	tst	r1, r2
 8001d78:	d011      	beq.n	8001d9e <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001d7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d7c:	2a01      	cmp	r2, #1
 8001d7e:	d002      	beq.n	8001d86 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001d80:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001d82:	07d2      	lsls	r2, r2, #31
 8001d84:	d508      	bpl.n	8001d98 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d86:	2202      	movs	r2, #2
 8001d88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8001d8a:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d90:	2210      	movs	r2, #16
 8001d92:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001d94:	f7ff ff9e 	bl	8001cd4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d98:	2210      	movs	r2, #16
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da0:	2320      	movs	r3, #32
 8001da2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001da4:	4313      	orrs	r3, r2
 8001da6:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	2301      	movs	r3, #1
 8001daa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001dac:	4313      	orrs	r3, r2
 8001dae:	64a3      	str	r3, [r4, #72]	; 0x48
 8001db0:	e7c3      	b.n	8001d3a <HAL_ADC_IRQHandler+0x62>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	fffffefe 	.word	0xfffffefe

08001db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001dba:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dbc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001dbe:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001dc0:	3440      	adds	r4, #64	; 0x40
 8001dc2:	7823      	ldrb	r3, [r4, #0]
{
 8001dc4:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d02b      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0x6c>
 8001dcc:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dce:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dd0:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd2:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8001dd4:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd6:	0740      	lsls	r0, r0, #29
 8001dd8:	d452      	bmi.n	8001e80 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001dda:	482c      	ldr	r0, [pc, #176]	; (8001e8c <HAL_ADC_ConfigChannel+0xd4>)
 8001ddc:	684f      	ldr	r7, [r1, #4]
 8001dde:	680d      	ldr	r5, [r1, #0]
 8001de0:	4287      	cmp	r7, r0
 8001de2:	d03b      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0xa4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001de4:	40ab      	lsls	r3, r5
 8001de6:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001de8:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dea:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dec:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dee:	4338      	orrs	r0, r7
 8001df0:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001df2:	429e      	cmp	r6, r3
 8001df4:	d00f      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x5e>
 8001df6:	3e01      	subs	r6, #1
 8001df8:	2e06      	cmp	r6, #6
 8001dfa:	d90c      	bls.n	8001e16 <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001dfc:	688b      	ldr	r3, [r1, #8]
 8001dfe:	2107      	movs	r1, #7
 8001e00:	6950      	ldr	r0, [r2, #20]
 8001e02:	4008      	ands	r0, r1
 8001e04:	4283      	cmp	r3, r0
 8001e06:	d006      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e08:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e0a:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e0c:	4388      	bics	r0, r1
 8001e0e:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e10:	6950      	ldr	r0, [r2, #20]
 8001e12:	4303      	orrs	r3, r0
 8001e14:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e16:	002b      	movs	r3, r5
 8001e18:	3b10      	subs	r3, #16
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d903      	bls.n	8001e26 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1e:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e20:	2300      	movs	r3, #0
 8001e22:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_ADC_ConfigChannel+0xd8>)
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	2d10      	cmp	r5, #16
 8001e2e:	d013      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0xa0>
 8001e30:	03d2      	lsls	r2, r2, #15
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e36:	2d10      	cmp	r5, #16
 8001e38:	d1f1      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_ADC_ConfigChannel+0xdc>)
 8001e3c:	4916      	ldr	r1, [pc, #88]	; (8001e98 <HAL_ADC_ConfigChannel+0xe0>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f7fe f976 	bl	8000130 <__udivsi3>
 8001e44:	230a      	movs	r3, #10
 8001e46:	4358      	muls	r0, r3
 8001e48:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0e6      	beq.n	8001e1e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001e50:	9b01      	ldr	r3, [sp, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	e7f8      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e58:	0412      	lsls	r2, r2, #16
 8001e5a:	e7ea      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e5c:	40ab      	lsls	r3, r5
 8001e5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e60:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e62:	002b      	movs	r3, r5
 8001e64:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e66:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d8d8      	bhi.n	8001e1e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_ADC_ConfigChannel+0xd8>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2d10      	cmp	r5, #16
 8001e72:	d003      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0xc4>
 8001e74:	4909      	ldr	r1, [pc, #36]	; (8001e9c <HAL_ADC_ConfigChannel+0xe4>)
 8001e76:	400a      	ands	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e7d0      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x66>
 8001e7c:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <HAL_ADC_ConfigChannel+0xe8>)
 8001e7e:	e7fa      	b.n	8001e76 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	2220      	movs	r2, #32
 8001e82:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001e84:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e86:	430a      	orrs	r2, r1
 8001e88:	646a      	str	r2, [r5, #68]	; 0x44
 8001e8a:	e7c9      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x68>
 8001e8c:	00001001 	.word	0x00001001
 8001e90:	40012708 	.word	0x40012708
 8001e94:	2000000c 	.word	0x2000000c
 8001e98:	000f4240 	.word	0x000f4240
 8001e9c:	ffbfffff 	.word	0xffbfffff
 8001ea0:	ff7fffff 	.word	0xff7fffff

08001ea4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	da14      	bge.n	8001ed6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eac:	230f      	movs	r3, #15
 8001eae:	b2c0      	uxtb	r0, r0
 8001eb0:	4003      	ands	r3, r0
 8001eb2:	3b08      	subs	r3, #8
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_NVIC_SetPriority+0x58>)
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4010      	ands	r0, r2
 8001ec0:	4090      	lsls	r0, r2
 8001ec2:	32fc      	adds	r2, #252	; 0xfc
 8001ec4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ec6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ec8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eca:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ecc:	69dc      	ldr	r4, [r3, #28]
 8001ece:	43ac      	bics	r4, r5
 8001ed0:	4321      	orrs	r1, r4
 8001ed2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001ed4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed6:	2503      	movs	r5, #3
 8001ed8:	0883      	lsrs	r3, r0, #2
 8001eda:	4028      	ands	r0, r5
 8001edc:	40a8      	lsls	r0, r5
 8001ede:	35fc      	adds	r5, #252	; 0xfc
 8001ee0:	002e      	movs	r6, r5
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_NVIC_SetPriority+0x5c>)
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	189b      	adds	r3, r3, r2
 8001ee8:	22c0      	movs	r2, #192	; 0xc0
 8001eea:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eec:	4029      	ands	r1, r5
 8001eee:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	589c      	ldr	r4, [r3, r2]
 8001ef4:	43b4      	bics	r4, r6
 8001ef6:	4321      	orrs	r1, r4
 8001ef8:	5099      	str	r1, [r3, r2]
 8001efa:	e7eb      	b.n	8001ed4 <HAL_NVIC_SetPriority+0x30>
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f04:	231f      	movs	r3, #31
 8001f06:	4018      	ands	r0, r3
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	4083      	lsls	r3, r0
 8001f0c:	4a01      	ldr	r2, [pc, #4]	; (8001f14 <HAL_NVIC_EnableIRQ+0x10>)
 8001f0e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f10:	4770      	bx	lr
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_SYSTICK_Config+0x28>)
 8001f1a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d80d      	bhi.n	8001f3e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f22:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f28:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2a:	6a03      	ldr	r3, [r0, #32]
 8001f2c:	0609      	lsls	r1, r1, #24
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	430b      	orrs	r3, r1
 8001f34:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f36:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f38:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f3e:	4770      	bx	lr
 8001f40:	00ffffff 	.word	0x00ffffff
 8001f44:	e000e010 	.word	0xe000e010
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f4e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f50:	2804      	cmp	r0, #4
 8001f52:	d102      	bne.n	8001f5a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f54:	4310      	orrs	r0, r2
 8001f56:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f58:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	e7fa      	b.n	8001f58 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f68:	4770      	bx	lr

08001f6a <HAL_SYSTICK_IRQHandler>:
{
 8001f6a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8001f6c:	f7ff fffc 	bl	8001f68 <HAL_SYSTICK_Callback>
}
 8001f70:	bd10      	pop	{r4, pc}

08001f72 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f72:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f74:	1c84      	adds	r4, r0, #2
 8001f76:	7fe3      	ldrb	r3, [r4, #31]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f80:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f86:	210e      	movs	r1, #14
 8001f88:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f8a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	438a      	bics	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f92:	2201      	movs	r2, #1
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	4391      	bics	r1, r2
 8001f98:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	40a9      	lsls	r1, r5
 8001f9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001fa0:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8001fa8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001faa:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001fae:	42a2      	cmp	r2, r4
 8001fb0:	d0e7      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001fb2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	0023      	movs	r3, r4
 8001fb6:	e7e4      	b.n	8001f82 <HAL_DMA_Abort_IT+0x10>

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fba:	680b      	ldr	r3, [r1, #0]
{ 
 8001fbc:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fbe:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8001fc0:	2300      	movs	r3, #0
{ 
 8001fc2:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fc4:	9a02      	ldr	r2, [sp, #8]
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8001fca:	b007      	add	sp, #28
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	9203      	str	r2, [sp, #12]
 8001fd4:	9903      	ldr	r1, [sp, #12]
 8001fd6:	9a02      	ldr	r2, [sp, #8]
 8001fd8:	400a      	ands	r2, r1
 8001fda:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8001fdc:	d100      	bne.n	8001fe0 <HAL_GPIO_Init+0x28>
 8001fde:	e08c      	b.n	80020fa <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001fe0:	9a01      	ldr	r2, [sp, #4]
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	6852      	ldr	r2, [r2, #4]
 8001fe6:	0016      	movs	r6, r2
 8001fe8:	438e      	bics	r6, r1
 8001fea:	2e02      	cmp	r6, #2
 8001fec:	d10e      	bne.n	800200c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001fee:	2507      	movs	r5, #7
 8001ff0:	401d      	ands	r5, r3
 8001ff2:	00ad      	lsls	r5, r5, #2
 8001ff4:	3901      	subs	r1, #1
 8001ff6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8001ff8:	08dc      	lsrs	r4, r3, #3
 8001ffa:	00a4      	lsls	r4, r4, #2
 8001ffc:	1904      	adds	r4, r0, r4
 8001ffe:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002000:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002002:	9901      	ldr	r1, [sp, #4]
 8002004:	6909      	ldr	r1, [r1, #16]
 8002006:	40a9      	lsls	r1, r5
 8002008:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800200c:	2403      	movs	r4, #3
 800200e:	005f      	lsls	r7, r3, #1
 8002010:	40bc      	lsls	r4, r7
 8002012:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002014:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002018:	4025      	ands	r5, r4
 800201a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	2503      	movs	r5, #3
 800201e:	4015      	ands	r5, r2
 8002020:	40bd      	lsls	r5, r7
 8002022:	4661      	mov	r1, ip
 8002024:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002026:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002028:	2e01      	cmp	r6, #1
 800202a:	d80f      	bhi.n	800204c <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800202c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800202e:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002030:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002032:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002034:	40bd      	lsls	r5, r7
 8002036:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002038:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800203a:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800203c:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800203e:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002040:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002042:	2101      	movs	r1, #1
 8002044:	400d      	ands	r5, r1
 8002046:	409d      	lsls	r5, r3
 8002048:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800204a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800204c:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800204e:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002050:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002052:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002054:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002056:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002058:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800205a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800205c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800205e:	420a      	tst	r2, r1
 8002060:	d04b      	beq.n	80020fa <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	2101      	movs	r1, #1
 8002064:	4c26      	ldr	r4, [pc, #152]	; (8002100 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002066:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002068:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800206a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206c:	430d      	orrs	r5, r1
 800206e:	61a5      	str	r5, [r4, #24]
 8002070:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8002072:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002074:	400c      	ands	r4, r1
 8002076:	9405      	str	r4, [sp, #20]
 8002078:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800207a:	240f      	movs	r4, #15
 800207c:	4921      	ldr	r1, [pc, #132]	; (8002104 <HAL_GPIO_Init+0x14c>)
 800207e:	00ad      	lsls	r5, r5, #2
 8002080:	00b6      	lsls	r6, r6, #2
 8002082:	186d      	adds	r5, r5, r1
 8002084:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8002088:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800208c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	2400      	movs	r4, #0
 8002090:	4288      	cmp	r0, r1
 8002092:	d00c      	beq.n	80020ae <HAL_GPIO_Init+0xf6>
 8002094:	491c      	ldr	r1, [pc, #112]	; (8002108 <HAL_GPIO_Init+0x150>)
 8002096:	3401      	adds	r4, #1
 8002098:	4288      	cmp	r0, r1
 800209a:	d008      	beq.n	80020ae <HAL_GPIO_Init+0xf6>
 800209c:	491b      	ldr	r1, [pc, #108]	; (800210c <HAL_GPIO_Init+0x154>)
 800209e:	3401      	adds	r4, #1
 80020a0:	4288      	cmp	r0, r1
 80020a2:	d004      	beq.n	80020ae <HAL_GPIO_Init+0xf6>
 80020a4:	491a      	ldr	r1, [pc, #104]	; (8002110 <HAL_GPIO_Init+0x158>)
 80020a6:	3403      	adds	r4, #3
 80020a8:	4288      	cmp	r0, r1
 80020aa:	d100      	bne.n	80020ae <HAL_GPIO_Init+0xf6>
 80020ac:	3c02      	subs	r4, #2
 80020ae:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020b0:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80020b4:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80020b6:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80020b8:	4c16      	ldr	r4, [pc, #88]	; (8002114 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020ba:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80020bc:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80020be:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	03d1      	lsls	r1, r2, #15
 80020c2:	d401      	bmi.n	80020c8 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020c4:	003e      	movs	r6, r7
 80020c6:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80020c8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80020ca:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80020cc:	9e00      	ldr	r6, [sp, #0]
 80020ce:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d0:	0391      	lsls	r1, r2, #14
 80020d2:	d401      	bmi.n	80020d8 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80020d4:	003e      	movs	r6, r7
 80020d6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80020d8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80020da:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80020dc:	9e00      	ldr	r6, [sp, #0]
 80020de:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e0:	02d1      	lsls	r1, r2, #11
 80020e2:	d401      	bmi.n	80020e8 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80020e4:	003e      	movs	r6, r7
 80020e6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80020e8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80020ea:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80020ec:	9f00      	ldr	r7, [sp, #0]
 80020ee:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	0292      	lsls	r2, r2, #10
 80020f2:	d401      	bmi.n	80020f8 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80020f4:	402e      	ands	r6, r5
 80020f6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80020f8:	60e7      	str	r7, [r4, #12]
    position++;
 80020fa:	3301      	adds	r3, #1
 80020fc:	e762      	b.n	8001fc4 <HAL_GPIO_Init+0xc>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	48000400 	.word	0x48000400
 800210c:	48000800 	.word	0x48000800
 8002110:	48000c00 	.word	0x48000c00
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002118:	2a00      	cmp	r2, #0
 800211a:	d001      	beq.n	8002120 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800211c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800211e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002120:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002122:	e7fc      	b.n	800211e <HAL_GPIO_WritePin+0x6>

08002124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	6803      	ldr	r3, [r0, #0]
{
 8002128:	b085      	sub	sp, #20
 800212a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212c:	07db      	lsls	r3, r3, #31
 800212e:	d42f      	bmi.n	8002190 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	079b      	lsls	r3, r3, #30
 8002134:	d500      	bpl.n	8002138 <HAL_RCC_OscConfig+0x14>
 8002136:	e081      	b.n	800223c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002138:	682b      	ldr	r3, [r5, #0]
 800213a:	071b      	lsls	r3, r3, #28
 800213c:	d500      	bpl.n	8002140 <HAL_RCC_OscConfig+0x1c>
 800213e:	e0bc      	b.n	80022ba <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	075b      	lsls	r3, r3, #29
 8002144:	d500      	bpl.n	8002148 <HAL_RCC_OscConfig+0x24>
 8002146:	e0df      	b.n	8002308 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	06db      	lsls	r3, r3, #27
 800214c:	d51a      	bpl.n	8002184 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800214e:	696a      	ldr	r2, [r5, #20]
 8002150:	4cb5      	ldr	r4, [pc, #724]	; (8002428 <HAL_RCC_OscConfig+0x304>)
 8002152:	2304      	movs	r3, #4
 8002154:	2a01      	cmp	r2, #1
 8002156:	d000      	beq.n	800215a <HAL_RCC_OscConfig+0x36>
 8002158:	e14b      	b.n	80023f2 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800215a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800215c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800215e:	430b      	orrs	r3, r1
 8002160:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002164:	431a      	orrs	r2, r3
 8002166:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002168:	f7ff fd06 	bl	8001b78 <HAL_GetTick>
 800216c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800216e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002170:	4233      	tst	r3, r6
 8002172:	d100      	bne.n	8002176 <HAL_RCC_OscConfig+0x52>
 8002174:	e136      	b.n	80023e4 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002176:	21f8      	movs	r1, #248	; 0xf8
 8002178:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800217a:	69ab      	ldr	r3, [r5, #24]
 800217c:	438a      	bics	r2, r1
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4313      	orrs	r3, r2
 8002182:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	6a29      	ldr	r1, [r5, #32]
 8002186:	2900      	cmp	r1, #0
 8002188:	d000      	beq.n	800218c <HAL_RCC_OscConfig+0x68>
 800218a:	e159      	b.n	8002440 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800218c:	2000      	movs	r0, #0
 800218e:	e013      	b.n	80021b8 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002190:	210c      	movs	r1, #12
 8002192:	4ca5      	ldr	r4, [pc, #660]	; (8002428 <HAL_RCC_OscConfig+0x304>)
 8002194:	6862      	ldr	r2, [r4, #4]
 8002196:	400a      	ands	r2, r1
 8002198:	2a04      	cmp	r2, #4
 800219a:	d006      	beq.n	80021aa <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	400b      	ands	r3, r1
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x98>
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	03db      	lsls	r3, r3, #15
 80021a8:	d508      	bpl.n	80021bc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	039b      	lsls	r3, r3, #14
 80021ae:	d5bf      	bpl.n	8002130 <HAL_RCC_OscConfig+0xc>
 80021b0:	686b      	ldr	r3, [r5, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1bc      	bne.n	8002130 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
}
 80021b8:	b005      	add	sp, #20
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	686b      	ldr	r3, [r5, #4]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d113      	bne.n	80021ea <HAL_RCC_OscConfig+0xc6>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	4313      	orrs	r3, r2
 80021ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021cc:	f7ff fcd4 	bl	8001b78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80021d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d4:	02b6      	lsls	r6, r6, #10
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	4233      	tst	r3, r6
 80021da:	d1a9      	bne.n	8002130 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fccc 	bl	8001b78 <HAL_GetTick>
 80021e0:	1bc0      	subs	r0, r0, r7
 80021e2:	2864      	cmp	r0, #100	; 0x64
 80021e4:	d9f7      	bls.n	80021d6 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80021e6:	2003      	movs	r0, #3
 80021e8:	e7e6      	b.n	80021b8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0xf8>
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	4a8e      	ldr	r2, [pc, #568]	; (800242c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f4:	4013      	ands	r3, r2
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	4a8d      	ldr	r2, [pc, #564]	; (8002430 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fc:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	4013      	ands	r3, r2
 8002200:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002202:	f7ff fcb9 	bl	8001b78 <HAL_GetTick>
 8002206:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	4233      	tst	r3, r6
 800220c:	d100      	bne.n	8002210 <HAL_RCC_OscConfig+0xec>
 800220e:	e78f      	b.n	8002130 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fcb2 	bl	8001b78 <HAL_GetTick>
 8002214:	1bc0      	subs	r0, r0, r7
 8002216:	2864      	cmp	r0, #100	; 0x64
 8002218:	d9f6      	bls.n	8002208 <HAL_RCC_OscConfig+0xe4>
 800221a:	e7e4      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	2b05      	cmp	r3, #5
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x108>
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	02db      	lsls	r3, r3, #11
 8002226:	4313      	orrs	r3, r2
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	e7ca      	b.n	80021c2 <HAL_RCC_OscConfig+0x9e>
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	4a7f      	ldr	r2, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x308>)
 8002230:	4013      	ands	r3, r2
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	4a7e      	ldr	r2, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x30c>)
 8002238:	4013      	ands	r3, r2
 800223a:	e7c6      	b.n	80021ca <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800223c:	220c      	movs	r2, #12
 800223e:	4c7a      	ldr	r4, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x304>)
 8002240:	6863      	ldr	r3, [r4, #4]
 8002242:	4213      	tst	r3, r2
 8002244:	d006      	beq.n	8002254 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	4013      	ands	r3, r2
 800224a:	2b08      	cmp	r3, #8
 800224c:	d110      	bne.n	8002270 <HAL_RCC_OscConfig+0x14c>
 800224e:	6863      	ldr	r3, [r4, #4]
 8002250:	03db      	lsls	r3, r3, #15
 8002252:	d40d      	bmi.n	8002270 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	079b      	lsls	r3, r3, #30
 8002258:	d502      	bpl.n	8002260 <HAL_RCC_OscConfig+0x13c>
 800225a:	68eb      	ldr	r3, [r5, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d1aa      	bne.n	80021b6 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	21f8      	movs	r1, #248	; 0xf8
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	692b      	ldr	r3, [r5, #16]
 8002266:	438a      	bics	r2, r1
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4313      	orrs	r3, r2
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	e763      	b.n	8002138 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	68ea      	ldr	r2, [r5, #12]
 8002272:	2301      	movs	r3, #1
 8002274:	2a00      	cmp	r2, #0
 8002276:	d00f      	beq.n	8002298 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8002278:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800227c:	4313      	orrs	r3, r2
 800227e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002280:	f7ff fc7a 	bl	8001b78 <HAL_GetTick>
 8002284:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	4233      	tst	r3, r6
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff fc74 	bl	8001b78 <HAL_GetTick>
 8002290:	1bc0      	subs	r0, r0, r7
 8002292:	2802      	cmp	r0, #2
 8002294:	d9f7      	bls.n	8002286 <HAL_RCC_OscConfig+0x162>
 8002296:	e7a6      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8002298:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800229c:	439a      	bics	r2, r3
 800229e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc6a 	bl	8001b78 <HAL_GetTick>
 80022a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	4233      	tst	r3, r6
 80022aa:	d100      	bne.n	80022ae <HAL_RCC_OscConfig+0x18a>
 80022ac:	e744      	b.n	8002138 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff fc63 	bl	8001b78 <HAL_GetTick>
 80022b2:	1bc0      	subs	r0, r0, r7
 80022b4:	2802      	cmp	r0, #2
 80022b6:	d9f6      	bls.n	80022a6 <HAL_RCC_OscConfig+0x182>
 80022b8:	e795      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	69ea      	ldr	r2, [r5, #28]
 80022bc:	2301      	movs	r3, #1
 80022be:	4c5a      	ldr	r4, [pc, #360]	; (8002428 <HAL_RCC_OscConfig+0x304>)
 80022c0:	2a00      	cmp	r2, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80022c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80022c8:	4313      	orrs	r3, r2
 80022ca:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80022cc:	f7ff fc54 	bl	8001b78 <HAL_GetTick>
 80022d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022d4:	4233      	tst	r3, r6
 80022d6:	d000      	beq.n	80022da <HAL_RCC_OscConfig+0x1b6>
 80022d8:	e732      	b.n	8002140 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7ff fc4d 	bl	8001b78 <HAL_GetTick>
 80022de:	1bc0      	subs	r0, r0, r7
 80022e0:	2802      	cmp	r0, #2
 80022e2:	d9f6      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1ae>
 80022e4:	e77f      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80022e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80022ea:	439a      	bics	r2, r3
 80022ec:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80022ee:	f7ff fc43 	bl	8001b78 <HAL_GetTick>
 80022f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022f6:	4233      	tst	r3, r6
 80022f8:	d100      	bne.n	80022fc <HAL_RCC_OscConfig+0x1d8>
 80022fa:	e721      	b.n	8002140 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff fc3c 	bl	8001b78 <HAL_GetTick>
 8002300:	1bc0      	subs	r0, r0, r7
 8002302:	2802      	cmp	r0, #2
 8002304:	d9f6      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1d0>
 8002306:	e76e      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002308:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230c:	4c46      	ldr	r4, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x304>)
 800230e:	0552      	lsls	r2, r2, #21
 8002310:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002312:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002314:	4213      	tst	r3, r2
 8002316:	d108      	bne.n	800232a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	69e3      	ldr	r3, [r4, #28]
 800231a:	4313      	orrs	r3, r2
 800231c:	61e3      	str	r3, [r4, #28]
 800231e:	69e3      	ldr	r3, [r4, #28]
 8002320:	4013      	ands	r3, r2
 8002322:	9303      	str	r3, [sp, #12]
 8002324:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	2780      	movs	r7, #128	; 0x80
 800232c:	4e41      	ldr	r6, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x310>)
 800232e:	007f      	lsls	r7, r7, #1
 8002330:	6833      	ldr	r3, [r6, #0]
 8002332:	423b      	tst	r3, r7
 8002334:	d006      	beq.n	8002344 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002336:	68ab      	ldr	r3, [r5, #8]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d113      	bne.n	8002364 <HAL_RCC_OscConfig+0x240>
 800233c:	6a22      	ldr	r2, [r4, #32]
 800233e:	4313      	orrs	r3, r2
 8002340:	6223      	str	r3, [r4, #32]
 8002342:	e030      	b.n	80023a6 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002344:	6833      	ldr	r3, [r6, #0]
 8002346:	433b      	orrs	r3, r7
 8002348:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800234a:	f7ff fc15 	bl	8001b78 <HAL_GetTick>
 800234e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	6833      	ldr	r3, [r6, #0]
 8002352:	423b      	tst	r3, r7
 8002354:	d1ef      	bne.n	8002336 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7ff fc0f 	bl	8001b78 <HAL_GetTick>
 800235a:	9b01      	ldr	r3, [sp, #4]
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	2864      	cmp	r0, #100	; 0x64
 8002360:	d9f6      	bls.n	8002350 <HAL_RCC_OscConfig+0x22c>
 8002362:	e740      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
 8002364:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <HAL_RCC_OscConfig+0x270>
 800236a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236e:	4393      	bics	r3, r2
 8002370:	6223      	str	r3, [r4, #32]
 8002372:	6a23      	ldr	r3, [r4, #32]
 8002374:	3203      	adds	r2, #3
 8002376:	4393      	bics	r3, r2
 8002378:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800237a:	f7ff fbfd 	bl	8001b78 <HAL_GetTick>
 800237e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	6a23      	ldr	r3, [r4, #32]
 8002382:	423b      	tst	r3, r7
 8002384:	d025      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fbf7 	bl	8001b78 <HAL_GetTick>
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_RCC_OscConfig+0x314>)
 800238c:	1b80      	subs	r0, r0, r6
 800238e:	4298      	cmp	r0, r3
 8002390:	d9f6      	bls.n	8002380 <HAL_RCC_OscConfig+0x25c>
 8002392:	e728      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x28c>
 8002398:	6a21      	ldr	r1, [r4, #32]
 800239a:	3b01      	subs	r3, #1
 800239c:	430b      	orrs	r3, r1
 800239e:	6223      	str	r3, [r4, #32]
 80023a0:	6a23      	ldr	r3, [r4, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80023a6:	f7ff fbe7 	bl	8001b78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80023ac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	e00d      	b.n	80023cc <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	6a23      	ldr	r3, [r4, #32]
 80023b2:	4393      	bics	r3, r2
 80023b4:	2204      	movs	r2, #4
 80023b6:	6223      	str	r3, [r4, #32]
 80023b8:	6a23      	ldr	r3, [r4, #32]
 80023ba:	4393      	bics	r3, r2
 80023bc:	e7c0      	b.n	8002340 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff fbdb 	bl	8001b78 <HAL_GetTick>
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x314>)
 80023c4:	1b80      	subs	r0, r0, r6
 80023c6:	4298      	cmp	r0, r3
 80023c8:	d900      	bls.n	80023cc <HAL_RCC_OscConfig+0x2a8>
 80023ca:	e70c      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	6a23      	ldr	r3, [r4, #32]
 80023ce:	423b      	tst	r3, r7
 80023d0:	d0f5      	beq.n	80023be <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 80023d2:	9b00      	ldr	r3, [sp, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d000      	beq.n	80023da <HAL_RCC_OscConfig+0x2b6>
 80023d8:	e6b6      	b.n	8002148 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	69e3      	ldr	r3, [r4, #28]
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_RCC_OscConfig+0x318>)
 80023de:	4013      	ands	r3, r2
 80023e0:	61e3      	str	r3, [r4, #28]
 80023e2:	e6b1      	b.n	8002148 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023e4:	f7ff fbc8 	bl	8001b78 <HAL_GetTick>
 80023e8:	1bc0      	subs	r0, r0, r7
 80023ea:	2802      	cmp	r0, #2
 80023ec:	d800      	bhi.n	80023f0 <HAL_RCC_OscConfig+0x2cc>
 80023ee:	e6be      	b.n	800216e <HAL_RCC_OscConfig+0x4a>
 80023f0:	e6f9      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023f2:	3205      	adds	r2, #5
 80023f4:	d103      	bne.n	80023fe <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80023f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80023f8:	439a      	bics	r2, r3
 80023fa:	6362      	str	r2, [r4, #52]	; 0x34
 80023fc:	e6bb      	b.n	8002176 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80023fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002400:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002402:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002404:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002406:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002408:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800240a:	4393      	bics	r3, r2
 800240c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800240e:	f7ff fbb3 	bl	8001b78 <HAL_GetTick>
 8002412:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002416:	4233      	tst	r3, r6
 8002418:	d100      	bne.n	800241c <HAL_RCC_OscConfig+0x2f8>
 800241a:	e6b3      	b.n	8002184 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800241c:	f7ff fbac 	bl	8001b78 <HAL_GetTick>
 8002420:	1bc0      	subs	r0, r0, r7
 8002422:	2802      	cmp	r0, #2
 8002424:	d9f6      	bls.n	8002414 <HAL_RCC_OscConfig+0x2f0>
 8002426:	e6de      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
 8002428:	40021000 	.word	0x40021000
 800242c:	fffeffff 	.word	0xfffeffff
 8002430:	fffbffff 	.word	0xfffbffff
 8002434:	40007000 	.word	0x40007000
 8002438:	00001388 	.word	0x00001388
 800243c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	220c      	movs	r2, #12
 8002442:	4c26      	ldr	r4, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8002444:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002446:	6863      	ldr	r3, [r4, #4]
 8002448:	4013      	ands	r3, r2
 800244a:	2b08      	cmp	r3, #8
 800244c:	d100      	bne.n	8002450 <HAL_RCC_OscConfig+0x32c>
 800244e:	e6b3      	b.n	80021b8 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_RCC_OscConfig+0x3bc>)
 8002454:	4013      	ands	r3, r2
 8002456:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	2902      	cmp	r1, #2
 800245a:	d12f      	bne.n	80024bc <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 800245c:	f7ff fb8c 	bl	8001b78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002462:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	04b6      	lsls	r6, r6, #18
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	4233      	tst	r3, r6
 800246a:	d121      	bne.n	80024b0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	220f      	movs	r2, #15
 800246e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002470:	4393      	bics	r3, r2
 8002472:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002474:	4313      	orrs	r3, r2
 8002476:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002478:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800247a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800247c:	6862      	ldr	r2, [r4, #4]
 800247e:	430b      	orrs	r3, r1
 8002480:	4918      	ldr	r1, [pc, #96]	; (80024e4 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002482:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	400a      	ands	r2, r1
 8002486:	4313      	orrs	r3, r2
 8002488:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	045b      	lsls	r3, r3, #17
 8002490:	4313      	orrs	r3, r2
 8002492:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002494:	f7ff fb70 	bl	8001b78 <HAL_GetTick>
 8002498:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800249a:	04ad      	lsls	r5, r5, #18
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	422b      	tst	r3, r5
 80024a0:	d000      	beq.n	80024a4 <HAL_RCC_OscConfig+0x380>
 80024a2:	e673      	b.n	800218c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff fb68 	bl	8001b78 <HAL_GetTick>
 80024a8:	1b80      	subs	r0, r0, r6
 80024aa:	2802      	cmp	r0, #2
 80024ac:	d9f6      	bls.n	800249c <HAL_RCC_OscConfig+0x378>
 80024ae:	e69a      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7ff fb62 	bl	8001b78 <HAL_GetTick>
 80024b4:	1bc0      	subs	r0, r0, r7
 80024b6:	2802      	cmp	r0, #2
 80024b8:	d9d5      	bls.n	8002466 <HAL_RCC_OscConfig+0x342>
 80024ba:	e694      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80024bc:	f7ff fb5c 	bl	8001b78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80024c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	04ad      	lsls	r5, r5, #18
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	422b      	tst	r3, r5
 80024ca:	d100      	bne.n	80024ce <HAL_RCC_OscConfig+0x3aa>
 80024cc:	e65e      	b.n	800218c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7ff fb53 	bl	8001b78 <HAL_GetTick>
 80024d2:	1b80      	subs	r0, r0, r6
 80024d4:	2802      	cmp	r0, #2
 80024d6:	d9f6      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3a2>
 80024d8:	e685      	b.n	80021e6 <HAL_RCC_OscConfig+0xc2>
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	40021000 	.word	0x40021000
 80024e0:	feffffff 	.word	0xfeffffff
 80024e4:	ffc2ffff 	.word	0xffc2ffff

080024e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024ea:	4c14      	ldr	r4, [pc, #80]	; (800253c <HAL_RCC_GetSysClockFreq+0x54>)
{
 80024ec:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024ee:	2210      	movs	r2, #16
 80024f0:	0021      	movs	r1, r4
 80024f2:	4668      	mov	r0, sp
 80024f4:	f001 fb2a 	bl	8003b4c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024f8:	0021      	movs	r1, r4
 80024fa:	ad04      	add	r5, sp, #16
 80024fc:	2210      	movs	r2, #16
 80024fe:	3110      	adds	r1, #16
 8002500:	0028      	movs	r0, r5
 8002502:	f001 fb23 	bl	8003b4c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002506:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002508:	4e0d      	ldr	r6, [pc, #52]	; (8002540 <HAL_RCC_GetSysClockFreq+0x58>)
 800250a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	401a      	ands	r2, r3
 800250e:	2a08      	cmp	r2, #8
 8002510:	d111      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002512:	200f      	movs	r0, #15
 8002514:	466a      	mov	r2, sp
 8002516:	0c99      	lsrs	r1, r3, #18
 8002518:	4001      	ands	r1, r0
 800251a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800251c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800251e:	4002      	ands	r2, r0
 8002520:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002522:	03db      	lsls	r3, r3, #15
 8002524:	d505      	bpl.n	8002532 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002526:	4807      	ldr	r0, [pc, #28]	; (8002544 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002528:	f7fd fe02 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800252c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800252e:	b008      	add	sp, #32
 8002530:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_RCC_GetSysClockFreq+0x60>)
 8002534:	e7fa      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002538:	e7f9      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x46>
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	08003b78 	.word	0x08003b78
 8002540:	40021000 	.word	0x40021000
 8002544:	007a1200 	.word	0x007a1200
 8002548:	003d0900 	.word	0x003d0900

0800254c <HAL_RCC_ClockConfig>:
{
 800254c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800254e:	2201      	movs	r2, #1
 8002550:	4c43      	ldr	r4, [pc, #268]	; (8002660 <HAL_RCC_ClockConfig+0x114>)
{
 8002552:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002554:	6823      	ldr	r3, [r4, #0]
{
 8002556:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002558:	4013      	ands	r3, r2
 800255a:	428b      	cmp	r3, r1
 800255c:	d31c      	bcc.n	8002598 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255e:	6832      	ldr	r2, [r6, #0]
 8002560:	0793      	lsls	r3, r2, #30
 8002562:	d423      	bmi.n	80025ac <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002564:	07d3      	lsls	r3, r2, #31
 8002566:	d429      	bmi.n	80025bc <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002568:	2301      	movs	r3, #1
 800256a:	6822      	ldr	r2, [r4, #0]
 800256c:	401a      	ands	r2, r3
 800256e:	4297      	cmp	r7, r2
 8002570:	d367      	bcc.n	8002642 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	6833      	ldr	r3, [r6, #0]
 8002574:	4c3b      	ldr	r4, [pc, #236]	; (8002664 <HAL_RCC_ClockConfig+0x118>)
 8002576:	075b      	lsls	r3, r3, #29
 8002578:	d46a      	bmi.n	8002650 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800257a:	f7ff ffb5 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 800257e:	6863      	ldr	r3, [r4, #4]
 8002580:	4a39      	ldr	r2, [pc, #228]	; (8002668 <HAL_RCC_ClockConfig+0x11c>)
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	0f1b      	lsrs	r3, r3, #28
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	40d8      	lsrs	r0, r3
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_RCC_ClockConfig+0x120>)
 800258c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800258e:	2000      	movs	r0, #0
 8002590:	f7ff fac8 	bl	8001b24 <HAL_InitTick>
  return HAL_OK;
 8002594:	2000      	movs	r0, #0
 8002596:	e008      	b.n	80025aa <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	4393      	bics	r3, r2
 800259c:	430b      	orrs	r3, r1
 800259e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	4013      	ands	r3, r2
 80025a4:	4299      	cmp	r1, r3
 80025a6:	d0da      	beq.n	800255e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
}
 80025aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	20f0      	movs	r0, #240	; 0xf0
 80025ae:	492d      	ldr	r1, [pc, #180]	; (8002664 <HAL_RCC_ClockConfig+0x118>)
 80025b0:	684b      	ldr	r3, [r1, #4]
 80025b2:	4383      	bics	r3, r0
 80025b4:	68b0      	ldr	r0, [r6, #8]
 80025b6:	4303      	orrs	r3, r0
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e7d3      	b.n	8002564 <HAL_RCC_ClockConfig+0x18>
 80025bc:	4d29      	ldr	r5, [pc, #164]	; (8002664 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	2a01      	cmp	r2, #1
 80025c4:	d11a      	bne.n	80025fc <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	d5ee      	bpl.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	2103      	movs	r1, #3
 80025cc:	686b      	ldr	r3, [r5, #4]
 80025ce:	438b      	bics	r3, r1
 80025d0:	4313      	orrs	r3, r2
 80025d2:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80025d4:	f7ff fad0 	bl	8001b78 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80025da:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d115      	bne.n	800260c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	220c      	movs	r2, #12
 80025e2:	686b      	ldr	r3, [r5, #4]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d0be      	beq.n	8002568 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7ff fac5 	bl	8001b78 <HAL_GetTick>
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	1ac0      	subs	r0, r0, r3
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_ClockConfig+0x124>)
 80025f4:	4298      	cmp	r0, r3
 80025f6:	d9f3      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80025f8:	2003      	movs	r0, #3
 80025fa:	e7d6      	b.n	80025aa <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fc:	2a02      	cmp	r2, #2
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	019b      	lsls	r3, r3, #6
 8002602:	d4e2      	bmi.n	80025ca <HAL_RCC_ClockConfig+0x7e>
 8002604:	e7d0      	b.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	079b      	lsls	r3, r3, #30
 8002608:	d4df      	bmi.n	80025ca <HAL_RCC_ClockConfig+0x7e>
 800260a:	e7cd      	b.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260c:	2b02      	cmp	r3, #2
 800260e:	d012      	beq.n	8002636 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002610:	220c      	movs	r2, #12
 8002612:	686b      	ldr	r3, [r5, #4]
 8002614:	4213      	tst	r3, r2
 8002616:	d0a7      	beq.n	8002568 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff faae 	bl	8001b78 <HAL_GetTick>
 800261c:	9b01      	ldr	r3, [sp, #4]
 800261e:	1ac0      	subs	r0, r0, r3
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_RCC_ClockConfig+0x124>)
 8002622:	4298      	cmp	r0, r3
 8002624:	d9f4      	bls.n	8002610 <HAL_RCC_ClockConfig+0xc4>
 8002626:	e7e7      	b.n	80025f8 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff faa6 	bl	8001b78 <HAL_GetTick>
 800262c:	9b01      	ldr	r3, [sp, #4]
 800262e:	1ac0      	subs	r0, r0, r3
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_RCC_ClockConfig+0x124>)
 8002632:	4298      	cmp	r0, r3
 8002634:	d8e0      	bhi.n	80025f8 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002636:	220c      	movs	r2, #12
 8002638:	686b      	ldr	r3, [r5, #4]
 800263a:	4013      	ands	r3, r2
 800263c:	2b08      	cmp	r3, #8
 800263e:	d1f3      	bne.n	8002628 <HAL_RCC_ClockConfig+0xdc>
 8002640:	e792      	b.n	8002568 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	439a      	bics	r2, r3
 8002646:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	421a      	tst	r2, r3
 800264c:	d1ac      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
 800264e:	e790      	b.n	8002572 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_RCC_ClockConfig+0x128>)
 8002654:	4013      	ands	r3, r2
 8002656:	68f2      	ldr	r2, [r6, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	6063      	str	r3, [r4, #4]
 800265c:	e78d      	b.n	800257a <HAL_RCC_ClockConfig+0x2e>
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08003c69 	.word	0x08003c69
 800266c:	2000000c 	.word	0x2000000c
 8002670:	00001388 	.word	0x00001388
 8002674:	fffff8ff 	.word	0xfffff8ff

08002678 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <HAL_RCC_GetHCLKFreq+0x8>)
 800267a:	6818      	ldr	r0, [r3, #0]
}
 800267c:	4770      	bx	lr
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	2000000c 	.word	0x2000000c

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	055b      	lsls	r3, r3, #21
 800268c:	0f5b      	lsrs	r3, r3, #29
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002692:	6810      	ldr	r0, [r2, #0]
 8002694:	40d8      	lsrs	r0, r3
}    
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	08003c79 	.word	0x08003c79
 80026a0:	2000000c 	.word	0x2000000c

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026a6:	6803      	ldr	r3, [r0, #0]
{
 80026a8:	b085      	sub	sp, #20
 80026aa:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ac:	03db      	lsls	r3, r3, #15
 80026ae:	d528      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b4:	4c37      	ldr	r4, [pc, #220]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80026b6:	0552      	lsls	r2, r2, #21
 80026b8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026bc:	4213      	tst	r3, r2
 80026be:	d108      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	69e3      	ldr	r3, [r4, #28]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61e3      	str	r3, [r4, #28]
 80026c6:	69e3      	ldr	r3, [r4, #28]
 80026c8:	4013      	ands	r3, r2
 80026ca:	9303      	str	r3, [sp, #12]
 80026cc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	2780      	movs	r7, #128	; 0x80
 80026d4:	4e30      	ldr	r6, [pc, #192]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80026d6:	007f      	lsls	r7, r7, #1
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	423b      	tst	r3, r7
 80026dc:	d026      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026de:	22c0      	movs	r2, #192	; 0xc0
 80026e0:	6a23      	ldr	r3, [r4, #32]
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	4e2d      	ldr	r6, [pc, #180]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e8:	d132      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ea:	6a23      	ldr	r3, [r4, #32]
 80026ec:	401e      	ands	r6, r3
 80026ee:	686b      	ldr	r3, [r5, #4]
 80026f0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d103      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	69e3      	ldr	r3, [r4, #28]
 80026fc:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80026fe:	4013      	ands	r3, r2
 8002700:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002702:	682a      	ldr	r2, [r5, #0]
 8002704:	07d3      	lsls	r3, r2, #31
 8002706:	d506      	bpl.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002708:	2003      	movs	r0, #3
 800270a:	4922      	ldr	r1, [pc, #136]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800270c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800270e:	4383      	bics	r3, r0
 8002710:	68a8      	ldr	r0, [r5, #8]
 8002712:	4303      	orrs	r3, r0
 8002714:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002716:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002718:	0693      	lsls	r3, r2, #26
 800271a:	d517      	bpl.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800271c:	2110      	movs	r1, #16
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002720:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002722:	438b      	bics	r3, r1
 8002724:	68e9      	ldr	r1, [r5, #12]
 8002726:	430b      	orrs	r3, r1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	e00f      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272c:	6833      	ldr	r3, [r6, #0]
 800272e:	433b      	orrs	r3, r7
 8002730:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002732:	f7ff fa21 	bl	8001b78 <HAL_GetTick>
 8002736:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	6833      	ldr	r3, [r6, #0]
 800273a:	423b      	tst	r3, r7
 800273c:	d1cf      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7ff fa1b 	bl	8001b78 <HAL_GetTick>
 8002742:	9b01      	ldr	r3, [sp, #4]
 8002744:	1ac0      	subs	r0, r0, r3
 8002746:	2864      	cmp	r0, #100	; 0x64
 8002748:	d9f6      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 800274a:	2003      	movs	r0, #3
}
 800274c:	b005      	add	sp, #20
 800274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002750:	6869      	ldr	r1, [r5, #4]
 8002752:	400a      	ands	r2, r1
 8002754:	4293      	cmp	r3, r2
 8002756:	d0c8      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002758:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800275a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800275c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800275e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002760:	025b      	lsls	r3, r3, #9
 8002762:	4303      	orrs	r3, r0
 8002764:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002766:	6a23      	ldr	r3, [r4, #32]
 8002768:	480e      	ldr	r0, [pc, #56]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800276a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276c:	4003      	ands	r3, r0
 800276e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002770:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002772:	07d3      	lsls	r3, r2, #31
 8002774:	d5b9      	bpl.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8002776:	f7ff f9ff 	bl	8001b78 <HAL_GetTick>
 800277a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	2202      	movs	r2, #2
 800277e:	6a23      	ldr	r3, [r4, #32]
 8002780:	4213      	tst	r3, r2
 8002782:	d1b2      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7ff f9f8 	bl	8001b78 <HAL_GetTick>
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800278a:	1bc0      	subs	r0, r0, r7
 800278c:	4298      	cmp	r0, r3
 800278e:	d9f5      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002790:	e7db      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	fffffcff 	.word	0xfffffcff
 80027a0:	efffffff 	.word	0xefffffff
 80027a4:	fffeffff 	.word	0xfffeffff
 80027a8:	00001388 	.word	0x00001388

080027ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ac:	2201      	movs	r2, #1
 80027ae:	6a03      	ldr	r3, [r0, #32]
{
 80027b0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b2:	4393      	bics	r3, r2
 80027b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ba:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027bc:	3272      	adds	r2, #114	; 0x72
 80027be:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c0:	680a      	ldr	r2, [r1, #0]
 80027c2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027c4:	2202      	movs	r2, #2
 80027c6:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027c8:	688a      	ldr	r2, [r1, #8]
 80027ca:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <TIM_OC1_SetConfig+0x74>)
 80027ce:	4290      	cmp	r0, r2
 80027d0:	d008      	beq.n	80027e4 <TIM_OC1_SetConfig+0x38>
 80027d2:	4e14      	ldr	r6, [pc, #80]	; (8002824 <TIM_OC1_SetConfig+0x78>)
 80027d4:	42b0      	cmp	r0, r6
 80027d6:	d005      	beq.n	80027e4 <TIM_OC1_SetConfig+0x38>
 80027d8:	4e13      	ldr	r6, [pc, #76]	; (8002828 <TIM_OC1_SetConfig+0x7c>)
 80027da:	42b0      	cmp	r0, r6
 80027dc:	d002      	beq.n	80027e4 <TIM_OC1_SetConfig+0x38>
 80027de:	4e13      	ldr	r6, [pc, #76]	; (800282c <TIM_OC1_SetConfig+0x80>)
 80027e0:	42b0      	cmp	r0, r6
 80027e2:	d116      	bne.n	8002812 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027e4:	2608      	movs	r6, #8
 80027e6:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027e8:	68ce      	ldr	r6, [r1, #12]
 80027ea:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ec:	2604      	movs	r6, #4
 80027ee:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027f0:	4290      	cmp	r0, r2
 80027f2:	d008      	beq.n	8002806 <TIM_OC1_SetConfig+0x5a>
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <TIM_OC1_SetConfig+0x78>)
 80027f6:	4290      	cmp	r0, r2
 80027f8:	d005      	beq.n	8002806 <TIM_OC1_SetConfig+0x5a>
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <TIM_OC1_SetConfig+0x7c>)
 80027fc:	4290      	cmp	r0, r2
 80027fe:	d002      	beq.n	8002806 <TIM_OC1_SetConfig+0x5a>
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <TIM_OC1_SetConfig+0x80>)
 8002802:	4290      	cmp	r0, r2
 8002804:	d105      	bne.n	8002812 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002808:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800280a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800280c:	694c      	ldr	r4, [r1, #20]
 800280e:	4334      	orrs	r4, r6
 8002810:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002812:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002814:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002816:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002818:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281a:	6203      	str	r3, [r0, #32]
}
 800281c:	bd70      	pop	{r4, r5, r6, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800
 8002830:	fffffcff 	.word	0xfffffcff

08002834 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002836:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002838:	6a03      	ldr	r3, [r0, #32]
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <TIM_OC3_SetConfig+0x64>)
 800283c:	4013      	ands	r3, r2
 800283e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002840:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002842:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002844:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002846:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002848:	680d      	ldr	r5, [r1, #0]
 800284a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800284c:	4d13      	ldr	r5, [pc, #76]	; (800289c <TIM_OC3_SetConfig+0x68>)
 800284e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002850:	688d      	ldr	r5, [r1, #8]
 8002852:	022d      	lsls	r5, r5, #8
 8002854:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002856:	4d12      	ldr	r5, [pc, #72]	; (80028a0 <TIM_OC3_SetConfig+0x6c>)
 8002858:	42a8      	cmp	r0, r5
 800285a:	d10e      	bne.n	800287a <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800285c:	4d11      	ldr	r5, [pc, #68]	; (80028a4 <TIM_OC3_SetConfig+0x70>)
 800285e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002860:	68cb      	ldr	r3, [r1, #12]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002866:	4d10      	ldr	r5, [pc, #64]	; (80028a8 <TIM_OC3_SetConfig+0x74>)
 8002868:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800286a:	4d10      	ldr	r5, [pc, #64]	; (80028ac <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800286c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800286e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002870:	698a      	ldr	r2, [r1, #24]
 8002872:	4332      	orrs	r2, r6
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	432a      	orrs	r2, r5
 8002878:	e008      	b.n	800288c <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800287a:	4d0d      	ldr	r5, [pc, #52]	; (80028b0 <TIM_OC3_SetConfig+0x7c>)
 800287c:	42a8      	cmp	r0, r5
 800287e:	d0f4      	beq.n	800286a <TIM_OC3_SetConfig+0x36>
 8002880:	4d0c      	ldr	r5, [pc, #48]	; (80028b4 <TIM_OC3_SetConfig+0x80>)
 8002882:	42a8      	cmp	r0, r5
 8002884:	d0f1      	beq.n	800286a <TIM_OC3_SetConfig+0x36>
 8002886:	4d0c      	ldr	r5, [pc, #48]	; (80028b8 <TIM_OC3_SetConfig+0x84>)
 8002888:	42a8      	cmp	r0, r5
 800288a:	d0ee      	beq.n	800286a <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800288e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002890:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002892:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002894:	6203      	str	r3, [r0, #32]
}
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	fffffeff 	.word	0xfffffeff
 800289c:	fffffdff 	.word	0xfffffdff
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	fffff7ff 	.word	0xfffff7ff
 80028a8:	fffffbff 	.word	0xfffffbff
 80028ac:	ffffcfff 	.word	0xffffcfff
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40014800 	.word	0x40014800

080028bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028bc:	6a03      	ldr	r3, [r0, #32]
 80028be:	4a14      	ldr	r2, [pc, #80]	; (8002910 <TIM_OC4_SetConfig+0x54>)
{
 80028c0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028c2:	4013      	ands	r3, r2
 80028c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028c8:	4c12      	ldr	r4, [pc, #72]	; (8002914 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80028ca:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80028cc:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028ce:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d0:	680c      	ldr	r4, [r1, #0]
 80028d2:	0224      	lsls	r4, r4, #8
 80028d4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028d6:	4c10      	ldr	r4, [pc, #64]	; (8002918 <TIM_OC4_SetConfig+0x5c>)
 80028d8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028da:	688c      	ldr	r4, [r1, #8]
 80028dc:	0324      	lsls	r4, r4, #12
 80028de:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028e0:	4c0e      	ldr	r4, [pc, #56]	; (800291c <TIM_OC4_SetConfig+0x60>)
 80028e2:	42a0      	cmp	r0, r4
 80028e4:	d008      	beq.n	80028f8 <TIM_OC4_SetConfig+0x3c>
 80028e6:	4c0e      	ldr	r4, [pc, #56]	; (8002920 <TIM_OC4_SetConfig+0x64>)
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	d005      	beq.n	80028f8 <TIM_OC4_SetConfig+0x3c>
 80028ec:	4c0d      	ldr	r4, [pc, #52]	; (8002924 <TIM_OC4_SetConfig+0x68>)
 80028ee:	42a0      	cmp	r0, r4
 80028f0:	d002      	beq.n	80028f8 <TIM_OC4_SetConfig+0x3c>
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <TIM_OC4_SetConfig+0x6c>)
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	d104      	bne.n	8002902 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028f8:	4c0c      	ldr	r4, [pc, #48]	; (800292c <TIM_OC4_SetConfig+0x70>)
 80028fa:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028fc:	694c      	ldr	r4, [r1, #20]
 80028fe:	01a4      	lsls	r4, r4, #6
 8002900:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002902:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002904:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002906:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002908:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290a:	6202      	str	r2, [r0, #32]
}
 800290c:	bd30      	pop	{r4, r5, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	ffffefff 	.word	0xffffefff
 8002914:	ffff8cff 	.word	0xffff8cff
 8002918:	ffffdfff 	.word	0xffffdfff
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40014000 	.word	0x40014000
 8002924:	40014400 	.word	0x40014400
 8002928:	40014800 	.word	0x40014800
 800292c:	ffffbfff 	.word	0xffffbfff

08002930 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8002930:	0002      	movs	r2, r0
 8002932:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8002934:	2101      	movs	r1, #1
 8002936:	6800      	ldr	r0, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002938:	323d      	adds	r2, #61	; 0x3d
 800293a:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 800293c:	6803      	ldr	r3, [r0, #0]
 800293e:	430b      	orrs	r3, r1
 8002940:	6003      	str	r3, [r0, #0]
}
 8002942:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002944:	7011      	strb	r1, [r2, #0]
}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PeriodElapsedCallback>:
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_OC_DelayElapsedCallback>:
 800294a:	4770      	bx	lr

0800294c <HAL_TIM_IC_CaptureCallback>:
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_PWM_PulseFinishedCallback>:
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_TriggerCallback>:
 8002950:	4770      	bx	lr

08002952 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002952:	2202      	movs	r2, #2
 8002954:	6803      	ldr	r3, [r0, #0]
{
 8002956:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002958:	6919      	ldr	r1, [r3, #16]
{
 800295a:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800295c:	4211      	tst	r1, r2
 800295e:	d00e      	beq.n	800297e <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	4211      	tst	r1, r2
 8002964:	d00b      	beq.n	800297e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002966:	3a05      	subs	r2, #5
 8002968:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800296a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296c:	3204      	adds	r2, #4
 800296e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002970:	079b      	lsls	r3, r3, #30
 8002972:	d100      	bne.n	8002976 <HAL_TIM_IRQHandler+0x24>
 8002974:	e079      	b.n	8002a6a <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8002976:	f7ff ffe9 	bl	800294c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	2300      	movs	r3, #0
 800297c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297e:	2204      	movs	r2, #4
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	6919      	ldr	r1, [r3, #16]
 8002984:	4211      	tst	r1, r2
 8002986:	d010      	beq.n	80029aa <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	4211      	tst	r1, r2
 800298c:	d00d      	beq.n	80029aa <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800298e:	3a09      	subs	r2, #9
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002992:	3207      	adds	r2, #7
 8002994:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800299c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299e:	421a      	tst	r2, r3
 80029a0:	d069      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	f7ff ffd3 	bl	800294c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	2300      	movs	r3, #0
 80029a8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029aa:	2208      	movs	r2, #8
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	6919      	ldr	r1, [r3, #16]
 80029b0:	4211      	tst	r1, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	4211      	tst	r1, r2
 80029b8:	d00b      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ba:	3a11      	subs	r2, #17
 80029bc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029be:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c0:	320d      	adds	r2, #13
 80029c2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80029c4:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c6:	079b      	lsls	r3, r3, #30
 80029c8:	d05b      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	f7ff ffbf 	bl	800294c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	2300      	movs	r3, #0
 80029d0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d2:	2210      	movs	r2, #16
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	6919      	ldr	r1, [r3, #16]
 80029d8:	4211      	tst	r1, r2
 80029da:	d010      	beq.n	80029fe <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	4211      	tst	r1, r2
 80029e0:	d00d      	beq.n	80029fe <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e2:	3a21      	subs	r2, #33	; 0x21
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	3219      	adds	r2, #25
 80029e8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	23c0      	movs	r3, #192	; 0xc0
 80029ee:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80029f0:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f2:	421a      	tst	r2, r3
 80029f4:	d04b      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	f7ff ffa9 	bl	800294c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	2300      	movs	r3, #0
 80029fc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029fe:	2201      	movs	r2, #1
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	6919      	ldr	r1, [r3, #16]
 8002a04:	4211      	tst	r1, r2
 8002a06:	d007      	beq.n	8002a18 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002a08:	68d9      	ldr	r1, [r3, #12]
 8002a0a:	4211      	tst	r1, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a0e:	3a03      	subs	r2, #3
 8002a10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a12:	0020      	movs	r0, r4
 8002a14:	f7ff ff98 	bl	8002948 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	4211      	tst	r1, r2
 8002a20:	d008      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002a22:	68d9      	ldr	r1, [r3, #12]
 8002a24:	4211      	tst	r1, r2
 8002a26:	d005      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a28:	3a02      	subs	r2, #2
 8002a2a:	3aff      	subs	r2, #255	; 0xff
 8002a2c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a2e:	0020      	movs	r0, r4
 8002a30:	f000 fa11 	bl	8002e56 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	6919      	ldr	r1, [r3, #16]
 8002a3a:	4211      	tst	r1, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002a3e:	68d9      	ldr	r1, [r3, #12]
 8002a40:	4211      	tst	r1, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a44:	3a81      	subs	r2, #129	; 0x81
 8002a46:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a48:	0020      	movs	r0, r4
 8002a4a:	f7ff ff81 	bl	8002950 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4e:	2220      	movs	r2, #32
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	4211      	tst	r1, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	4211      	tst	r1, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a5e:	3a41      	subs	r2, #65	; 0x41
 8002a60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002a62:	0020      	movs	r0, r4
 8002a64:	f000 f9f6 	bl	8002e54 <HAL_TIMEx_CommutationCallback>
}
 8002a68:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	f7ff ff6e 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6e:	0020      	movs	r0, r4
 8002a70:	f7ff ff6d 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
 8002a74:	e781      	b.n	800297a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	f7ff ff68 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	f7ff ff67 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
 8002a80:	e791      	b.n	80029a6 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	f7ff ff62 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a86:	0020      	movs	r0, r4
 8002a88:	f7ff ff61 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
 8002a8c:	e79f      	b.n	80029ce <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	f7ff ff5c 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a92:	0020      	movs	r0, r4
 8002a94:	f7ff ff5b 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
 8002a98:	e7af      	b.n	80029fa <HAL_TIM_IRQHandler+0xa8>
	...

08002a9c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <TIM_Base_SetConfig+0x74>)
{
 8002a9e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002aa0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa2:	4290      	cmp	r0, r2
 8002aa4:	d002      	beq.n	8002aac <TIM_Base_SetConfig+0x10>
 8002aa6:	4c1b      	ldr	r4, [pc, #108]	; (8002b14 <TIM_Base_SetConfig+0x78>)
 8002aa8:	42a0      	cmp	r0, r4
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	2470      	movs	r4, #112	; 0x70
 8002aae:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002ab0:	684c      	ldr	r4, [r1, #4]
 8002ab2:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab4:	4290      	cmp	r0, r2
 8002ab6:	d00e      	beq.n	8002ad6 <TIM_Base_SetConfig+0x3a>
 8002ab8:	4c16      	ldr	r4, [pc, #88]	; (8002b14 <TIM_Base_SetConfig+0x78>)
 8002aba:	42a0      	cmp	r0, r4
 8002abc:	d00b      	beq.n	8002ad6 <TIM_Base_SetConfig+0x3a>
 8002abe:	4c16      	ldr	r4, [pc, #88]	; (8002b18 <TIM_Base_SetConfig+0x7c>)
 8002ac0:	42a0      	cmp	r0, r4
 8002ac2:	d008      	beq.n	8002ad6 <TIM_Base_SetConfig+0x3a>
 8002ac4:	4c15      	ldr	r4, [pc, #84]	; (8002b1c <TIM_Base_SetConfig+0x80>)
 8002ac6:	42a0      	cmp	r0, r4
 8002ac8:	d005      	beq.n	8002ad6 <TIM_Base_SetConfig+0x3a>
 8002aca:	4c15      	ldr	r4, [pc, #84]	; (8002b20 <TIM_Base_SetConfig+0x84>)
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	d002      	beq.n	8002ad6 <TIM_Base_SetConfig+0x3a>
 8002ad0:	4c14      	ldr	r4, [pc, #80]	; (8002b24 <TIM_Base_SetConfig+0x88>)
 8002ad2:	42a0      	cmp	r0, r4
 8002ad4:	d103      	bne.n	8002ade <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad6:	4c14      	ldr	r4, [pc, #80]	; (8002b28 <TIM_Base_SetConfig+0x8c>)
 8002ad8:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ada:	68cc      	ldr	r4, [r1, #12]
 8002adc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ade:	2480      	movs	r4, #128	; 0x80
 8002ae0:	43a3      	bics	r3, r4
 8002ae2:	694c      	ldr	r4, [r1, #20]
 8002ae4:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002ae6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae8:	688b      	ldr	r3, [r1, #8]
 8002aea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002aec:	680b      	ldr	r3, [r1, #0]
 8002aee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af0:	4290      	cmp	r0, r2
 8002af2:	d008      	beq.n	8002b06 <TIM_Base_SetConfig+0x6a>
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <TIM_Base_SetConfig+0x80>)
 8002af6:	4298      	cmp	r0, r3
 8002af8:	d005      	beq.n	8002b06 <TIM_Base_SetConfig+0x6a>
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <TIM_Base_SetConfig+0x84>)
 8002afc:	4298      	cmp	r0, r3
 8002afe:	d002      	beq.n	8002b06 <TIM_Base_SetConfig+0x6a>
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <TIM_Base_SetConfig+0x88>)
 8002b02:	4298      	cmp	r0, r3
 8002b04:	d101      	bne.n	8002b0a <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002b06:	690b      	ldr	r3, [r1, #16]
 8002b08:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	6143      	str	r3, [r0, #20]
}
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40002000 	.word	0x40002000
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800
 8002b28:	fffffcff 	.word	0xfffffcff

08002b2c <HAL_TIM_PWM_Init>:
{
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002b30:	2001      	movs	r0, #1
  if(htim == NULL)
 8002b32:	2c00      	cmp	r4, #0
 8002b34:	d014      	beq.n	8002b60 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b36:	0025      	movs	r5, r4
 8002b38:	353d      	adds	r5, #61	; 0x3d
 8002b3a:	782b      	ldrb	r3, [r5, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002b42:	0022      	movs	r2, r4
 8002b44:	323c      	adds	r2, #60	; 0x3c
 8002b46:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002b48:	0020      	movs	r0, r4
 8002b4a:	f000 fe3b 	bl	80037c4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002b4e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002b52:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b54:	1d21      	adds	r1, r4, #4
 8002b56:	f7ff ffa1 	bl	8002a9c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002b5a:	2301      	movs	r3, #1
  return HAL_OK;
 8002b5c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002b5e:	702b      	strb	r3, [r5, #0]
}
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b64 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b64:	2210      	movs	r2, #16
 8002b66:	6a03      	ldr	r3, [r0, #32]
{
 8002b68:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6a:	4393      	bics	r3, r2
 8002b6c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b6e:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b70:	4d16      	ldr	r5, [pc, #88]	; (8002bcc <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8002b72:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b74:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b76:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b78:	680d      	ldr	r5, [r1, #0]
 8002b7a:	022d      	lsls	r5, r5, #8
 8002b7c:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8002b7e:	2520      	movs	r5, #32
 8002b80:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b82:	688d      	ldr	r5, [r1, #8]
 8002b84:	012d      	lsls	r5, r5, #4
 8002b86:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b88:	4d11      	ldr	r5, [pc, #68]	; (8002bd0 <TIM_OC2_SetConfig+0x6c>)
 8002b8a:	42a8      	cmp	r0, r5
 8002b8c:	d10f      	bne.n	8002bae <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b8e:	2580      	movs	r5, #128	; 0x80
 8002b90:	43aa      	bics	r2, r5
 8002b92:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b94:	68ca      	ldr	r2, [r1, #12]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b9a:	2540      	movs	r5, #64	; 0x40
 8002b9c:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b9e:	4d0d      	ldr	r5, [pc, #52]	; (8002bd4 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ba0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba2:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ba4:	698b      	ldr	r3, [r1, #24]
 8002ba6:	4333      	orrs	r3, r6
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	432b      	orrs	r3, r5
 8002bac:	e008      	b.n	8002bc0 <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bae:	4d0a      	ldr	r5, [pc, #40]	; (8002bd8 <TIM_OC2_SetConfig+0x74>)
 8002bb0:	42a8      	cmp	r0, r5
 8002bb2:	d0f4      	beq.n	8002b9e <TIM_OC2_SetConfig+0x3a>
 8002bb4:	4d09      	ldr	r5, [pc, #36]	; (8002bdc <TIM_OC2_SetConfig+0x78>)
 8002bb6:	42a8      	cmp	r0, r5
 8002bb8:	d0f1      	beq.n	8002b9e <TIM_OC2_SetConfig+0x3a>
 8002bba:	4d09      	ldr	r5, [pc, #36]	; (8002be0 <TIM_OC2_SetConfig+0x7c>)
 8002bbc:	42a8      	cmp	r0, r5
 8002bbe:	d0ee      	beq.n	8002b9e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002bc0:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002bc4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc6:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002bc8:	6202      	str	r2, [r0, #32]
}
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	ffff8cff 	.word	0xffff8cff
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	fffff3ff 	.word	0xfffff3ff
 8002bd8:	40014000 	.word	0x40014000
 8002bdc:	40014400 	.word	0x40014400
 8002be0:	40014800 	.word	0x40014800

08002be4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002be6:	0006      	movs	r6, r0
 8002be8:	2302      	movs	r3, #2
 8002bea:	363c      	adds	r6, #60	; 0x3c
{
 8002bec:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002bee:	7831      	ldrb	r1, [r6, #0]
{
 8002bf0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	2901      	cmp	r1, #1
 8002bf6:	d025      	beq.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8002bfa:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8002bfe:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8002c02:	2a0c      	cmp	r2, #12
 8002c04:	d81a      	bhi.n	8002c3c <HAL_TIM_PWM_ConfigChannel+0x58>
 8002c06:	0010      	movs	r0, r2
 8002c08:	f7fd fa88 	bl	800011c <__gnu_thumb1_case_uqi>
 8002c0c:	18181807 	.word	0x18181807
 8002c10:	1818181d 	.word	0x1818181d
 8002c14:	1818182f 	.word	0x1818182f
 8002c18:	41          	.byte	0x41
 8002c19:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c1a:	0029      	movs	r1, r5
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	f7ff fdc5 	bl	80027ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c22:	2208      	movs	r2, #8
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	6999      	ldr	r1, [r3, #24]
 8002c28:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c2a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	438a      	bics	r2, r1
 8002c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002c3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8002c42:	7030      	strb	r0, [r6, #0]
}
 8002c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c46:	0029      	movs	r1, r5
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	f7ff ff8b 	bl	8002b64 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	6999      	ldr	r1, [r3, #24]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	4915      	ldr	r1, [pc, #84]	; (8002cb4 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c62:	692a      	ldr	r2, [r5, #16]
 8002c64:	6999      	ldr	r1, [r3, #24]
 8002c66:	0212      	lsls	r2, r2, #8
 8002c68:	e7e6      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c6a:	0029      	movs	r1, r5
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	f7ff fde1 	bl	8002834 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c72:	2208      	movs	r2, #8
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7a:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	438a      	bics	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	61da      	str	r2, [r3, #28]
    break;
 8002c8c:	e7d6      	b.n	8002c3c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c8e:	0029      	movs	r1, r5
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	f7ff fe13 	bl	80028bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	69d9      	ldr	r1, [r3, #28]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002caa:	692a      	ldr	r2, [r5, #16]
 8002cac:	69d9      	ldr	r1, [r3, #28]
 8002cae:	0212      	lsls	r2, r2, #8
 8002cb0:	e7ea      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	fffffbff 	.word	0xfffffbff

08002cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cb8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002cba:	2401      	movs	r4, #1
 8002cbc:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cbe:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002cc0:	6a03      	ldr	r3, [r0, #32]
 8002cc2:	43a3      	bics	r3, r4
 8002cc4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cc6:	6a03      	ldr	r3, [r0, #32]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6202      	str	r2, [r0, #32]
}
 8002ccc:	bd10      	pop	{r4, pc}
	...

08002cd0 <HAL_TIM_PWM_Start>:
{
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	6800      	ldr	r0, [r0, #0]
 8002cd8:	f7ff ffee 	bl	8002cb8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <HAL_TIM_PWM_Start+0x3c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d008      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x26>
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_TIM_PWM_Start+0x40>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d005      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x26>
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <HAL_TIM_PWM_Start+0x44>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d002      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x26>
 8002cf0:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_TIM_PWM_Start+0x48>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002cfa:	0212      	lsls	r2, r2, #8
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002d00:	2201      	movs	r2, #1
 8002d02:	6819      	ldr	r1, [r3, #0]
}
 8002d04:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
}
 8002d0a:	bd10      	pop	{r4, pc}
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40014400 	.word	0x40014400
 8002d18:	40014800 	.word	0x40014800

08002d1c <HAL_TIM_PWM_Stop>:
{
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6800      	ldr	r0, [r0, #0]
 8002d24:	f7ff ffc8 	bl	8002cb8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <HAL_TIM_PWM_Stop+0x60>)
 8002d2c:	4914      	ldr	r1, [pc, #80]	; (8002d80 <HAL_TIM_PWM_Stop+0x64>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d008      	beq.n	8002d44 <HAL_TIM_PWM_Stop+0x28>
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_TIM_PWM_Stop+0x68>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d005      	beq.n	8002d44 <HAL_TIM_PWM_Stop+0x28>
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_TIM_PWM_Stop+0x6c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d002      	beq.n	8002d44 <HAL_TIM_PWM_Stop+0x28>
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_TIM_PWM_Stop+0x70>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10a      	bne.n	8002d5a <HAL_TIM_PWM_Stop+0x3e>
    __HAL_TIM_MOE_DISABLE(htim);
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	420a      	tst	r2, r1
 8002d48:	d107      	bne.n	8002d5a <HAL_TIM_PWM_Stop+0x3e>
 8002d4a:	6a18      	ldr	r0, [r3, #32]
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_TIM_PWM_Stop+0x74>)
 8002d4e:	4210      	tst	r0, r2
 8002d50:	d103      	bne.n	8002d5a <HAL_TIM_PWM_Stop+0x3e>
 8002d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d54:	480f      	ldr	r0, [pc, #60]	; (8002d94 <HAL_TIM_PWM_Stop+0x78>)
 8002d56:	4002      	ands	r2, r0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	420a      	tst	r2, r1
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_PWM_Stop+0x54>
 8002d60:	6a19      	ldr	r1, [r3, #32]
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_TIM_PWM_Stop+0x74>)
 8002d64:	4211      	tst	r1, r2
 8002d66:	d103      	bne.n	8002d70 <HAL_TIM_PWM_Stop+0x54>
 8002d68:	2101      	movs	r1, #1
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	2301      	movs	r3, #1
 8002d72:	343d      	adds	r4, #61	; 0x3d
}
 8002d74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d76:	7023      	strb	r3, [r4, #0]
}
 8002d78:	bd10      	pop	{r4, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	00001111 	.word	0x00001111
 8002d84:	40014000 	.word	0x40014000
 8002d88:	40014400 	.word	0x40014400
 8002d8c:	40014800 	.word	0x40014800
 8002d90:	00000444 	.word	0x00000444
 8002d94:	ffff7fff 	.word	0xffff7fff

08002d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002d98:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002d9a:	0004      	movs	r4, r0
 8002d9c:	343c      	adds	r4, #60	; 0x3c
 8002d9e:	7822      	ldrb	r2, [r4, #0]
{
 8002da0:	0003      	movs	r3, r0
 8002da2:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002da4:	2a01      	cmp	r2, #1
 8002da6:	d017      	beq.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002daa:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	353d      	adds	r5, #61	; 0x3d
 8002dae:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	306e      	adds	r0, #110	; 0x6e
 8002db4:	4382      	bics	r2, r0
 8002db6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002dbc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002dbe:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002dc0:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc2:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4382      	bics	r2, r0
 8002dc8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002dca:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002dcc:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002dd6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002dd8:	bd30      	pop	{r4, r5, pc}
	...

08002ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ddc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dde:	0004      	movs	r4, r0
 8002de0:	343c      	adds	r4, #60	; 0x3c
 8002de2:	7823      	ldrb	r3, [r4, #0]
{
 8002de4:	0002      	movs	r2, r0
 8002de6:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d024      	beq.n	8002e36 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	0015      	movs	r5, r2
 8002dee:	353d      	adds	r5, #61	; 0x3d
 8002df0:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8002df4:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002df6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002df8:	4003      	ands	r3, r0
 8002dfa:	6888      	ldr	r0, [r1, #8]
 8002dfc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dfe:	480f      	ldr	r0, [pc, #60]	; (8002e3c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002e00:	4003      	ands	r3, r0
 8002e02:	6848      	ldr	r0, [r1, #4]
 8002e04:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e06:	480e      	ldr	r0, [pc, #56]	; (8002e40 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8002e08:	4003      	ands	r3, r0
 8002e0a:	6808      	ldr	r0, [r1, #0]
 8002e0c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8002e10:	4003      	ands	r3, r0
 8002e12:	6908      	ldr	r0, [r1, #16]
 8002e14:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e16:	480c      	ldr	r0, [pc, #48]	; (8002e48 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8002e18:	4003      	ands	r3, r0
 8002e1a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e1c:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e20:	480a      	ldr	r0, [pc, #40]	; (8002e4c <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8002e22:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e26:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e28:	4003      	ands	r3, r0
 8002e2a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002e2e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	2301      	movs	r3, #1
 8002e32:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002e34:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002e36:	bd30      	pop	{r4, r5, pc}
 8002e38:	fffffcff 	.word	0xfffffcff
 8002e3c:	fffffbff 	.word	0xfffffbff
 8002e40:	fffff7ff 	.word	0xfffff7ff
 8002e44:	ffffefff 	.word	0xffffefff
 8002e48:	ffffdfff 	.word	0xffffdfff
 8002e4c:	ffffbfff 	.word	0xffffbfff
 8002e50:	ffff7fff 	.word	0xffff7fff

08002e54 <HAL_TIMEx_CommutationCallback>:
 8002e54:	4770      	bx	lr

08002e56 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e56:	4770      	bx	lr

08002e58 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e58:	6803      	ldr	r3, [r0, #0]
 8002e5a:	4906      	ldr	r1, [pc, #24]	; (8002e74 <UART_EndRxTransfer+0x1c>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	3123      	adds	r1, #35	; 0x23
 8002e68:	31ff      	adds	r1, #255	; 0xff
 8002e6a:	438a      	bics	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	7003      	strb	r3, [r0, #0]
}
 8002e72:	4770      	bx	lr
 8002e74:	fffffedf 	.word	0xfffffedf

08002e78 <HAL_UART_Transmit_IT>:
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002e7a:	0006      	movs	r6, r0
 8002e7c:	3669      	adds	r6, #105	; 0x69
 8002e7e:	7833      	ldrb	r3, [r6, #0]
{
 8002e80:	0004      	movs	r4, r0
    return HAL_BUSY;
 8002e82:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d124      	bne.n	8002ed2 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8002e88:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002e8a:	2900      	cmp	r1, #0
 8002e8c:	d021      	beq.n	8002ed2 <HAL_UART_Transmit_IT+0x5a>
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d01f      	beq.n	8002ed2 <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	68a5      	ldr	r5, [r4, #8]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	429d      	cmp	r5, r3
 8002e9a:	d104      	bne.n	8002ea6 <HAL_UART_Transmit_IT+0x2e>
 8002e9c:	6923      	ldr	r3, [r4, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8002ea2:	4201      	tst	r1, r0
 8002ea4:	d115      	bne.n	8002ed2 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8002ea6:	0025      	movs	r5, r4
 8002ea8:	3568      	adds	r5, #104	; 0x68
 8002eaa:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 8002eac:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d00f      	beq.n	8002ed2 <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 8002eb2:	0023      	movs	r3, r4
 8002eb4:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8002eb6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 8002eb8:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 8002eba:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebe:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ec0:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec4:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ec6:	6808      	ldr	r0, [r1, #0]
 8002ec8:	325f      	adds	r2, #95	; 0x5f
 8002eca:	4302      	orrs	r2, r0
    return HAL_OK;
 8002ecc:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 8002ece:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ed0:	600a      	str	r2, [r1, #0]
}
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}

08002ed4 <HAL_UART_Receive_IT>:
{
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8002ed6:	0006      	movs	r6, r0
 8002ed8:	366a      	adds	r6, #106	; 0x6a
 8002eda:	7834      	ldrb	r4, [r6, #0]
{
 8002edc:	0003      	movs	r3, r0
    return HAL_BUSY;
 8002ede:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002ee0:	2c20      	cmp	r4, #32
 8002ee2:	d135      	bne.n	8002f50 <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8002ee4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002ee6:	2900      	cmp	r1, #0
 8002ee8:	d032      	beq.n	8002f50 <HAL_UART_Receive_IT+0x7c>
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	d030      	beq.n	8002f50 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eee:	2480      	movs	r4, #128	; 0x80
 8002ef0:	689d      	ldr	r5, [r3, #8]
 8002ef2:	0164      	lsls	r4, r4, #5
 8002ef4:	42a5      	cmp	r5, r4
 8002ef6:	d104      	bne.n	8002f02 <HAL_UART_Receive_IT+0x2e>
 8002ef8:	691c      	ldr	r4, [r3, #16]
 8002efa:	2c00      	cmp	r4, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8002efe:	4201      	tst	r1, r0
 8002f00:	d126      	bne.n	8002f50 <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 8002f02:	001c      	movs	r4, r3
 8002f04:	3468      	adds	r4, #104	; 0x68
 8002f06:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8002f08:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002f0a:	2f01      	cmp	r7, #1
 8002f0c:	d020      	beq.n	8002f50 <HAL_UART_Receive_IT+0x7c>
 8002f0e:	3801      	subs	r0, #1
 8002f10:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 8002f12:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002f14:	0019      	movs	r1, r3
 8002f16:	3158      	adds	r1, #88	; 0x58
 8002f18:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8002f1a:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	0152      	lsls	r2, r2, #5
 8002f20:	4295      	cmp	r5, r2
 8002f22:	d118      	bne.n	8002f56 <HAL_UART_Receive_IT+0x82>
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d113      	bne.n	8002f52 <HAL_UART_Receive_IT+0x7e>
 8002f2a:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_UART_Receive_IT+0x90>)
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	325c      	adds	r2, #92	; 0x5c
 8002f30:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f34:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3a:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3c:	6899      	ldr	r1, [r3, #8]
 8002f3e:	3a21      	subs	r2, #33	; 0x21
 8002f40:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8002f42:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f46:	2290      	movs	r2, #144	; 0x90
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	0052      	lsls	r2, r2, #1
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8002f52:	21ff      	movs	r1, #255	; 0xff
 8002f54:	e7ea      	b.n	8002f2c <HAL_UART_Receive_IT+0x58>
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	d1eb      	bne.n	8002f32 <HAL_UART_Receive_IT+0x5e>
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	2a00      	cmp	r2, #0
 8002f5e:	d0f8      	beq.n	8002f52 <HAL_UART_Receive_IT+0x7e>
 8002f60:	217f      	movs	r1, #127	; 0x7f
 8002f62:	e7e3      	b.n	8002f2c <HAL_UART_Receive_IT+0x58>
 8002f64:	000001ff 	.word	0x000001ff

08002f68 <HAL_UART_TxCpltCallback>:
 8002f68:	4770      	bx	lr

08002f6a <HAL_UART_ErrorCallback>:
 8002f6a:	4770      	bx	lr

08002f6c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002f6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	0002      	movs	r2, r0
{
 8002f72:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002f74:	325a      	adds	r2, #90	; 0x5a
 8002f76:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002f78:	3a08      	subs	r2, #8
 8002f7a:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8002f7c:	f7ff fff5 	bl	8002f6a <HAL_UART_ErrorCallback>
}
 8002f80:	bd10      	pop	{r4, pc}
	...

08002f84 <UART_SetConfig>:
{
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f88:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f8a:	69c2      	ldr	r2, [r0, #28]
 8002f8c:	6883      	ldr	r3, [r0, #8]
 8002f8e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f90:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f92:	4303      	orrs	r3, r0
 8002f94:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f96:	4e3f      	ldr	r6, [pc, #252]	; (8003094 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f98:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f9a:	483f      	ldr	r0, [pc, #252]	; (8003098 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f9c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f9e:	4001      	ands	r1, r0
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	686b      	ldr	r3, [r5, #4]
 8002fa6:	493d      	ldr	r1, [pc, #244]	; (800309c <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fa8:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002faa:	400b      	ands	r3, r1
 8002fac:	68e1      	ldr	r1, [r4, #12]
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fb2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fb4:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fb6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fb8:	4839      	ldr	r0, [pc, #228]	; (80030a0 <UART_SetConfig+0x11c>)
 8002fba:	4001      	ands	r1, r0
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	60ab      	str	r3, [r5, #8]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc4:	42b5      	cmp	r5, r6
 8002fc6:	d110      	bne.n	8002fea <UART_SetConfig+0x66>
 8002fc8:	2003      	movs	r0, #3
 8002fca:	4936      	ldr	r1, [pc, #216]	; (80030a4 <UART_SetConfig+0x120>)
 8002fcc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002fce:	4001      	ands	r1, r0
 8002fd0:	4835      	ldr	r0, [pc, #212]	; (80030a8 <UART_SetConfig+0x124>)
 8002fd2:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d013      	beq.n	8003000 <UART_SetConfig+0x7c>
    switch (clocksource)
 8002fd8:	2808      	cmp	r0, #8
 8002fda:	d858      	bhi.n	800308e <UART_SetConfig+0x10a>
 8002fdc:	f7fd f89e 	bl	800011c <__gnu_thumb1_case_uqi>
 8002fe0:	57425737 	.word	0x57425737
 8002fe4:	5757574b 	.word	0x5757574b
 8002fe8:	50          	.byte	0x50
 8002fe9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fea:	4930      	ldr	r1, [pc, #192]	; (80030ac <UART_SetConfig+0x128>)
 8002fec:	428d      	cmp	r5, r1
 8002fee:	d14c      	bne.n	800308a <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d12c      	bne.n	800304e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ff4:	f7ff fb46 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ff8:	6863      	ldr	r3, [r4, #4]
 8002ffa:	0040      	lsls	r0, r0, #1
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	e00b      	b.n	8003018 <UART_SetConfig+0x94>
    switch (clocksource)
 8003000:	2808      	cmp	r0, #8
 8003002:	d821      	bhi.n	8003048 <UART_SetConfig+0xc4>
 8003004:	f7fd f880 	bl	8000108 <__gnu_thumb1_case_sqi>
 8003008:	200520f6 	.word	0x200520f6
 800300c:	20202018 	.word	0x20202018
 8003010:	1b          	.byte	0x1b
 8003011:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003012:	6863      	ldr	r3, [r4, #4]
 8003014:	0858      	lsrs	r0, r3, #1
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003018:	18c0      	adds	r0, r0, r3
 800301a:	6861      	ldr	r1, [r4, #4]
 800301c:	f7fd f888 	bl	8000130 <__udivsi3>
 8003020:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003022:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003024:	220f      	movs	r2, #15
 8003026:	0019      	movs	r1, r3
 8003028:	4391      	bics	r1, r2
 800302a:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800302c:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 800302e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003030:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8003032:	4313      	orrs	r3, r2
 8003034:	60cb      	str	r3, [r1, #12]
}
 8003036:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003038:	f7ff fa56 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 800303c:	e7dc      	b.n	8002ff8 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800303e:	6863      	ldr	r3, [r4, #4]
 8003040:	0858      	lsrs	r0, r3, #1
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	e7e7      	b.n	8003018 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8003048:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800304a:	2300      	movs	r3, #0
 800304c:	e7ea      	b.n	8003024 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800304e:	f7ff fb19 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003052:	6861      	ldr	r1, [r4, #4]
 8003054:	084b      	lsrs	r3, r1, #1
 8003056:	1818      	adds	r0, r3, r0
 8003058:	f7fd f86a 	bl	8000130 <__udivsi3>
 800305c:	b280      	uxth	r0, r0
 800305e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003060:	2000      	movs	r0, #0
        break;
 8003062:	e7e8      	b.n	8003036 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003064:	6861      	ldr	r1, [r4, #4]
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <UART_SetConfig+0x130>)
 8003068:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800306a:	18c0      	adds	r0, r0, r3
 800306c:	f7fd f860 	bl	8000130 <__udivsi3>
 8003070:	b280      	uxth	r0, r0
 8003072:	60f0      	str	r0, [r6, #12]
 8003074:	e7f4      	b.n	8003060 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003076:	f7ff fa37 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 800307a:	6861      	ldr	r1, [r4, #4]
 800307c:	084b      	lsrs	r3, r1, #1
 800307e:	e7f4      	b.n	800306a <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	6861      	ldr	r1, [r4, #4]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	0848      	lsrs	r0, r1, #1
 8003088:	e7ef      	b.n	800306a <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308a:	429a      	cmp	r2, r3
 800308c:	d0dc      	beq.n	8003048 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 800308e:	2001      	movs	r0, #1
  return ret;
 8003090:	e7d1      	b.n	8003036 <UART_SetConfig+0xb2>
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	40013800 	.word	0x40013800
 8003098:	ffff69f3 	.word	0xffff69f3
 800309c:	ffffcfff 	.word	0xffffcfff
 80030a0:	fffff4ff 	.word	0xfffff4ff
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08003c58 	.word	0x08003c58
 80030ac:	40004400 	.word	0x40004400
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80030ba:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030bc:	07da      	lsls	r2, r3, #31
 80030be:	d506      	bpl.n	80030ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c0:	6801      	ldr	r1, [r0, #0]
 80030c2:	4c28      	ldr	r4, [pc, #160]	; (8003164 <UART_AdvFeatureConfig+0xac>)
 80030c4:	684a      	ldr	r2, [r1, #4]
 80030c6:	4022      	ands	r2, r4
 80030c8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80030ca:	4322      	orrs	r2, r4
 80030cc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ce:	079a      	lsls	r2, r3, #30
 80030d0:	d506      	bpl.n	80030e0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d2:	6801      	ldr	r1, [r0, #0]
 80030d4:	4c24      	ldr	r4, [pc, #144]	; (8003168 <UART_AdvFeatureConfig+0xb0>)
 80030d6:	684a      	ldr	r2, [r1, #4]
 80030d8:	4022      	ands	r2, r4
 80030da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80030dc:	4322      	orrs	r2, r4
 80030de:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e0:	075a      	lsls	r2, r3, #29
 80030e2:	d506      	bpl.n	80030f2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e4:	6801      	ldr	r1, [r0, #0]
 80030e6:	4c21      	ldr	r4, [pc, #132]	; (800316c <UART_AdvFeatureConfig+0xb4>)
 80030e8:	684a      	ldr	r2, [r1, #4]
 80030ea:	4022      	ands	r2, r4
 80030ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80030ee:	4322      	orrs	r2, r4
 80030f0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f2:	071a      	lsls	r2, r3, #28
 80030f4:	d506      	bpl.n	8003104 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f6:	6801      	ldr	r1, [r0, #0]
 80030f8:	4c1d      	ldr	r4, [pc, #116]	; (8003170 <UART_AdvFeatureConfig+0xb8>)
 80030fa:	684a      	ldr	r2, [r1, #4]
 80030fc:	4022      	ands	r2, r4
 80030fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003100:	4322      	orrs	r2, r4
 8003102:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003104:	06da      	lsls	r2, r3, #27
 8003106:	d506      	bpl.n	8003116 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	4c1a      	ldr	r4, [pc, #104]	; (8003174 <UART_AdvFeatureConfig+0xbc>)
 800310c:	688a      	ldr	r2, [r1, #8]
 800310e:	4022      	ands	r2, r4
 8003110:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003112:	4322      	orrs	r2, r4
 8003114:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003116:	069a      	lsls	r2, r3, #26
 8003118:	d506      	bpl.n	8003128 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800311a:	6801      	ldr	r1, [r0, #0]
 800311c:	4c16      	ldr	r4, [pc, #88]	; (8003178 <UART_AdvFeatureConfig+0xc0>)
 800311e:	688a      	ldr	r2, [r1, #8]
 8003120:	4022      	ands	r2, r4
 8003122:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003124:	4322      	orrs	r2, r4
 8003126:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003128:	065a      	lsls	r2, r3, #25
 800312a:	d510      	bpl.n	800314e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800312c:	6801      	ldr	r1, [r0, #0]
 800312e:	4d13      	ldr	r5, [pc, #76]	; (800317c <UART_AdvFeatureConfig+0xc4>)
 8003130:	684a      	ldr	r2, [r1, #4]
 8003132:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003134:	402a      	ands	r2, r5
 8003136:	4322      	orrs	r2, r4
 8003138:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	0352      	lsls	r2, r2, #13
 800313e:	4294      	cmp	r4, r2
 8003140:	d105      	bne.n	800314e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003142:	684a      	ldr	r2, [r1, #4]
 8003144:	4c0e      	ldr	r4, [pc, #56]	; (8003180 <UART_AdvFeatureConfig+0xc8>)
 8003146:	4022      	ands	r2, r4
 8003148:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800314a:	4322      	orrs	r2, r4
 800314c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800314e:	061b      	lsls	r3, r3, #24
 8003150:	d506      	bpl.n	8003160 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003152:	6802      	ldr	r2, [r0, #0]
 8003154:	490b      	ldr	r1, [pc, #44]	; (8003184 <UART_AdvFeatureConfig+0xcc>)
 8003156:	6853      	ldr	r3, [r2, #4]
 8003158:	400b      	ands	r3, r1
 800315a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800315c:	430b      	orrs	r3, r1
 800315e:	6053      	str	r3, [r2, #4]
}
 8003160:	bd30      	pop	{r4, r5, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	fffdffff 	.word	0xfffdffff
 8003168:	fffeffff 	.word	0xfffeffff
 800316c:	fffbffff 	.word	0xfffbffff
 8003170:	ffff7fff 	.word	0xffff7fff
 8003174:	ffffefff 	.word	0xffffefff
 8003178:	ffffdfff 	.word	0xffffdfff
 800317c:	ffefffff 	.word	0xffefffff
 8003180:	ff9fffff 	.word	0xff9fffff
 8003184:	fff7ffff 	.word	0xfff7ffff

08003188 <HAL_UART_Init>:
{
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800318c:	d101      	bne.n	8003192 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800318e:	2001      	movs	r0, #1
}
 8003190:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8003192:	0005      	movs	r5, r0
 8003194:	3569      	adds	r5, #105	; 0x69
 8003196:	782b      	ldrb	r3, [r5, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800319e:	0002      	movs	r2, r0
 80031a0:	3268      	adds	r2, #104	; 0x68
 80031a2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80031a4:	f000 fc56 	bl	8003a54 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80031a8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80031aa:	2101      	movs	r1, #1
 80031ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031ae:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80031b0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80031b4:	438b      	bics	r3, r1
 80031b6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b8:	f7ff fee4 	bl	8002f84 <UART_SetConfig>
 80031bc:	2801      	cmp	r0, #1
 80031be:	d0e6      	beq.n	800318e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80031c6:	0020      	movs	r0, r4
 80031c8:	f7ff ff76 	bl	80030b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	490b      	ldr	r1, [pc, #44]	; (80031fc <HAL_UART_Init+0x74>)
 80031d0:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80031d4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80031d6:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80031d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	438a      	bics	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031e0:	2201      	movs	r2, #1
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80031e8:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 80031ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ec:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80031ee:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 80031f0:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80031f2:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80031f6:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80031f8:	e7ca      	b.n	8003190 <HAL_UART_Init+0x8>
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	fffff7ff 	.word	0xfffff7ff

08003200 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003200:	0003      	movs	r3, r0
{
 8003202:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003204:	3369      	adds	r3, #105	; 0x69
 8003206:	781b      	ldrb	r3, [r3, #0]
{
 8003208:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800320a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800320c:	2b21      	cmp	r3, #33	; 0x21
 800320e:	d10f      	bne.n	8003230 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8003210:	0014      	movs	r4, r2
 8003212:	3452      	adds	r4, #82	; 0x52
 8003214:	8823      	ldrh	r3, [r4, #0]
 8003216:	6811      	ldr	r1, [r2, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800321e:	680a      	ldr	r2, [r1, #0]
 8003220:	307e      	adds	r0, #126	; 0x7e
 8003222:	4382      	bics	r2, r0
 8003224:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	6808      	ldr	r0, [r1, #0]
 800322a:	4302      	orrs	r2, r0
 800322c:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 800322e:	2000      	movs	r0, #0
  }
}
 8003230:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003232:	2080      	movs	r0, #128	; 0x80
 8003234:	6895      	ldr	r5, [r2, #8]
 8003236:	0140      	lsls	r0, r0, #5
 8003238:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800323a:	4285      	cmp	r5, r0
 800323c:	d10d      	bne.n	800325a <UART_Transmit_IT+0x5a>
 800323e:	6910      	ldr	r0, [r2, #16]
 8003240:	2800      	cmp	r0, #0
 8003242:	d10a      	bne.n	800325a <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003244:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8003246:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003248:	05c0      	lsls	r0, r0, #23
 800324a:	0dc0      	lsrs	r0, r0, #23
 800324c:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800324e:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8003250:	8823      	ldrh	r3, [r4, #0]
 8003252:	3b01      	subs	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	8023      	strh	r3, [r4, #0]
 8003258:	e7e9      	b.n	800322e <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800325a:	1c58      	adds	r0, r3, #1
 800325c:	64d0      	str	r0, [r2, #76]	; 0x4c
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	850b      	strh	r3, [r1, #40]	; 0x28
 8003262:	e7f5      	b.n	8003250 <UART_Transmit_IT+0x50>

08003264 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003264:	2140      	movs	r1, #64	; 0x40
 8003266:	6802      	ldr	r2, [r0, #0]
{
 8003268:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	438b      	bics	r3, r1
 800326e:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003270:	0003      	movs	r3, r0
 8003272:	2220      	movs	r2, #32
 8003274:	3369      	adds	r3, #105	; 0x69
 8003276:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8003278:	f7ff fe76 	bl	8002f68 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800327c:	2000      	movs	r0, #0
 800327e:	bd10      	pop	{r4, pc}

08003280 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003280:	0002      	movs	r2, r0
{
 8003282:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003284:	326a      	adds	r2, #106	; 0x6a
 8003286:	7811      	ldrb	r1, [r2, #0]
 8003288:	6803      	ldr	r3, [r0, #0]
 800328a:	2922      	cmp	r1, #34	; 0x22
 800328c:	d12d      	bne.n	80032ea <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 800328e:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8003292:	315c      	adds	r1, #92	; 0x5c
 8003294:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003296:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003298:	0164      	lsls	r4, r4, #5
 800329a:	4029      	ands	r1, r5
 800329c:	6885      	ldr	r5, [r0, #8]
 800329e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80032a0:	42a5      	cmp	r5, r4
 80032a2:	d11e      	bne.n	80032e2 <UART_Receive_IT+0x62>
 80032a4:	6904      	ldr	r4, [r0, #16]
 80032a6:	2c00      	cmp	r4, #0
 80032a8:	d11b      	bne.n	80032e2 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80032aa:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80032ac:	3302      	adds	r3, #2
 80032ae:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80032b0:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80032b2:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80032b4:	315a      	adds	r1, #90	; 0x5a
 80032b6:	880b      	ldrh	r3, [r1, #0]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	800b      	strh	r3, [r1, #0]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	d10d      	bne.n	80032de <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	4d0c      	ldr	r5, [pc, #48]	; (80032f8 <UART_Receive_IT+0x78>)
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	4029      	ands	r1, r5
 80032ca:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	3523      	adds	r5, #35	; 0x23
 80032d0:	35ff      	adds	r5, #255	; 0xff
 80032d2:	43a9      	bics	r1, r5
 80032d4:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80032d6:	2320      	movs	r3, #32
 80032d8:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 80032da:	f7fe fb0f 	bl	80018fc <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80032de:	0020      	movs	r0, r4
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80032e2:	1c5c      	adds	r4, r3, #1
 80032e4:	6544      	str	r4, [r0, #84]	; 0x54
 80032e6:	7019      	strb	r1, [r3, #0]
 80032e8:	e7e2      	b.n	80032b0 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032ea:	2208      	movs	r2, #8
 80032ec:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 80032ee:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032f0:	430a      	orrs	r2, r1
 80032f2:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80032f4:	e7f3      	b.n	80032de <UART_Receive_IT+0x5e>
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	fffffedf 	.word	0xfffffedf

080032fc <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80032fc:	220f      	movs	r2, #15
{
 80032fe:	b570      	push	{r4, r5, r6, lr}
 8003300:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003302:	6800      	ldr	r0, [r0, #0]
 8003304:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003306:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003308:	401a      	ands	r2, r3
  if (errorflags == RESET)
 800330a:	d108      	bne.n	800331e <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800330c:	2520      	movs	r5, #32
 800330e:	422b      	tst	r3, r5
 8003310:	d005      	beq.n	800331e <HAL_UART_IRQHandler+0x22>
 8003312:	4229      	tst	r1, r5
 8003314:	d003      	beq.n	800331e <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8003316:	0020      	movs	r0, r4
 8003318:	f7ff ffb2 	bl	8003280 <UART_Receive_IT>
}
 800331c:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800331e:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8003320:	2a00      	cmp	r2, #0
 8003322:	d060      	beq.n	80033e6 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003324:	2201      	movs	r2, #1
 8003326:	4015      	ands	r5, r2
 8003328:	d103      	bne.n	8003332 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800332a:	2690      	movs	r6, #144	; 0x90
 800332c:	0076      	lsls	r6, r6, #1
 800332e:	4231      	tst	r1, r6
 8003330:	d059      	beq.n	80033e6 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003332:	4213      	tst	r3, r2
 8003334:	d005      	beq.n	8003342 <HAL_UART_IRQHandler+0x46>
 8003336:	05ce      	lsls	r6, r1, #23
 8003338:	d503      	bpl.n	8003342 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800333a:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800333c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800333e:	4332      	orrs	r2, r6
 8003340:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003342:	2202      	movs	r2, #2
 8003344:	4213      	tst	r3, r2
 8003346:	d006      	beq.n	8003356 <HAL_UART_IRQHandler+0x5a>
 8003348:	2d00      	cmp	r5, #0
 800334a:	d004      	beq.n	8003356 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800334c:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003350:	1892      	adds	r2, r2, r2
 8003352:	4332      	orrs	r2, r6
 8003354:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003356:	2204      	movs	r2, #4
 8003358:	4213      	tst	r3, r2
 800335a:	d006      	beq.n	800336a <HAL_UART_IRQHandler+0x6e>
 800335c:	2d00      	cmp	r5, #0
 800335e:	d004      	beq.n	800336a <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003360:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003362:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003364:	3a02      	subs	r2, #2
 8003366:	4332      	orrs	r2, r6
 8003368:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800336a:	071a      	lsls	r2, r3, #28
 800336c:	d508      	bpl.n	8003380 <HAL_UART_IRQHandler+0x84>
 800336e:	068a      	lsls	r2, r1, #26
 8003370:	d401      	bmi.n	8003376 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003372:	2d00      	cmp	r5, #0
 8003374:	d004      	beq.n	8003380 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003376:	2208      	movs	r2, #8
 8003378:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800337a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800337c:	4302      	orrs	r2, r0
 800337e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003380:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003382:	2a00      	cmp	r2, #0
 8003384:	d0ca      	beq.n	800331c <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003386:	2220      	movs	r2, #32
 8003388:	4213      	tst	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_UART_IRQHandler+0x9a>
 800338c:	4211      	tst	r1, r2
 800338e:	d002      	beq.n	8003396 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8003390:	0020      	movs	r0, r4
 8003392:	f7ff ff75 	bl	8003280 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003396:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003398:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800339a:	071b      	lsls	r3, r3, #28
 800339c:	d404      	bmi.n	80033a8 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	689d      	ldr	r5, [r3, #8]
 80033a2:	2340      	movs	r3, #64	; 0x40
 80033a4:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80033a6:	d01a      	beq.n	80033de <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 80033a8:	f7ff fd56 	bl	8002e58 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	2140      	movs	r1, #64	; 0x40
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	420a      	tst	r2, r1
 80033b4:	d00f      	beq.n	80033d6 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b6:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80033b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ba:	438a      	bics	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80033be:	2800      	cmp	r0, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_UART_IRQHandler+0x114>)
 80033c4:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c6:	f7fe fdd4 	bl	8001f72 <HAL_DMA_Abort_IT>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d0a6      	beq.n	800331c <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ce:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80033d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033d2:	4798      	blx	r3
 80033d4:	e7a2      	b.n	800331c <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 80033d6:	0020      	movs	r0, r4
 80033d8:	f7ff fdc7 	bl	8002f6a <HAL_UART_ErrorCallback>
 80033dc:	e79e      	b.n	800331c <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 80033de:	f7ff fdc4 	bl	8002f6a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80033e4:	e79a      	b.n	800331c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	4213      	tst	r3, r2
 80033ea:	d005      	beq.n	80033f8 <HAL_UART_IRQHandler+0xfc>
 80033ec:	4211      	tst	r1, r2
 80033ee:	d003      	beq.n	80033f8 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 80033f0:	0020      	movs	r0, r4
 80033f2:	f7ff ff05 	bl	8003200 <UART_Transmit_IT>
    return;
 80033f6:	e791      	b.n	800331c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f8:	2240      	movs	r2, #64	; 0x40
 80033fa:	4213      	tst	r3, r2
 80033fc:	d100      	bne.n	8003400 <HAL_UART_IRQHandler+0x104>
 80033fe:	e78d      	b.n	800331c <HAL_UART_IRQHandler+0x20>
 8003400:	4211      	tst	r1, r2
 8003402:	d100      	bne.n	8003406 <HAL_UART_IRQHandler+0x10a>
 8003404:	e78a      	b.n	800331c <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8003406:	0020      	movs	r0, r4
 8003408:	f7ff ff2c 	bl	8003264 <UART_EndTransmit_IT>
    return;
 800340c:	e786      	b.n	800331c <HAL_UART_IRQHandler+0x20>
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	08002f6d 	.word	0x08002f6d

08003414 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 8003416:	4c31      	ldr	r4, [pc, #196]	; (80034dc <MX_ADC_Init+0xc8>)
 8003418:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <MX_ADC_Init+0xcc>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800341a:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 800341c:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800341e:	2380      	movs	r3, #128	; 0x80
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003420:	6161      	str	r1, [r4, #20]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003422:	061b      	lsls	r3, r3, #24
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003424:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003426:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003428:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800342a:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800342c:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800342e:	0020      	movs	r0, r4
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003430:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003432:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003434:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003436:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003438:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800343a:	6223      	str	r3, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800343c:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800343e:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003440:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003442:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003444:	6362      	str	r2, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003446:	f7fe fb9d 	bl	8001b84 <HAL_ADC_Init>
 800344a:	2800      	cmp	r0, #0
 800344c:	d003      	beq.n	8003456 <MX_ADC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800344e:	214a      	movs	r1, #74	; 0x4a
 8003450:	4824      	ldr	r0, [pc, #144]	; (80034e4 <MX_ADC_Init+0xd0>)
 8003452:	f000 f93c 	bl	80036ce <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8003456:	2300      	movs	r3, #0
 8003458:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003460:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003462:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003464:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003466:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003468:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800346a:	f7fe fca5 	bl	8001db8 <HAL_ADC_ConfigChannel>
 800346e:	2800      	cmp	r0, #0
 8003470:	d003      	beq.n	800347a <MX_ADC_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003472:	2154      	movs	r1, #84	; 0x54
 8003474:	481b      	ldr	r0, [pc, #108]	; (80034e4 <MX_ADC_Init+0xd0>)
 8003476:	f000 f92a 	bl	80036ce <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 800347a:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800347c:	a901      	add	r1, sp, #4
 800347e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8003480:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003482:	f7fe fc99 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8003486:	2800      	cmp	r0, #0
 8003488:	d003      	beq.n	8003492 <MX_ADC_Init+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800348a:	215c      	movs	r1, #92	; 0x5c
 800348c:	4815      	ldr	r0, [pc, #84]	; (80034e4 <MX_ADC_Init+0xd0>)
 800348e:	f000 f91e 	bl	80036ce <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8003492:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003494:	a901      	add	r1, sp, #4
 8003496:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8003498:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800349a:	f7fe fc8d 	bl	8001db8 <HAL_ADC_ConfigChannel>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d003      	beq.n	80034aa <MX_ADC_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034a2:	2164      	movs	r1, #100	; 0x64
 80034a4:	480f      	ldr	r0, [pc, #60]	; (80034e4 <MX_ADC_Init+0xd0>)
 80034a6:	f000 f912 	bl	80036ce <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80034aa:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034ac:	a901      	add	r1, sp, #4
 80034ae:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80034b0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034b2:	f7fe fc81 	bl	8001db8 <HAL_ADC_ConfigChannel>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d003      	beq.n	80034c2 <MX_ADC_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034ba:	216c      	movs	r1, #108	; 0x6c
 80034bc:	4809      	ldr	r0, [pc, #36]	; (80034e4 <MX_ADC_Init+0xd0>)
 80034be:	f000 f906 	bl	80036ce <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80034c2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034c4:	a901      	add	r1, sp, #4
 80034c6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80034c8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034ca:	f7fe fc75 	bl	8001db8 <HAL_ADC_ConfigChannel>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d003      	beq.n	80034da <MX_ADC_Init+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034d2:	2174      	movs	r1, #116	; 0x74
 80034d4:	4803      	ldr	r0, [pc, #12]	; (80034e4 <MX_ADC_Init+0xd0>)
 80034d6:	f000 f8fa 	bl	80036ce <_Error_Handler>
  }

}
 80034da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80034dc:	20000080 	.word	0x20000080
 80034e0:	40012400 	.word	0x40012400
 80034e4:	08003c5c 	.word	0x08003c5c

080034e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034e8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_ADC_MspInit+0x4c>)
 80034ec:	6802      	ldr	r2, [r0, #0]
{
 80034ee:	b086      	sub	sp, #24
  if(adcHandle->Instance==ADC1)
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d11c      	bne.n	800352e <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034f4:	2080      	movs	r0, #128	; 0x80
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_ADC_MspInit+0x50>)
 80034f8:	0080      	lsls	r0, r0, #2
 80034fa:	6991      	ldr	r1, [r2, #24]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
                          |ADCMainBatVoltage_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034fe:	4301      	orrs	r1, r0
 8003500:	6191      	str	r1, [r2, #24]
 8003502:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003504:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003506:	4003      	ands	r3, r0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
 800350e:	231f      	movs	r3, #31
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
 8003512:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003514:	3b1c      	subs	r3, #28
 8003516:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f7fe fd4d 	bl	8001fb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800351e:	200c      	movs	r0, #12
 8003520:	0022      	movs	r2, r4
 8003522:	0021      	movs	r1, r4
 8003524:	f7fe fcbe 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003528:	200c      	movs	r0, #12
 800352a:	f7fe fceb 	bl	8001f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800352e:	b006      	add	sp, #24
 8003530:	bd10      	pop	{r4, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	40012400 	.word	0x40012400
 8003538:	40021000 	.word	0x40021000

0800353c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800353c:	2080      	movs	r0, #128	; 0x80
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <MX_GPIO_Init+0xdc>)
 8003540:	0300      	lsls	r0, r0, #12
 8003542:	6959      	ldr	r1, [r3, #20]
{
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003546:	4301      	orrs	r1, r0
 8003548:	6159      	str	r1, [r3, #20]
 800354a:	695a      	ldr	r2, [r3, #20]
{
 800354c:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800354e:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003550:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	9201      	str	r2, [sp, #4]
 8003554:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003556:	6959      	ldr	r1, [r3, #20]
 8003558:	03c0      	lsls	r0, r0, #15
 800355a:	4301      	orrs	r1, r0
 800355c:	6159      	str	r1, [r3, #20]
 800355e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8003560:	2790      	movs	r7, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003562:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003564:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003566:	9202      	str	r2, [sp, #8]
 8003568:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	6959      	ldr	r1, [r3, #20]
 800356c:	0280      	lsls	r0, r0, #10
 800356e:	4301      	orrs	r1, r0
 8003570:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003572:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003574:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003578:	4002      	ands	r2, r0
 800357a:	9203      	str	r2, [sp, #12]
 800357c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8003580:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	430a      	orrs	r2, r1
 8003584:	615a      	str	r2, [r3, #20]
 8003586:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
 8003588:	4e24      	ldr	r6, [pc, #144]	; (800361c <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	400b      	ands	r3, r1
 800358c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 800358e:	0038      	movs	r0, r7
 8003590:	2200      	movs	r2, #0
 8003592:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003594:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 8003596:	f7fe fdbf 	bl	8002118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
 800359a:	2200      	movs	r2, #0
 800359c:	0030      	movs	r0, r6
 800359e:	2104      	movs	r1, #4
 80035a0:	f7fe fdba 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035a4:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a8:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035aa:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ac:	a905      	add	r1, sp, #20
 80035ae:	481c      	ldr	r0, [pc, #112]	; (8003620 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b6:	f7fe fcff 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	a905      	add	r1, sp, #20
 80035be:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 80035c0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f7fe fcf7 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BurstOFF6V_Pin|BurstOFF5V_Pin;
 80035ca:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = BurstOFF6V_Pin|BurstOFF5V_Pin;
 80035ce:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d2:	3bbf      	subs	r3, #191	; 0xbf
 80035d4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f7fe fced 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDProblem_Pin;
 80035de:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 80035e0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LEDProblem_Pin;
 80035e2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 80035e4:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	3b03      	subs	r3, #3
 80035e8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f7fe fce3 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <MX_GPIO_Init+0xec>)
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f4:	a905      	add	r1, sp, #20
 80035f6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80035f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035fa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	f7fe fcdb 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003602:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003604:	a905      	add	r1, sp, #20
 8003606:	4809      	ldr	r0, [pc, #36]	; (800362c <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003608:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800360e:	f7fe fcd3 	bl	8001fb8 <HAL_GPIO_Init>

}
 8003612:	b00b      	add	sp, #44	; 0x2c
 8003614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	40021000 	.word	0x40021000
 800361c:	48000400 	.word	0x48000400
 8003620:	48000800 	.word	0x48000800
 8003624:	00009020 	.word	0x00009020
 8003628:	0000ff38 	.word	0x0000ff38
 800362c:	48001400 	.word	0x48001400

08003630 <SystemClock_Config>:
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003630:	2380      	movs	r3, #128	; 0x80
{
 8003632:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003634:	025b      	lsls	r3, r3, #9
{
 8003636:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003638:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800363a:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800363c:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800363e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003640:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003642:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003644:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003646:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003648:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800364a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800364c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800364e:	f7fe fd69 	bl	8002124 <HAL_RCC_OscConfig>
 8003652:	2800      	cmp	r0, #0
 8003654:	d000      	beq.n	8003658 <SystemClock_Config+0x28>
 8003656:	e7fe      	b.n	8003656 <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003658:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800365a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800365c:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800365e:	0021      	movs	r1, r4
 8003660:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003662:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003664:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003666:	f7fe ff71 	bl	800254c <HAL_RCC_ClockConfig>
 800366a:	2800      	cmp	r0, #0
 800366c:	d000      	beq.n	8003670 <SystemClock_Config+0x40>
 800366e:	e7fe      	b.n	800366e <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003670:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003672:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003674:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003676:	f7ff f815 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 800367a:	1e04      	subs	r4, r0, #0
 800367c:	d000      	beq.n	8003680 <SystemClock_Config+0x50>
 800367e:	e7fe      	b.n	800367e <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003680:	f7fe fffa 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8003684:	21fa      	movs	r1, #250	; 0xfa
 8003686:	0089      	lsls	r1, r1, #2
 8003688:	f7fc fd52 	bl	8000130 <__udivsi3>
 800368c:	f7fe fc44 	bl	8001f18 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003690:	2004      	movs	r0, #4
 8003692:	f7fe fc5b 	bl	8001f4c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003696:	2001      	movs	r0, #1
 8003698:	0022      	movs	r2, r4
 800369a:	0021      	movs	r1, r4
 800369c:	4240      	negs	r0, r0
 800369e:	f7fe fc01 	bl	8001ea4 <HAL_NVIC_SetPriority>
}
 80036a2:	b015      	add	sp, #84	; 0x54
 80036a4:	bd30      	pop	{r4, r5, pc}

080036a6 <main>:
{
 80036a6:	b510      	push	{r4, lr}
  HAL_Init();
 80036a8:	f7fe fa4e 	bl	8001b48 <HAL_Init>
  SystemClock_Config();
 80036ac:	f7ff ffc0 	bl	8003630 <SystemClock_Config>
  MX_GPIO_Init();
 80036b0:	f7ff ff44 	bl	800353c <MX_GPIO_Init>
  MX_TIM1_Init();
 80036b4:	f000 f8dc 	bl	8003870 <MX_TIM1_Init>
  MX_ADC_Init();
 80036b8:	f7ff feac 	bl	8003414 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80036bc:	f000 f9aa 	bl	8003a14 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80036c0:	f000 f958 	bl	8003974 <MX_TIM3_Init>
  APP_Init();
 80036c4:	f7fe f901 	bl	80018ca <APP_Init>
  APP_TestApplication();
 80036c8:	f7fe f8fe 	bl	80018c8 <APP_TestApplication>
 80036cc:	e7fe      	b.n	80036cc <main+0x26>

080036ce <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036ce:	e7fe      	b.n	80036ce <_Error_Handler>

080036d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d2:	2001      	movs	r0, #1
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_MspInit+0x4c>)
 80036d6:	6999      	ldr	r1, [r3, #24]
 80036d8:	4301      	orrs	r1, r0
 80036da:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036de:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	4002      	ands	r2, r0
 80036e4:	9200      	str	r2, [sp, #0]
 80036e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80036ea:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	430a      	orrs	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80036f0:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	400b      	ands	r3, r1
 80036f6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80036f8:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80036fc:	f7fe fbd2 	bl	8001ea4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2002      	movs	r0, #2
 8003704:	0011      	movs	r1, r2
 8003706:	4240      	negs	r0, r0
 8003708:	f7fe fbcc 	bl	8001ea4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800370c:	2200      	movs	r2, #0
 800370e:	2001      	movs	r0, #1
 8003710:	0011      	movs	r1, r2
 8003712:	4240      	negs	r0, r0
 8003714:	f7fe fbc6 	bl	8001ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003718:	bd07      	pop	{r0, r1, r2, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	40021000 	.word	0x40021000

08003720 <NMI_Handler>:
 8003720:	4770      	bx	lr

08003722 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003722:	e7fe      	b.n	8003722 <HardFault_Handler>

08003724 <SVC_Handler>:
 8003724:	4770      	bx	lr

08003726 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003726:	4770      	bx	lr

08003728 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003728:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800372a:	f7fe fa1d 	bl	8001b68 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800372e:	f7fe fc1c 	bl	8001f6a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003732:	bd10      	pop	{r4, pc}

08003734 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC global interrupt.
*/
void ADC1_IRQHandler(void)
{
 8003734:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003736:	4802      	ldr	r0, [pc, #8]	; (8003740 <ADC1_IRQHandler+0xc>)
 8003738:	f7fe face 	bl	8001cd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800373c:	bd10      	pop	{r4, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	20000080 	.word	0x20000080

08003744 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003744:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003746:	4802      	ldr	r0, [pc, #8]	; (8003750 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8003748:	f7ff f903 	bl	8002952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800374c:	bd10      	pop	{r4, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	2000010c 	.word	0x2000010c

08003754 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003754:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003756:	4802      	ldr	r0, [pc, #8]	; (8003760 <USART1_IRQHandler+0xc>)
 8003758:	f7ff fdd0 	bl	80032fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800375c:	bd10      	pop	{r4, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	2000014c 	.word	0x2000014c

08003764 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003764:	2101      	movs	r1, #1
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003768:	4811      	ldr	r0, [pc, #68]	; (80037b0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	4002      	ands	r2, r0
 8003774:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	480e      	ldr	r0, [pc, #56]	; (80037b4 <SystemInit+0x50>)
 800377a:	4002      	ands	r2, r0
 800377c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	480d      	ldr	r0, [pc, #52]	; (80037b8 <SystemInit+0x54>)
 8003782:	4002      	ands	r2, r0
 8003784:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <SystemInit+0x58>)
 800378a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800378c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800378e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	4382      	bics	r2, r0
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003798:	4809      	ldr	r0, [pc, #36]	; (80037c0 <SystemInit+0x5c>)
 800379a:	4002      	ands	r2, r0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800379e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a0:	438a      	bics	r2, r1
 80037a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]

}
 80037a8:	4770      	bx	lr
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08ffb80c 	.word	0x08ffb80c
 80037b4:	fef6ffff 	.word	0xfef6ffff
 80037b8:	fffbffff 	.word	0xfffbffff
 80037bc:	ffc0ffff 	.word	0xffc0ffff
 80037c0:	fffffeec 	.word	0xfffffeec

080037c4 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80037c4:	b507      	push	{r0, r1, r2, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80037c6:	6803      	ldr	r3, [r0, #0]
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HAL_TIM_PWM_MspInit+0x4c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d112      	bne.n	80037f4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ce:	2080      	movs	r0, #128	; 0x80
 80037d0:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_TIM_PWM_MspInit+0x50>)
 80037d2:	0100      	lsls	r0, r0, #4
 80037d4:	6991      	ldr	r1, [r2, #24]
 80037d6:	4301      	orrs	r1, r0
 80037d8:	6191      	str	r1, [r2, #24]
 80037da:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80037dc:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037de:	4003      	ands	r3, r0
 80037e0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80037e2:	200d      	movs	r0, #13
 80037e4:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037e6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80037e8:	f7fe fb5c 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80037ec:	200d      	movs	r0, #13
 80037ee:	f7fe fb89 	bl	8001f04 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037f2:	bd07      	pop	{r0, r1, r2, pc}
  else if(tim_pwmHandle->Instance==TIM3)
 80037f4:	4a08      	ldr	r2, [pc, #32]	; (8003818 <HAL_TIM_PWM_MspInit+0x54>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d1fb      	bne.n	80037f2 <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037fa:	2002      	movs	r0, #2
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <HAL_TIM_PWM_MspInit+0x50>)
 80037fe:	69d1      	ldr	r1, [r2, #28]
 8003800:	4301      	orrs	r1, r0
 8003802:	61d1      	str	r1, [r2, #28]
 8003804:	69d3      	ldr	r3, [r2, #28]
 8003806:	4003      	ands	r3, r0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	9b01      	ldr	r3, [sp, #4]
}
 800380c:	e7f1      	b.n	80037f2 <HAL_TIM_PWM_MspInit+0x2e>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40000400 	.word	0x40000400

0800381c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800381c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_TIM_MspPostInit+0x48>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10f      	bne.n	8003846 <HAL_TIM_MspPostInit+0x2a>
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003826:	23f0      	movs	r3, #240	; 0xf0
 8003828:	011b      	lsls	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800382c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003834:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003838:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	a901      	add	r1, sp, #4
 800383c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = LEDHeartbeat_Pin|LEDOrange_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	f7fe fbbb 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003842:	b007      	add	sp, #28
 8003844:	bd00      	pop	{pc}
  else if(timHandle->Instance==TIM3)
 8003846:	4a08      	ldr	r2, [pc, #32]	; (8003868 <HAL_TIM_MspPostInit+0x4c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d1fa      	bne.n	8003842 <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = LEDHeartbeat_Pin|LEDOrange_Pin;
 800384c:	2303      	movs	r3, #3
 800384e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	3b01      	subs	r3, #1
 8003852:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003858:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800385a:	3301      	adds	r3, #1
 800385c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	a901      	add	r1, sp, #4
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <HAL_TIM_MspPostInit+0x50>)
 8003862:	e7ec      	b.n	800383e <HAL_TIM_MspPostInit+0x22>
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40000400 	.word	0x40000400
 800386c:	48000400 	.word	0x48000400

08003870 <MX_TIM1_Init>:
{
 8003870:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8003872:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <MX_TIM1_Init+0xf8>)
 8003874:	4c3d      	ldr	r4, [pc, #244]	; (800396c <MX_TIM1_Init+0xfc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003876:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8003878:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 800387a:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800387c:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = 1000/2;
 800387e:	32d5      	adds	r2, #213	; 0xd5
{
 8003880:	b090      	sub	sp, #64	; 0x40
  htim1.Init.Period = 1000/2;
 8003882:	32ff      	adds	r2, #255	; 0xff
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003884:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 8003886:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1000/2;
 8003888:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800388c:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003890:	f7ff f94c 	bl	8002b2c <HAL_TIM_PWM_Init>
 8003894:	2800      	cmp	r0, #0
 8003896:	d003      	beq.n	80038a0 <MX_TIM1_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8003898:	2142      	movs	r1, #66	; 0x42
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <MX_TIM1_Init+0x100>)
 800389c:	f7ff ff17 	bl	80036ce <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038a2:	4669      	mov	r1, sp
 80038a4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038aa:	f7ff fa75 	bl	8002d98 <HAL_TIMEx_MasterConfigSynchronization>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d003      	beq.n	80038ba <MX_TIM1_Init+0x4a>
    _Error_Handler(__FILE__, __LINE__);
 80038b2:	2149      	movs	r1, #73	; 0x49
 80038b4:	482e      	ldr	r0, [pc, #184]	; (8003970 <MX_TIM1_Init+0x100>)
 80038b6:	f7ff ff0a 	bl	80036ce <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ba:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038bc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038be:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 600;
 80038c0:	33f9      	adds	r3, #249	; 0xf9
 80038c2:	33ff      	adds	r3, #255	; 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038c4:	a902      	add	r1, sp, #8
 80038c6:	0020      	movs	r0, r4
  sConfigOC.Pulse = 600;
 80038c8:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ca:	9204      	str	r2, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038cc:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ce:	9206      	str	r2, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038d0:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038d2:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038d4:	f7ff f986 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d003      	beq.n	80038e4 <MX_TIM1_Init+0x74>
    _Error_Handler(__FILE__, __LINE__);
 80038dc:	2155      	movs	r1, #85	; 0x55
 80038de:	4824      	ldr	r0, [pc, #144]	; (8003970 <MX_TIM1_Init+0x100>)
 80038e0:	f7ff fef5 	bl	80036ce <_Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80038e4:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038e6:	2204      	movs	r2, #4
 80038e8:	a902      	add	r1, sp, #8
 80038ea:	0020      	movs	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80038ec:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038ee:	f7ff f979 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d003      	beq.n	80038fe <MX_TIM1_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 80038f6:	215b      	movs	r1, #91	; 0x5b
 80038f8:	481d      	ldr	r0, [pc, #116]	; (8003970 <MX_TIM1_Init+0x100>)
 80038fa:	f7ff fee8 	bl	80036ce <_Error_Handler>
  sConfigOC.Pulse = 0;
 80038fe:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003900:	2208      	movs	r2, #8
 8003902:	a902      	add	r1, sp, #8
 8003904:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0;
 8003906:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003908:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800390a:	f7ff f96b 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 800390e:	2800      	cmp	r0, #0
 8003910:	d003      	beq.n	800391a <MX_TIM1_Init+0xaa>
    _Error_Handler(__FILE__, __LINE__);
 8003912:	2162      	movs	r1, #98	; 0x62
 8003914:	4816      	ldr	r0, [pc, #88]	; (8003970 <MX_TIM1_Init+0x100>)
 8003916:	f7ff feda 	bl	80036ce <_Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800391a:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800391c:	220c      	movs	r2, #12
 800391e:	a902      	add	r1, sp, #8
 8003920:	0020      	movs	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003922:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003924:	f7ff f95e 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 8003928:	2800      	cmp	r0, #0
 800392a:	d003      	beq.n	8003934 <MX_TIM1_Init+0xc4>
    _Error_Handler(__FILE__, __LINE__);
 800392c:	2168      	movs	r1, #104	; 0x68
 800392e:	4810      	ldr	r0, [pc, #64]	; (8003970 <MX_TIM1_Init+0x100>)
 8003930:	f7ff fecd 	bl	80036ce <_Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003934:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003936:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003938:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800393a:	a909      	add	r1, sp, #36	; 0x24
 800393c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800393e:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003940:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003942:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003944:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003946:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003948:	920e      	str	r2, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800394a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800394c:	f7ff fa46 	bl	8002ddc <HAL_TIMEx_ConfigBreakDeadTime>
 8003950:	2800      	cmp	r0, #0
 8003952:	d003      	beq.n	800395c <MX_TIM1_Init+0xec>
    _Error_Handler(__FILE__, __LINE__);
 8003954:	2174      	movs	r1, #116	; 0x74
 8003956:	4806      	ldr	r0, [pc, #24]	; (8003970 <MX_TIM1_Init+0x100>)
 8003958:	f7ff feb9 	bl	80036ce <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800395c:	0020      	movs	r0, r4
 800395e:	f7ff ff5d 	bl	800381c <HAL_TIM_MspPostInit>
}
 8003962:	b010      	add	sp, #64	; 0x40
 8003964:	bd10      	pop	{r4, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	40012c00 	.word	0x40012c00
 800396c:	2000010c 	.word	0x2000010c
 8003970:	08003c81 	.word	0x08003c81

08003974 <MX_TIM3_Init>:
  htim3.Init.Period = 2400;
 8003974:	2296      	movs	r2, #150	; 0x96
{
 8003976:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <MX_TIM3_Init+0x90>)
 800397a:	4c23      	ldr	r4, [pc, #140]	; (8003a08 <MX_TIM3_Init+0x94>)
  htim3.Init.Period = 2400;
 800397c:	0112      	lsls	r2, r2, #4
  htim3.Instance = TIM3;
 800397e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 10000;
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <MX_TIM3_Init+0x98>)
  htim3.Init.Period = 2400;
 8003982:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003984:	2280      	movs	r2, #128	; 0x80
  htim3.Init.Prescaler = 10000;
 8003986:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003988:	2300      	movs	r3, #0
{
 800398a:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800398c:	0092      	lsls	r2, r2, #2
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800398e:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003990:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003992:	6122      	str	r2, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003994:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003996:	f7ff f8c9 	bl	8002b2c <HAL_TIM_PWM_Init>
 800399a:	2800      	cmp	r0, #0
 800399c:	d003      	beq.n	80039a6 <MX_TIM3_Init+0x32>
    _Error_Handler(__FILE__, __LINE__);
 800399e:	2188      	movs	r1, #136	; 0x88
 80039a0:	481b      	ldr	r0, [pc, #108]	; (8003a10 <MX_TIM3_Init+0x9c>)
 80039a2:	f7ff fe94 	bl	80036ce <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039a8:	a901      	add	r1, sp, #4
 80039aa:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ac:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ae:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039b0:	f7ff f9f2 	bl	8002d98 <HAL_TIMEx_MasterConfigSynchronization>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d003      	beq.n	80039c0 <MX_TIM3_Init+0x4c>
    _Error_Handler(__FILE__, __LINE__);
 80039b8:	218f      	movs	r1, #143	; 0x8f
 80039ba:	4815      	ldr	r0, [pc, #84]	; (8003a10 <MX_TIM3_Init+0x9c>)
 80039bc:	f7ff fe87 	bl	80036ce <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039c0:	2360      	movs	r3, #96	; 0x60
 80039c2:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80039c4:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039c6:	2208      	movs	r2, #8
 80039c8:	a903      	add	r1, sp, #12
 80039ca:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0;
 80039cc:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ce:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039d0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039d2:	f7ff f907 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d003      	beq.n	80039e2 <MX_TIM3_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 80039da:	2198      	movs	r1, #152	; 0x98
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <MX_TIM3_Init+0x9c>)
 80039de:	f7ff fe76 	bl	80036ce <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039e2:	220c      	movs	r2, #12
 80039e4:	a903      	add	r1, sp, #12
 80039e6:	0020      	movs	r0, r4
 80039e8:	f7ff f8fc 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d003      	beq.n	80039f8 <MX_TIM3_Init+0x84>
    _Error_Handler(__FILE__, __LINE__);
 80039f0:	219d      	movs	r1, #157	; 0x9d
 80039f2:	4807      	ldr	r0, [pc, #28]	; (8003a10 <MX_TIM3_Init+0x9c>)
 80039f4:	f7ff fe6b 	bl	80036ce <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80039f8:	0020      	movs	r0, r4
 80039fa:	f7ff ff0f 	bl	800381c <HAL_TIM_MspPostInit>
}
 80039fe:	b00a      	add	sp, #40	; 0x28
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40000400 	.word	0x40000400
 8003a08:	200000cc 	.word	0x200000cc
 8003a0c:	00002710 	.word	0x00002710
 8003a10:	08003c81 	.word	0x08003c81

08003a14 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003a14:	480c      	ldr	r0, [pc, #48]	; (8003a48 <MX_USART1_UART_Init+0x34>)
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <MX_USART1_UART_Init+0x38>)
{
 8003a18:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8003a1a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003a1c:	23e1      	movs	r3, #225	; 0xe1
 8003a1e:	025b      	lsls	r3, r3, #9
 8003a20:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a22:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a24:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a26:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a28:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a2a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a2c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a2e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a30:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a32:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a34:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a36:	f7ff fba7 	bl	8003188 <HAL_UART_Init>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d003      	beq.n	8003a46 <MX_USART1_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a3e:	2144      	movs	r1, #68	; 0x44
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <MX_USART1_UART_Init+0x3c>)
 8003a42:	f7ff fe44 	bl	80036ce <_Error_Handler>
  }

}
 8003a46:	bd10      	pop	{r4, pc}
 8003a48:	2000014c 	.word	0x2000014c
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	08003c8e 	.word	0x08003c8e

08003a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a54:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_UART_MspInit+0x50>)
 8003a58:	6802      	ldr	r2, [r0, #0]
{
 8003a5a:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART1)
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d11e      	bne.n	8003a9e <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a60:	2080      	movs	r0, #128	; 0x80
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_UART_MspInit+0x54>)
 8003a64:	01c0      	lsls	r0, r0, #7
 8003a66:	6991      	ldr	r1, [r2, #24]
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a6a:	4301      	orrs	r1, r0
 8003a6c:	6191      	str	r1, [r2, #24]
 8003a6e:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a72:	4003      	ands	r3, r0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a78:	23c0      	movs	r3, #192	; 0xc0
 8003a7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	3bbe      	subs	r3, #190	; 0xbe
 8003a7e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a80:	480a      	ldr	r0, [pc, #40]	; (8003aac <HAL_UART_MspInit+0x58>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a82:	3301      	adds	r3, #1
 8003a84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003a88:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f7fe fa95 	bl	8001fb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a8e:	201b      	movs	r0, #27
 8003a90:	0022      	movs	r2, r4
 8003a92:	0021      	movs	r1, r4
 8003a94:	f7fe fa06 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a98:	201b      	movs	r0, #27
 8003a9a:	f7fe fa33 	bl	8001f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a9e:	b006      	add	sp, #24
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40013800 	.word	0x40013800
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	48000400 	.word	0x48000400

08003ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ab2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <LoopForever+0x6>)
  ldr r1, =_edata
 8003ab6:	490e      	ldr	r1, [pc, #56]	; (8003af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ab8:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <LoopForever+0xe>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003abc:	e002      	b.n	8003ac4 <LoopCopyDataInit>

08003abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac2:	3304      	adds	r3, #4

08003ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac8:	d3f9      	bcc.n	8003abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003acc:	4c0b      	ldr	r4, [pc, #44]	; (8003afc <LoopForever+0x16>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad0:	e001      	b.n	8003ad6 <LoopFillZerobss>

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad4:	3204      	adds	r2, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ada:	f7ff fe43 	bl	8003764 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003ade:	f000 f811 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ae2:	f7ff fde0 	bl	80036a6 <main>

08003ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ae6:	e7fe      	b.n	8003ae6 <LoopForever>
  ldr   r0, =_estack
 8003ae8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003af4:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8003af8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003afc:	200001bc 	.word	0x200001bc

08003b00 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b00:	e7fe      	b.n	8003b00 <DMA1_Channel1_IRQHandler>
	...

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	2600      	movs	r6, #0
 8003b08:	4d0c      	ldr	r5, [pc, #48]	; (8003b3c <__libc_init_array+0x38>)
 8003b0a:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	2600      	movs	r6, #0
 8003b16:	f000 f823 	bl	8003b60 <_init>
 8003b1a:	4d0a      	ldr	r5, [pc, #40]	; (8003b44 <__libc_init_array+0x40>)
 8003b1c:	4c0a      	ldr	r4, [pc, #40]	; (8003b48 <__libc_init_array+0x44>)
 8003b1e:	1b64      	subs	r4, r4, r5
 8003b20:	10a4      	asrs	r4, r4, #2
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	00b3      	lsls	r3, r6, #2
 8003b2a:	58eb      	ldr	r3, [r5, r3]
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	00b3      	lsls	r3, r6, #2
 8003b34:	58eb      	ldr	r3, [r5, r3]
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08003ca0 	.word	0x08003ca0
 8003b40:	08003ca0 	.word	0x08003ca0
 8003b44:	08003ca0 	.word	0x08003ca0
 8003b48:	08003ca4 	.word	0x08003ca4

08003b4c <memcpy>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d100      	bne.n	8003b56 <memcpy+0xa>
 8003b54:	bd10      	pop	{r4, pc}
 8003b56:	5ccc      	ldrb	r4, [r1, r3]
 8003b58:	54c4      	strb	r4, [r0, r3]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	e7f8      	b.n	8003b50 <memcpy+0x4>
	...

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
