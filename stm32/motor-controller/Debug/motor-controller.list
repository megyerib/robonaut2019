
motor-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  20000010  08003be4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001bc  08003be4  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001aaed  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000037d1  00000000  00000000  0003ab25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b28  00000000  00000000  0003e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f98  00000000  00000000  0003ee20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007315  00000000  00000000  0003fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c2e  00000000  00000000  000470cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004acfb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000022e0  00000000  00000000  0004ad78  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00008167  00000000  00000000  0004d058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a8c 	.word	0x08003a8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003a8c 	.word	0x08003a8c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cfrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	1c08      	adds	r0, r1, #0
 800024c:	4661      	mov	r1, ip
 800024e:	e7ff      	b.n	8000250 <__aeabi_cfcmpeq>

08000250 <__aeabi_cfcmpeq>:
 8000250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000252:	f000 fb73 	bl	800093c <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	d401      	bmi.n	800025e <__aeabi_cfcmpeq+0xe>
 800025a:	2100      	movs	r1, #0
 800025c:	42c8      	cmn	r0, r1
 800025e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000260 <__aeabi_fcmpeq>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fb05 	bl	8000870 <__eqsf2>
 8000266:	4240      	negs	r0, r0
 8000268:	3001      	adds	r0, #1
 800026a:	bd10      	pop	{r4, pc}

0800026c <__aeabi_fcmplt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb65 	bl	800093c <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	db01      	blt.n	800027a <__aeabi_fcmplt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmple>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb5b 	bl	800093c <__lesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dd01      	ble.n	800028e <__aeabi_fcmple+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpgt>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fb11 	bl	80008bc <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	dc01      	bgt.n	80002a2 <__aeabi_fcmpgt+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_fcmpge>:
 80002a8:	b510      	push	{r4, lr}
 80002aa:	f000 fb07 	bl	80008bc <__gesf2>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	da01      	bge.n	80002b6 <__aeabi_fcmpge+0xe>
 80002b2:	2000      	movs	r0, #0
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_fadd>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	46c6      	mov	lr, r8
 80002c0:	024e      	lsls	r6, r1, #9
 80002c2:	0247      	lsls	r7, r0, #9
 80002c4:	0a76      	lsrs	r6, r6, #9
 80002c6:	0a7b      	lsrs	r3, r7, #9
 80002c8:	0044      	lsls	r4, r0, #1
 80002ca:	0fc5      	lsrs	r5, r0, #31
 80002cc:	00f7      	lsls	r7, r6, #3
 80002ce:	0048      	lsls	r0, r1, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	b500      	push	{lr}
 80002d4:	0e24      	lsrs	r4, r4, #24
 80002d6:	002a      	movs	r2, r5
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	0e00      	lsrs	r0, r0, #24
 80002dc:	0fc9      	lsrs	r1, r1, #31
 80002de:	46bc      	mov	ip, r7
 80002e0:	428d      	cmp	r5, r1
 80002e2:	d067      	beq.n	80003b4 <__aeabi_fadd+0xf8>
 80002e4:	1a22      	subs	r2, r4, r0
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	dc00      	bgt.n	80002ec <__aeabi_fadd+0x30>
 80002ea:	e0a5      	b.n	8000438 <__aeabi_fadd+0x17c>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d13a      	bne.n	8000366 <__aeabi_fadd+0xaa>
 80002f0:	2f00      	cmp	r7, #0
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fadd+0x3a>
 80002f4:	e093      	b.n	800041e <__aeabi_fadd+0x162>
 80002f6:	1e51      	subs	r1, r2, #1
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d000      	beq.n	80002fe <__aeabi_fadd+0x42>
 80002fc:	e0bc      	b.n	8000478 <__aeabi_fadd+0x1bc>
 80002fe:	2401      	movs	r4, #1
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	015a      	lsls	r2, r3, #5
 8000304:	d546      	bpl.n	8000394 <__aeabi_fadd+0xd8>
 8000306:	019b      	lsls	r3, r3, #6
 8000308:	099e      	lsrs	r6, r3, #6
 800030a:	0030      	movs	r0, r6
 800030c:	f001 fa10 	bl	8001730 <__clzsi2>
 8000310:	3805      	subs	r0, #5
 8000312:	4086      	lsls	r6, r0
 8000314:	4284      	cmp	r4, r0
 8000316:	dd00      	ble.n	800031a <__aeabi_fadd+0x5e>
 8000318:	e09d      	b.n	8000456 <__aeabi_fadd+0x19a>
 800031a:	1b04      	subs	r4, r0, r4
 800031c:	0032      	movs	r2, r6
 800031e:	2020      	movs	r0, #32
 8000320:	3401      	adds	r4, #1
 8000322:	40e2      	lsrs	r2, r4
 8000324:	1b04      	subs	r4, r0, r4
 8000326:	40a6      	lsls	r6, r4
 8000328:	0033      	movs	r3, r6
 800032a:	1e5e      	subs	r6, r3, #1
 800032c:	41b3      	sbcs	r3, r6
 800032e:	2400      	movs	r4, #0
 8000330:	4313      	orrs	r3, r2
 8000332:	075a      	lsls	r2, r3, #29
 8000334:	d004      	beq.n	8000340 <__aeabi_fadd+0x84>
 8000336:	220f      	movs	r2, #15
 8000338:	401a      	ands	r2, r3
 800033a:	2a04      	cmp	r2, #4
 800033c:	d000      	beq.n	8000340 <__aeabi_fadd+0x84>
 800033e:	3304      	adds	r3, #4
 8000340:	015a      	lsls	r2, r3, #5
 8000342:	d529      	bpl.n	8000398 <__aeabi_fadd+0xdc>
 8000344:	3401      	adds	r4, #1
 8000346:	2cff      	cmp	r4, #255	; 0xff
 8000348:	d100      	bne.n	800034c <__aeabi_fadd+0x90>
 800034a:	e081      	b.n	8000450 <__aeabi_fadd+0x194>
 800034c:	002a      	movs	r2, r5
 800034e:	019b      	lsls	r3, r3, #6
 8000350:	0a5b      	lsrs	r3, r3, #9
 8000352:	b2e4      	uxtb	r4, r4
 8000354:	025b      	lsls	r3, r3, #9
 8000356:	05e4      	lsls	r4, r4, #23
 8000358:	0a58      	lsrs	r0, r3, #9
 800035a:	07d2      	lsls	r2, r2, #31
 800035c:	4320      	orrs	r0, r4
 800035e:	4310      	orrs	r0, r2
 8000360:	bc04      	pop	{r2}
 8000362:	4690      	mov	r8, r2
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000366:	2cff      	cmp	r4, #255	; 0xff
 8000368:	d0e3      	beq.n	8000332 <__aeabi_fadd+0x76>
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0038      	movs	r0, r7
 800036e:	04c9      	lsls	r1, r1, #19
 8000370:	4308      	orrs	r0, r1
 8000372:	4684      	mov	ip, r0
 8000374:	2a1b      	cmp	r2, #27
 8000376:	dd00      	ble.n	800037a <__aeabi_fadd+0xbe>
 8000378:	e082      	b.n	8000480 <__aeabi_fadd+0x1c4>
 800037a:	2020      	movs	r0, #32
 800037c:	4661      	mov	r1, ip
 800037e:	40d1      	lsrs	r1, r2
 8000380:	1a82      	subs	r2, r0, r2
 8000382:	4660      	mov	r0, ip
 8000384:	4090      	lsls	r0, r2
 8000386:	0002      	movs	r2, r0
 8000388:	1e50      	subs	r0, r2, #1
 800038a:	4182      	sbcs	r2, r0
 800038c:	430a      	orrs	r2, r1
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	015a      	lsls	r2, r3, #5
 8000392:	d4b8      	bmi.n	8000306 <__aeabi_fadd+0x4a>
 8000394:	075a      	lsls	r2, r3, #29
 8000396:	d1ce      	bne.n	8000336 <__aeabi_fadd+0x7a>
 8000398:	08de      	lsrs	r6, r3, #3
 800039a:	002a      	movs	r2, r5
 800039c:	2cff      	cmp	r4, #255	; 0xff
 800039e:	d13a      	bne.n	8000416 <__aeabi_fadd+0x15a>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d100      	bne.n	80003a6 <__aeabi_fadd+0xea>
 80003a4:	e0ae      	b.n	8000504 <__aeabi_fadd+0x248>
 80003a6:	2380      	movs	r3, #128	; 0x80
 80003a8:	03db      	lsls	r3, r3, #15
 80003aa:	4333      	orrs	r3, r6
 80003ac:	025b      	lsls	r3, r3, #9
 80003ae:	0a5b      	lsrs	r3, r3, #9
 80003b0:	24ff      	movs	r4, #255	; 0xff
 80003b2:	e7cf      	b.n	8000354 <__aeabi_fadd+0x98>
 80003b4:	1a21      	subs	r1, r4, r0
 80003b6:	2900      	cmp	r1, #0
 80003b8:	dd52      	ble.n	8000460 <__aeabi_fadd+0x1a4>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d031      	beq.n	8000422 <__aeabi_fadd+0x166>
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	d0b7      	beq.n	8000332 <__aeabi_fadd+0x76>
 80003c2:	2080      	movs	r0, #128	; 0x80
 80003c4:	003e      	movs	r6, r7
 80003c6:	04c0      	lsls	r0, r0, #19
 80003c8:	4306      	orrs	r6, r0
 80003ca:	46b4      	mov	ip, r6
 80003cc:	291b      	cmp	r1, #27
 80003ce:	dd00      	ble.n	80003d2 <__aeabi_fadd+0x116>
 80003d0:	e0aa      	b.n	8000528 <__aeabi_fadd+0x26c>
 80003d2:	2620      	movs	r6, #32
 80003d4:	4660      	mov	r0, ip
 80003d6:	40c8      	lsrs	r0, r1
 80003d8:	1a71      	subs	r1, r6, r1
 80003da:	4666      	mov	r6, ip
 80003dc:	408e      	lsls	r6, r1
 80003de:	0031      	movs	r1, r6
 80003e0:	1e4e      	subs	r6, r1, #1
 80003e2:	41b1      	sbcs	r1, r6
 80003e4:	4301      	orrs	r1, r0
 80003e6:	185b      	adds	r3, r3, r1
 80003e8:	0159      	lsls	r1, r3, #5
 80003ea:	d5d3      	bpl.n	8000394 <__aeabi_fadd+0xd8>
 80003ec:	3401      	adds	r4, #1
 80003ee:	2cff      	cmp	r4, #255	; 0xff
 80003f0:	d100      	bne.n	80003f4 <__aeabi_fadd+0x138>
 80003f2:	e087      	b.n	8000504 <__aeabi_fadd+0x248>
 80003f4:	2201      	movs	r2, #1
 80003f6:	4978      	ldr	r1, [pc, #480]	; (80005d8 <__aeabi_fadd+0x31c>)
 80003f8:	401a      	ands	r2, r3
 80003fa:	085b      	lsrs	r3, r3, #1
 80003fc:	400b      	ands	r3, r1
 80003fe:	4313      	orrs	r3, r2
 8000400:	e797      	b.n	8000332 <__aeabi_fadd+0x76>
 8000402:	2c00      	cmp	r4, #0
 8000404:	d000      	beq.n	8000408 <__aeabi_fadd+0x14c>
 8000406:	e0a7      	b.n	8000558 <__aeabi_fadd+0x29c>
 8000408:	2b00      	cmp	r3, #0
 800040a:	d000      	beq.n	800040e <__aeabi_fadd+0x152>
 800040c:	e0b6      	b.n	800057c <__aeabi_fadd+0x2c0>
 800040e:	1e3b      	subs	r3, r7, #0
 8000410:	d162      	bne.n	80004d8 <__aeabi_fadd+0x21c>
 8000412:	2600      	movs	r6, #0
 8000414:	2200      	movs	r2, #0
 8000416:	0273      	lsls	r3, r6, #9
 8000418:	0a5b      	lsrs	r3, r3, #9
 800041a:	b2e4      	uxtb	r4, r4
 800041c:	e79a      	b.n	8000354 <__aeabi_fadd+0x98>
 800041e:	0014      	movs	r4, r2
 8000420:	e787      	b.n	8000332 <__aeabi_fadd+0x76>
 8000422:	2f00      	cmp	r7, #0
 8000424:	d04d      	beq.n	80004c2 <__aeabi_fadd+0x206>
 8000426:	1e48      	subs	r0, r1, #1
 8000428:	2800      	cmp	r0, #0
 800042a:	d157      	bne.n	80004dc <__aeabi_fadd+0x220>
 800042c:	4463      	add	r3, ip
 800042e:	2401      	movs	r4, #1
 8000430:	015a      	lsls	r2, r3, #5
 8000432:	d5af      	bpl.n	8000394 <__aeabi_fadd+0xd8>
 8000434:	2402      	movs	r4, #2
 8000436:	e7dd      	b.n	80003f4 <__aeabi_fadd+0x138>
 8000438:	2a00      	cmp	r2, #0
 800043a:	d124      	bne.n	8000486 <__aeabi_fadd+0x1ca>
 800043c:	1c62      	adds	r2, r4, #1
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	2a01      	cmp	r2, #1
 8000442:	ddde      	ble.n	8000402 <__aeabi_fadd+0x146>
 8000444:	1bde      	subs	r6, r3, r7
 8000446:	0172      	lsls	r2, r6, #5
 8000448:	d535      	bpl.n	80004b6 <__aeabi_fadd+0x1fa>
 800044a:	1afe      	subs	r6, r7, r3
 800044c:	000d      	movs	r5, r1
 800044e:	e75c      	b.n	800030a <__aeabi_fadd+0x4e>
 8000450:	002a      	movs	r2, r5
 8000452:	2300      	movs	r3, #0
 8000454:	e77e      	b.n	8000354 <__aeabi_fadd+0x98>
 8000456:	0033      	movs	r3, r6
 8000458:	4a60      	ldr	r2, [pc, #384]	; (80005dc <__aeabi_fadd+0x320>)
 800045a:	1a24      	subs	r4, r4, r0
 800045c:	4013      	ands	r3, r2
 800045e:	e768      	b.n	8000332 <__aeabi_fadd+0x76>
 8000460:	2900      	cmp	r1, #0
 8000462:	d163      	bne.n	800052c <__aeabi_fadd+0x270>
 8000464:	1c61      	adds	r1, r4, #1
 8000466:	b2c8      	uxtb	r0, r1
 8000468:	2801      	cmp	r0, #1
 800046a:	dd4e      	ble.n	800050a <__aeabi_fadd+0x24e>
 800046c:	29ff      	cmp	r1, #255	; 0xff
 800046e:	d049      	beq.n	8000504 <__aeabi_fadd+0x248>
 8000470:	4463      	add	r3, ip
 8000472:	085b      	lsrs	r3, r3, #1
 8000474:	000c      	movs	r4, r1
 8000476:	e75c      	b.n	8000332 <__aeabi_fadd+0x76>
 8000478:	2aff      	cmp	r2, #255	; 0xff
 800047a:	d041      	beq.n	8000500 <__aeabi_fadd+0x244>
 800047c:	000a      	movs	r2, r1
 800047e:	e779      	b.n	8000374 <__aeabi_fadd+0xb8>
 8000480:	2201      	movs	r2, #1
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	e784      	b.n	8000390 <__aeabi_fadd+0xd4>
 8000486:	2c00      	cmp	r4, #0
 8000488:	d01d      	beq.n	80004c6 <__aeabi_fadd+0x20a>
 800048a:	28ff      	cmp	r0, #255	; 0xff
 800048c:	d022      	beq.n	80004d4 <__aeabi_fadd+0x218>
 800048e:	2480      	movs	r4, #128	; 0x80
 8000490:	04e4      	lsls	r4, r4, #19
 8000492:	4252      	negs	r2, r2
 8000494:	4323      	orrs	r3, r4
 8000496:	2a1b      	cmp	r2, #27
 8000498:	dd00      	ble.n	800049c <__aeabi_fadd+0x1e0>
 800049a:	e08a      	b.n	80005b2 <__aeabi_fadd+0x2f6>
 800049c:	001c      	movs	r4, r3
 800049e:	2520      	movs	r5, #32
 80004a0:	40d4      	lsrs	r4, r2
 80004a2:	1aaa      	subs	r2, r5, r2
 80004a4:	4093      	lsls	r3, r2
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	4193      	sbcs	r3, r2
 80004aa:	4323      	orrs	r3, r4
 80004ac:	4662      	mov	r2, ip
 80004ae:	0004      	movs	r4, r0
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	000d      	movs	r5, r1
 80004b4:	e725      	b.n	8000302 <__aeabi_fadd+0x46>
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d000      	beq.n	80004bc <__aeabi_fadd+0x200>
 80004ba:	e726      	b.n	800030a <__aeabi_fadd+0x4e>
 80004bc:	2200      	movs	r2, #0
 80004be:	2400      	movs	r4, #0
 80004c0:	e7a9      	b.n	8000416 <__aeabi_fadd+0x15a>
 80004c2:	000c      	movs	r4, r1
 80004c4:	e735      	b.n	8000332 <__aeabi_fadd+0x76>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d04d      	beq.n	8000566 <__aeabi_fadd+0x2aa>
 80004ca:	43d2      	mvns	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d0ed      	beq.n	80004ac <__aeabi_fadd+0x1f0>
 80004d0:	28ff      	cmp	r0, #255	; 0xff
 80004d2:	d1e0      	bne.n	8000496 <__aeabi_fadd+0x1da>
 80004d4:	4663      	mov	r3, ip
 80004d6:	24ff      	movs	r4, #255	; 0xff
 80004d8:	000d      	movs	r5, r1
 80004da:	e72a      	b.n	8000332 <__aeabi_fadd+0x76>
 80004dc:	29ff      	cmp	r1, #255	; 0xff
 80004de:	d00f      	beq.n	8000500 <__aeabi_fadd+0x244>
 80004e0:	0001      	movs	r1, r0
 80004e2:	e773      	b.n	80003cc <__aeabi_fadd+0x110>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d061      	beq.n	80005ac <__aeabi_fadd+0x2f0>
 80004e8:	24ff      	movs	r4, #255	; 0xff
 80004ea:	2f00      	cmp	r7, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x234>
 80004ee:	e720      	b.n	8000332 <__aeabi_fadd+0x76>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	4641      	mov	r1, r8
 80004f4:	03d2      	lsls	r2, r2, #15
 80004f6:	4211      	tst	r1, r2
 80004f8:	d002      	beq.n	8000500 <__aeabi_fadd+0x244>
 80004fa:	4216      	tst	r6, r2
 80004fc:	d100      	bne.n	8000500 <__aeabi_fadd+0x244>
 80004fe:	003b      	movs	r3, r7
 8000500:	24ff      	movs	r4, #255	; 0xff
 8000502:	e716      	b.n	8000332 <__aeabi_fadd+0x76>
 8000504:	24ff      	movs	r4, #255	; 0xff
 8000506:	2300      	movs	r3, #0
 8000508:	e724      	b.n	8000354 <__aeabi_fadd+0x98>
 800050a:	2c00      	cmp	r4, #0
 800050c:	d1ea      	bne.n	80004e4 <__aeabi_fadd+0x228>
 800050e:	2b00      	cmp	r3, #0
 8000510:	d058      	beq.n	80005c4 <__aeabi_fadd+0x308>
 8000512:	2f00      	cmp	r7, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x25c>
 8000516:	e70c      	b.n	8000332 <__aeabi_fadd+0x76>
 8000518:	4463      	add	r3, ip
 800051a:	015a      	lsls	r2, r3, #5
 800051c:	d400      	bmi.n	8000520 <__aeabi_fadd+0x264>
 800051e:	e739      	b.n	8000394 <__aeabi_fadd+0xd8>
 8000520:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <__aeabi_fadd+0x320>)
 8000522:	000c      	movs	r4, r1
 8000524:	4013      	ands	r3, r2
 8000526:	e704      	b.n	8000332 <__aeabi_fadd+0x76>
 8000528:	2101      	movs	r1, #1
 800052a:	e75c      	b.n	80003e6 <__aeabi_fadd+0x12a>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d11e      	bne.n	800056e <__aeabi_fadd+0x2b2>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d040      	beq.n	80005b6 <__aeabi_fadd+0x2fa>
 8000534:	43c9      	mvns	r1, r1
 8000536:	2900      	cmp	r1, #0
 8000538:	d00b      	beq.n	8000552 <__aeabi_fadd+0x296>
 800053a:	28ff      	cmp	r0, #255	; 0xff
 800053c:	d036      	beq.n	80005ac <__aeabi_fadd+0x2f0>
 800053e:	291b      	cmp	r1, #27
 8000540:	dc47      	bgt.n	80005d2 <__aeabi_fadd+0x316>
 8000542:	001c      	movs	r4, r3
 8000544:	2620      	movs	r6, #32
 8000546:	40cc      	lsrs	r4, r1
 8000548:	1a71      	subs	r1, r6, r1
 800054a:	408b      	lsls	r3, r1
 800054c:	1e59      	subs	r1, r3, #1
 800054e:	418b      	sbcs	r3, r1
 8000550:	4323      	orrs	r3, r4
 8000552:	4463      	add	r3, ip
 8000554:	0004      	movs	r4, r0
 8000556:	e747      	b.n	80003e8 <__aeabi_fadd+0x12c>
 8000558:	2b00      	cmp	r3, #0
 800055a:	d118      	bne.n	800058e <__aeabi_fadd+0x2d2>
 800055c:	1e3b      	subs	r3, r7, #0
 800055e:	d02d      	beq.n	80005bc <__aeabi_fadd+0x300>
 8000560:	000d      	movs	r5, r1
 8000562:	24ff      	movs	r4, #255	; 0xff
 8000564:	e6e5      	b.n	8000332 <__aeabi_fadd+0x76>
 8000566:	003b      	movs	r3, r7
 8000568:	0004      	movs	r4, r0
 800056a:	000d      	movs	r5, r1
 800056c:	e6e1      	b.n	8000332 <__aeabi_fadd+0x76>
 800056e:	28ff      	cmp	r0, #255	; 0xff
 8000570:	d01c      	beq.n	80005ac <__aeabi_fadd+0x2f0>
 8000572:	2480      	movs	r4, #128	; 0x80
 8000574:	04e4      	lsls	r4, r4, #19
 8000576:	4249      	negs	r1, r1
 8000578:	4323      	orrs	r3, r4
 800057a:	e7e0      	b.n	800053e <__aeabi_fadd+0x282>
 800057c:	2f00      	cmp	r7, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x2c6>
 8000580:	e6d7      	b.n	8000332 <__aeabi_fadd+0x76>
 8000582:	1bde      	subs	r6, r3, r7
 8000584:	0172      	lsls	r2, r6, #5
 8000586:	d51f      	bpl.n	80005c8 <__aeabi_fadd+0x30c>
 8000588:	1afb      	subs	r3, r7, r3
 800058a:	000d      	movs	r5, r1
 800058c:	e6d1      	b.n	8000332 <__aeabi_fadd+0x76>
 800058e:	24ff      	movs	r4, #255	; 0xff
 8000590:	2f00      	cmp	r7, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x2da>
 8000594:	e6cd      	b.n	8000332 <__aeabi_fadd+0x76>
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	4640      	mov	r0, r8
 800059a:	03d2      	lsls	r2, r2, #15
 800059c:	4210      	tst	r0, r2
 800059e:	d0af      	beq.n	8000500 <__aeabi_fadd+0x244>
 80005a0:	4216      	tst	r6, r2
 80005a2:	d1ad      	bne.n	8000500 <__aeabi_fadd+0x244>
 80005a4:	003b      	movs	r3, r7
 80005a6:	000d      	movs	r5, r1
 80005a8:	24ff      	movs	r4, #255	; 0xff
 80005aa:	e6c2      	b.n	8000332 <__aeabi_fadd+0x76>
 80005ac:	4663      	mov	r3, ip
 80005ae:	24ff      	movs	r4, #255	; 0xff
 80005b0:	e6bf      	b.n	8000332 <__aeabi_fadd+0x76>
 80005b2:	2301      	movs	r3, #1
 80005b4:	e77a      	b.n	80004ac <__aeabi_fadd+0x1f0>
 80005b6:	003b      	movs	r3, r7
 80005b8:	0004      	movs	r4, r0
 80005ba:	e6ba      	b.n	8000332 <__aeabi_fadd+0x76>
 80005bc:	2680      	movs	r6, #128	; 0x80
 80005be:	2200      	movs	r2, #0
 80005c0:	03f6      	lsls	r6, r6, #15
 80005c2:	e6f0      	b.n	80003a6 <__aeabi_fadd+0xea>
 80005c4:	003b      	movs	r3, r7
 80005c6:	e6b4      	b.n	8000332 <__aeabi_fadd+0x76>
 80005c8:	1e33      	subs	r3, r6, #0
 80005ca:	d000      	beq.n	80005ce <__aeabi_fadd+0x312>
 80005cc:	e6e2      	b.n	8000394 <__aeabi_fadd+0xd8>
 80005ce:	2200      	movs	r2, #0
 80005d0:	e721      	b.n	8000416 <__aeabi_fadd+0x15a>
 80005d2:	2301      	movs	r3, #1
 80005d4:	e7bd      	b.n	8000552 <__aeabi_fadd+0x296>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	7dffffff 	.word	0x7dffffff
 80005dc:	fbffffff 	.word	0xfbffffff

080005e0 <__aeabi_fdiv>:
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	4657      	mov	r7, sl
 80005e4:	464e      	mov	r6, r9
 80005e6:	46de      	mov	lr, fp
 80005e8:	4645      	mov	r5, r8
 80005ea:	b5e0      	push	{r5, r6, r7, lr}
 80005ec:	0244      	lsls	r4, r0, #9
 80005ee:	0043      	lsls	r3, r0, #1
 80005f0:	0fc6      	lsrs	r6, r0, #31
 80005f2:	b083      	sub	sp, #12
 80005f4:	1c0f      	adds	r7, r1, #0
 80005f6:	0a64      	lsrs	r4, r4, #9
 80005f8:	0e1b      	lsrs	r3, r3, #24
 80005fa:	46b2      	mov	sl, r6
 80005fc:	d053      	beq.n	80006a6 <__aeabi_fdiv+0xc6>
 80005fe:	2bff      	cmp	r3, #255	; 0xff
 8000600:	d027      	beq.n	8000652 <__aeabi_fdiv+0x72>
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	00e4      	lsls	r4, r4, #3
 8000606:	04d2      	lsls	r2, r2, #19
 8000608:	4314      	orrs	r4, r2
 800060a:	227f      	movs	r2, #127	; 0x7f
 800060c:	4252      	negs	r2, r2
 800060e:	4690      	mov	r8, r2
 8000610:	4498      	add	r8, r3
 8000612:	2300      	movs	r3, #0
 8000614:	4699      	mov	r9, r3
 8000616:	469b      	mov	fp, r3
 8000618:	027d      	lsls	r5, r7, #9
 800061a:	0078      	lsls	r0, r7, #1
 800061c:	0ffb      	lsrs	r3, r7, #31
 800061e:	0a6d      	lsrs	r5, r5, #9
 8000620:	0e00      	lsrs	r0, r0, #24
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	d024      	beq.n	8000670 <__aeabi_fdiv+0x90>
 8000626:	28ff      	cmp	r0, #255	; 0xff
 8000628:	d046      	beq.n	80006b8 <__aeabi_fdiv+0xd8>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	2100      	movs	r1, #0
 800062e:	00ed      	lsls	r5, r5, #3
 8000630:	04db      	lsls	r3, r3, #19
 8000632:	431d      	orrs	r5, r3
 8000634:	387f      	subs	r0, #127	; 0x7f
 8000636:	4647      	mov	r7, r8
 8000638:	1a38      	subs	r0, r7, r0
 800063a:	464f      	mov	r7, r9
 800063c:	430f      	orrs	r7, r1
 800063e:	00bf      	lsls	r7, r7, #2
 8000640:	46b9      	mov	r9, r7
 8000642:	0033      	movs	r3, r6
 8000644:	9a00      	ldr	r2, [sp, #0]
 8000646:	4f87      	ldr	r7, [pc, #540]	; (8000864 <__aeabi_fdiv+0x284>)
 8000648:	4053      	eors	r3, r2
 800064a:	464a      	mov	r2, r9
 800064c:	58ba      	ldr	r2, [r7, r2]
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	4697      	mov	pc, r2
 8000652:	2c00      	cmp	r4, #0
 8000654:	d14e      	bne.n	80006f4 <__aeabi_fdiv+0x114>
 8000656:	2308      	movs	r3, #8
 8000658:	4699      	mov	r9, r3
 800065a:	33f7      	adds	r3, #247	; 0xf7
 800065c:	4698      	mov	r8, r3
 800065e:	3bfd      	subs	r3, #253	; 0xfd
 8000660:	469b      	mov	fp, r3
 8000662:	027d      	lsls	r5, r7, #9
 8000664:	0078      	lsls	r0, r7, #1
 8000666:	0ffb      	lsrs	r3, r7, #31
 8000668:	0a6d      	lsrs	r5, r5, #9
 800066a:	0e00      	lsrs	r0, r0, #24
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	d1da      	bne.n	8000626 <__aeabi_fdiv+0x46>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d126      	bne.n	80006c2 <__aeabi_fdiv+0xe2>
 8000674:	2000      	movs	r0, #0
 8000676:	2101      	movs	r1, #1
 8000678:	0033      	movs	r3, r6
 800067a:	9a00      	ldr	r2, [sp, #0]
 800067c:	4f7a      	ldr	r7, [pc, #488]	; (8000868 <__aeabi_fdiv+0x288>)
 800067e:	4053      	eors	r3, r2
 8000680:	4642      	mov	r2, r8
 8000682:	1a10      	subs	r0, r2, r0
 8000684:	464a      	mov	r2, r9
 8000686:	430a      	orrs	r2, r1
 8000688:	0092      	lsls	r2, r2, #2
 800068a:	58ba      	ldr	r2, [r7, r2]
 800068c:	001d      	movs	r5, r3
 800068e:	4697      	mov	pc, r2
 8000690:	9b00      	ldr	r3, [sp, #0]
 8000692:	002c      	movs	r4, r5
 8000694:	469a      	mov	sl, r3
 8000696:	468b      	mov	fp, r1
 8000698:	465b      	mov	r3, fp
 800069a:	2b02      	cmp	r3, #2
 800069c:	d131      	bne.n	8000702 <__aeabi_fdiv+0x122>
 800069e:	4653      	mov	r3, sl
 80006a0:	21ff      	movs	r1, #255	; 0xff
 80006a2:	2400      	movs	r4, #0
 80006a4:	e038      	b.n	8000718 <__aeabi_fdiv+0x138>
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	d117      	bne.n	80006da <__aeabi_fdiv+0xfa>
 80006aa:	2304      	movs	r3, #4
 80006ac:	4699      	mov	r9, r3
 80006ae:	2300      	movs	r3, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	469b      	mov	fp, r3
 80006b6:	e7af      	b.n	8000618 <__aeabi_fdiv+0x38>
 80006b8:	20ff      	movs	r0, #255	; 0xff
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d10b      	bne.n	80006d6 <__aeabi_fdiv+0xf6>
 80006be:	2102      	movs	r1, #2
 80006c0:	e7da      	b.n	8000678 <__aeabi_fdiv+0x98>
 80006c2:	0028      	movs	r0, r5
 80006c4:	f001 f834 	bl	8001730 <__clzsi2>
 80006c8:	1f43      	subs	r3, r0, #5
 80006ca:	409d      	lsls	r5, r3
 80006cc:	2376      	movs	r3, #118	; 0x76
 80006ce:	425b      	negs	r3, r3
 80006d0:	1a18      	subs	r0, r3, r0
 80006d2:	2100      	movs	r1, #0
 80006d4:	e7af      	b.n	8000636 <__aeabi_fdiv+0x56>
 80006d6:	2103      	movs	r1, #3
 80006d8:	e7ad      	b.n	8000636 <__aeabi_fdiv+0x56>
 80006da:	0020      	movs	r0, r4
 80006dc:	f001 f828 	bl	8001730 <__clzsi2>
 80006e0:	1f43      	subs	r3, r0, #5
 80006e2:	409c      	lsls	r4, r3
 80006e4:	2376      	movs	r3, #118	; 0x76
 80006e6:	425b      	negs	r3, r3
 80006e8:	1a1b      	subs	r3, r3, r0
 80006ea:	4698      	mov	r8, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	4699      	mov	r9, r3
 80006f0:	469b      	mov	fp, r3
 80006f2:	e791      	b.n	8000618 <__aeabi_fdiv+0x38>
 80006f4:	230c      	movs	r3, #12
 80006f6:	4699      	mov	r9, r3
 80006f8:	33f3      	adds	r3, #243	; 0xf3
 80006fa:	4698      	mov	r8, r3
 80006fc:	3bfc      	subs	r3, #252	; 0xfc
 80006fe:	469b      	mov	fp, r3
 8000700:	e78a      	b.n	8000618 <__aeabi_fdiv+0x38>
 8000702:	2b03      	cmp	r3, #3
 8000704:	d100      	bne.n	8000708 <__aeabi_fdiv+0x128>
 8000706:	e0a5      	b.n	8000854 <__aeabi_fdiv+0x274>
 8000708:	4655      	mov	r5, sl
 800070a:	2b01      	cmp	r3, #1
 800070c:	d000      	beq.n	8000710 <__aeabi_fdiv+0x130>
 800070e:	e081      	b.n	8000814 <__aeabi_fdiv+0x234>
 8000710:	2301      	movs	r3, #1
 8000712:	2100      	movs	r1, #0
 8000714:	2400      	movs	r4, #0
 8000716:	402b      	ands	r3, r5
 8000718:	0264      	lsls	r4, r4, #9
 800071a:	05c9      	lsls	r1, r1, #23
 800071c:	0a60      	lsrs	r0, r4, #9
 800071e:	07db      	lsls	r3, r3, #31
 8000720:	4308      	orrs	r0, r1
 8000722:	4318      	orrs	r0, r3
 8000724:	b003      	add	sp, #12
 8000726:	bc3c      	pop	{r2, r3, r4, r5}
 8000728:	4690      	mov	r8, r2
 800072a:	4699      	mov	r9, r3
 800072c:	46a2      	mov	sl, r4
 800072e:	46ab      	mov	fp, r5
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	2480      	movs	r4, #128	; 0x80
 8000734:	2300      	movs	r3, #0
 8000736:	03e4      	lsls	r4, r4, #15
 8000738:	21ff      	movs	r1, #255	; 0xff
 800073a:	e7ed      	b.n	8000718 <__aeabi_fdiv+0x138>
 800073c:	21ff      	movs	r1, #255	; 0xff
 800073e:	2400      	movs	r4, #0
 8000740:	e7ea      	b.n	8000718 <__aeabi_fdiv+0x138>
 8000742:	2301      	movs	r3, #1
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	291b      	cmp	r1, #27
 8000748:	dd66      	ble.n	8000818 <__aeabi_fdiv+0x238>
 800074a:	9a01      	ldr	r2, [sp, #4]
 800074c:	4013      	ands	r3, r2
 800074e:	2100      	movs	r1, #0
 8000750:	2400      	movs	r4, #0
 8000752:	e7e1      	b.n	8000718 <__aeabi_fdiv+0x138>
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	03db      	lsls	r3, r3, #15
 8000758:	421c      	tst	r4, r3
 800075a:	d038      	beq.n	80007ce <__aeabi_fdiv+0x1ee>
 800075c:	421d      	tst	r5, r3
 800075e:	d051      	beq.n	8000804 <__aeabi_fdiv+0x224>
 8000760:	431c      	orrs	r4, r3
 8000762:	0264      	lsls	r4, r4, #9
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	0033      	movs	r3, r6
 8000768:	21ff      	movs	r1, #255	; 0xff
 800076a:	e7d5      	b.n	8000718 <__aeabi_fdiv+0x138>
 800076c:	0163      	lsls	r3, r4, #5
 800076e:	016c      	lsls	r4, r5, #5
 8000770:	42a3      	cmp	r3, r4
 8000772:	d23b      	bcs.n	80007ec <__aeabi_fdiv+0x20c>
 8000774:	261b      	movs	r6, #27
 8000776:	2100      	movs	r1, #0
 8000778:	3801      	subs	r0, #1
 800077a:	2501      	movs	r5, #1
 800077c:	001f      	movs	r7, r3
 800077e:	0049      	lsls	r1, r1, #1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	2f00      	cmp	r7, #0
 8000784:	db01      	blt.n	800078a <__aeabi_fdiv+0x1aa>
 8000786:	429c      	cmp	r4, r3
 8000788:	d801      	bhi.n	800078e <__aeabi_fdiv+0x1ae>
 800078a:	1b1b      	subs	r3, r3, r4
 800078c:	4329      	orrs	r1, r5
 800078e:	3e01      	subs	r6, #1
 8000790:	2e00      	cmp	r6, #0
 8000792:	d1f3      	bne.n	800077c <__aeabi_fdiv+0x19c>
 8000794:	001c      	movs	r4, r3
 8000796:	1e63      	subs	r3, r4, #1
 8000798:	419c      	sbcs	r4, r3
 800079a:	430c      	orrs	r4, r1
 800079c:	0001      	movs	r1, r0
 800079e:	317f      	adds	r1, #127	; 0x7f
 80007a0:	2900      	cmp	r1, #0
 80007a2:	ddce      	ble.n	8000742 <__aeabi_fdiv+0x162>
 80007a4:	0763      	lsls	r3, r4, #29
 80007a6:	d004      	beq.n	80007b2 <__aeabi_fdiv+0x1d2>
 80007a8:	230f      	movs	r3, #15
 80007aa:	4023      	ands	r3, r4
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fdiv+0x1d2>
 80007b0:	3404      	adds	r4, #4
 80007b2:	0123      	lsls	r3, r4, #4
 80007b4:	d503      	bpl.n	80007be <__aeabi_fdiv+0x1de>
 80007b6:	0001      	movs	r1, r0
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <__aeabi_fdiv+0x28c>)
 80007ba:	3180      	adds	r1, #128	; 0x80
 80007bc:	401c      	ands	r4, r3
 80007be:	29fe      	cmp	r1, #254	; 0xfe
 80007c0:	dd0d      	ble.n	80007de <__aeabi_fdiv+0x1fe>
 80007c2:	2301      	movs	r3, #1
 80007c4:	9a01      	ldr	r2, [sp, #4]
 80007c6:	21ff      	movs	r1, #255	; 0xff
 80007c8:	4013      	ands	r3, r2
 80007ca:	2400      	movs	r4, #0
 80007cc:	e7a4      	b.n	8000718 <__aeabi_fdiv+0x138>
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	03db      	lsls	r3, r3, #15
 80007d2:	431c      	orrs	r4, r3
 80007d4:	0264      	lsls	r4, r4, #9
 80007d6:	0a64      	lsrs	r4, r4, #9
 80007d8:	0033      	movs	r3, r6
 80007da:	21ff      	movs	r1, #255	; 0xff
 80007dc:	e79c      	b.n	8000718 <__aeabi_fdiv+0x138>
 80007de:	2301      	movs	r3, #1
 80007e0:	9a01      	ldr	r2, [sp, #4]
 80007e2:	01a4      	lsls	r4, r4, #6
 80007e4:	0a64      	lsrs	r4, r4, #9
 80007e6:	b2c9      	uxtb	r1, r1
 80007e8:	4013      	ands	r3, r2
 80007ea:	e795      	b.n	8000718 <__aeabi_fdiv+0x138>
 80007ec:	1b1b      	subs	r3, r3, r4
 80007ee:	261a      	movs	r6, #26
 80007f0:	2101      	movs	r1, #1
 80007f2:	e7c2      	b.n	800077a <__aeabi_fdiv+0x19a>
 80007f4:	9b00      	ldr	r3, [sp, #0]
 80007f6:	468b      	mov	fp, r1
 80007f8:	469a      	mov	sl, r3
 80007fa:	2400      	movs	r4, #0
 80007fc:	e74c      	b.n	8000698 <__aeabi_fdiv+0xb8>
 80007fe:	0263      	lsls	r3, r4, #9
 8000800:	d5e5      	bpl.n	80007ce <__aeabi_fdiv+0x1ee>
 8000802:	2500      	movs	r5, #0
 8000804:	2480      	movs	r4, #128	; 0x80
 8000806:	03e4      	lsls	r4, r4, #15
 8000808:	432c      	orrs	r4, r5
 800080a:	0264      	lsls	r4, r4, #9
 800080c:	0a64      	lsrs	r4, r4, #9
 800080e:	9b00      	ldr	r3, [sp, #0]
 8000810:	21ff      	movs	r1, #255	; 0xff
 8000812:	e781      	b.n	8000718 <__aeabi_fdiv+0x138>
 8000814:	9501      	str	r5, [sp, #4]
 8000816:	e7c1      	b.n	800079c <__aeabi_fdiv+0x1bc>
 8000818:	0023      	movs	r3, r4
 800081a:	2020      	movs	r0, #32
 800081c:	40cb      	lsrs	r3, r1
 800081e:	1a41      	subs	r1, r0, r1
 8000820:	408c      	lsls	r4, r1
 8000822:	1e61      	subs	r1, r4, #1
 8000824:	418c      	sbcs	r4, r1
 8000826:	431c      	orrs	r4, r3
 8000828:	0763      	lsls	r3, r4, #29
 800082a:	d004      	beq.n	8000836 <__aeabi_fdiv+0x256>
 800082c:	230f      	movs	r3, #15
 800082e:	4023      	ands	r3, r4
 8000830:	2b04      	cmp	r3, #4
 8000832:	d000      	beq.n	8000836 <__aeabi_fdiv+0x256>
 8000834:	3404      	adds	r4, #4
 8000836:	0163      	lsls	r3, r4, #5
 8000838:	d505      	bpl.n	8000846 <__aeabi_fdiv+0x266>
 800083a:	2301      	movs	r3, #1
 800083c:	9a01      	ldr	r2, [sp, #4]
 800083e:	2101      	movs	r1, #1
 8000840:	4013      	ands	r3, r2
 8000842:	2400      	movs	r4, #0
 8000844:	e768      	b.n	8000718 <__aeabi_fdiv+0x138>
 8000846:	2301      	movs	r3, #1
 8000848:	9a01      	ldr	r2, [sp, #4]
 800084a:	01a4      	lsls	r4, r4, #6
 800084c:	0a64      	lsrs	r4, r4, #9
 800084e:	4013      	ands	r3, r2
 8000850:	2100      	movs	r1, #0
 8000852:	e761      	b.n	8000718 <__aeabi_fdiv+0x138>
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	03db      	lsls	r3, r3, #15
 8000858:	431c      	orrs	r4, r3
 800085a:	0264      	lsls	r4, r4, #9
 800085c:	0a64      	lsrs	r4, r4, #9
 800085e:	4653      	mov	r3, sl
 8000860:	21ff      	movs	r1, #255	; 0xff
 8000862:	e759      	b.n	8000718 <__aeabi_fdiv+0x138>
 8000864:	08003ac4 	.word	0x08003ac4
 8000868:	08003b04 	.word	0x08003b04
 800086c:	f7ffffff 	.word	0xf7ffffff

08000870 <__eqsf2>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	0042      	lsls	r2, r0, #1
 8000874:	0245      	lsls	r5, r0, #9
 8000876:	024e      	lsls	r6, r1, #9
 8000878:	004c      	lsls	r4, r1, #1
 800087a:	0fc3      	lsrs	r3, r0, #31
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	0e12      	lsrs	r2, r2, #24
 8000880:	0a76      	lsrs	r6, r6, #9
 8000882:	0e24      	lsrs	r4, r4, #24
 8000884:	0fc9      	lsrs	r1, r1, #31
 8000886:	2001      	movs	r0, #1
 8000888:	2aff      	cmp	r2, #255	; 0xff
 800088a:	d006      	beq.n	800089a <__eqsf2+0x2a>
 800088c:	2cff      	cmp	r4, #255	; 0xff
 800088e:	d003      	beq.n	8000898 <__eqsf2+0x28>
 8000890:	42a2      	cmp	r2, r4
 8000892:	d101      	bne.n	8000898 <__eqsf2+0x28>
 8000894:	42b5      	cmp	r5, r6
 8000896:	d006      	beq.n	80008a6 <__eqsf2+0x36>
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	2d00      	cmp	r5, #0
 800089c:	d1fc      	bne.n	8000898 <__eqsf2+0x28>
 800089e:	2cff      	cmp	r4, #255	; 0xff
 80008a0:	d1fa      	bne.n	8000898 <__eqsf2+0x28>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d1f8      	bne.n	8000898 <__eqsf2+0x28>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d006      	beq.n	80008b8 <__eqsf2+0x48>
 80008aa:	2001      	movs	r0, #1
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	d1f3      	bne.n	8000898 <__eqsf2+0x28>
 80008b0:	0028      	movs	r0, r5
 80008b2:	1e45      	subs	r5, r0, #1
 80008b4:	41a8      	sbcs	r0, r5
 80008b6:	e7ef      	b.n	8000898 <__eqsf2+0x28>
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7ed      	b.n	8000898 <__eqsf2+0x28>

080008bc <__gesf2>:
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	0042      	lsls	r2, r0, #1
 80008c0:	0245      	lsls	r5, r0, #9
 80008c2:	024c      	lsls	r4, r1, #9
 80008c4:	0fc3      	lsrs	r3, r0, #31
 80008c6:	0048      	lsls	r0, r1, #1
 80008c8:	0a6d      	lsrs	r5, r5, #9
 80008ca:	0e12      	lsrs	r2, r2, #24
 80008cc:	0a64      	lsrs	r4, r4, #9
 80008ce:	0e00      	lsrs	r0, r0, #24
 80008d0:	0fc9      	lsrs	r1, r1, #31
 80008d2:	2aff      	cmp	r2, #255	; 0xff
 80008d4:	d01e      	beq.n	8000914 <__gesf2+0x58>
 80008d6:	28ff      	cmp	r0, #255	; 0xff
 80008d8:	d021      	beq.n	800091e <__gesf2+0x62>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d10a      	bne.n	80008f4 <__gesf2+0x38>
 80008de:	426e      	negs	r6, r5
 80008e0:	416e      	adcs	r6, r5
 80008e2:	b2f6      	uxtb	r6, r6
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d10f      	bne.n	8000908 <__gesf2+0x4c>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d10d      	bne.n	8000908 <__gesf2+0x4c>
 80008ec:	2000      	movs	r0, #0
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d009      	beq.n	8000906 <__gesf2+0x4a>
 80008f2:	e005      	b.n	8000900 <__gesf2+0x44>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d101      	bne.n	80008fc <__gesf2+0x40>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d001      	beq.n	8000900 <__gesf2+0x44>
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d011      	beq.n	8000924 <__gesf2+0x68>
 8000900:	2101      	movs	r1, #1
 8000902:	4258      	negs	r0, r3
 8000904:	4308      	orrs	r0, r1
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2e00      	cmp	r6, #0
 800090a:	d0f7      	beq.n	80008fc <__gesf2+0x40>
 800090c:	2001      	movs	r0, #1
 800090e:	3901      	subs	r1, #1
 8000910:	4308      	orrs	r0, r1
 8000912:	e7f8      	b.n	8000906 <__gesf2+0x4a>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0de      	beq.n	80008d6 <__gesf2+0x1a>
 8000918:	2002      	movs	r0, #2
 800091a:	4240      	negs	r0, r0
 800091c:	e7f3      	b.n	8000906 <__gesf2+0x4a>
 800091e:	2c00      	cmp	r4, #0
 8000920:	d0db      	beq.n	80008da <__gesf2+0x1e>
 8000922:	e7f9      	b.n	8000918 <__gesf2+0x5c>
 8000924:	4282      	cmp	r2, r0
 8000926:	dceb      	bgt.n	8000900 <__gesf2+0x44>
 8000928:	db04      	blt.n	8000934 <__gesf2+0x78>
 800092a:	42a5      	cmp	r5, r4
 800092c:	d8e8      	bhi.n	8000900 <__gesf2+0x44>
 800092e:	2000      	movs	r0, #0
 8000930:	42a5      	cmp	r5, r4
 8000932:	d2e8      	bcs.n	8000906 <__gesf2+0x4a>
 8000934:	2101      	movs	r1, #1
 8000936:	1e58      	subs	r0, r3, #1
 8000938:	4308      	orrs	r0, r1
 800093a:	e7e4      	b.n	8000906 <__gesf2+0x4a>

0800093c <__lesf2>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	0042      	lsls	r2, r0, #1
 8000940:	024d      	lsls	r5, r1, #9
 8000942:	004c      	lsls	r4, r1, #1
 8000944:	0246      	lsls	r6, r0, #9
 8000946:	0a76      	lsrs	r6, r6, #9
 8000948:	0e12      	lsrs	r2, r2, #24
 800094a:	0fc3      	lsrs	r3, r0, #31
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e24      	lsrs	r4, r4, #24
 8000950:	0fc9      	lsrs	r1, r1, #31
 8000952:	2aff      	cmp	r2, #255	; 0xff
 8000954:	d016      	beq.n	8000984 <__lesf2+0x48>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d018      	beq.n	800098c <__lesf2+0x50>
 800095a:	2a00      	cmp	r2, #0
 800095c:	d10a      	bne.n	8000974 <__lesf2+0x38>
 800095e:	4270      	negs	r0, r6
 8000960:	4170      	adcs	r0, r6
 8000962:	b2c0      	uxtb	r0, r0
 8000964:	2c00      	cmp	r4, #0
 8000966:	d015      	beq.n	8000994 <__lesf2+0x58>
 8000968:	2800      	cmp	r0, #0
 800096a:	d005      	beq.n	8000978 <__lesf2+0x3c>
 800096c:	2001      	movs	r0, #1
 800096e:	3901      	subs	r1, #1
 8000970:	4308      	orrs	r0, r1
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	2c00      	cmp	r4, #0
 8000976:	d013      	beq.n	80009a0 <__lesf2+0x64>
 8000978:	4299      	cmp	r1, r3
 800097a:	d014      	beq.n	80009a6 <__lesf2+0x6a>
 800097c:	2001      	movs	r0, #1
 800097e:	425b      	negs	r3, r3
 8000980:	4318      	orrs	r0, r3
 8000982:	e7f6      	b.n	8000972 <__lesf2+0x36>
 8000984:	2002      	movs	r0, #2
 8000986:	2e00      	cmp	r6, #0
 8000988:	d1f3      	bne.n	8000972 <__lesf2+0x36>
 800098a:	e7e4      	b.n	8000956 <__lesf2+0x1a>
 800098c:	2002      	movs	r0, #2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d1ef      	bne.n	8000972 <__lesf2+0x36>
 8000992:	e7e2      	b.n	800095a <__lesf2+0x1e>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d1e7      	bne.n	8000968 <__lesf2+0x2c>
 8000998:	2000      	movs	r0, #0
 800099a:	2e00      	cmp	r6, #0
 800099c:	d0e9      	beq.n	8000972 <__lesf2+0x36>
 800099e:	e7ed      	b.n	800097c <__lesf2+0x40>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d1e9      	bne.n	8000978 <__lesf2+0x3c>
 80009a4:	e7ea      	b.n	800097c <__lesf2+0x40>
 80009a6:	42a2      	cmp	r2, r4
 80009a8:	dc06      	bgt.n	80009b8 <__lesf2+0x7c>
 80009aa:	dbdf      	blt.n	800096c <__lesf2+0x30>
 80009ac:	42ae      	cmp	r6, r5
 80009ae:	d803      	bhi.n	80009b8 <__lesf2+0x7c>
 80009b0:	2000      	movs	r0, #0
 80009b2:	42ae      	cmp	r6, r5
 80009b4:	d3da      	bcc.n	800096c <__lesf2+0x30>
 80009b6:	e7dc      	b.n	8000972 <__lesf2+0x36>
 80009b8:	2001      	movs	r0, #1
 80009ba:	4249      	negs	r1, r1
 80009bc:	4308      	orrs	r0, r1
 80009be:	e7d8      	b.n	8000972 <__lesf2+0x36>

080009c0 <__aeabi_fmul>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	4657      	mov	r7, sl
 80009c4:	464e      	mov	r6, r9
 80009c6:	4645      	mov	r5, r8
 80009c8:	46de      	mov	lr, fp
 80009ca:	b5e0      	push	{r5, r6, r7, lr}
 80009cc:	0247      	lsls	r7, r0, #9
 80009ce:	0046      	lsls	r6, r0, #1
 80009d0:	4688      	mov	r8, r1
 80009d2:	0a7f      	lsrs	r7, r7, #9
 80009d4:	0e36      	lsrs	r6, r6, #24
 80009d6:	0fc4      	lsrs	r4, r0, #31
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d047      	beq.n	8000a6c <__aeabi_fmul+0xac>
 80009dc:	2eff      	cmp	r6, #255	; 0xff
 80009de:	d024      	beq.n	8000a2a <__aeabi_fmul+0x6a>
 80009e0:	00fb      	lsls	r3, r7, #3
 80009e2:	2780      	movs	r7, #128	; 0x80
 80009e4:	04ff      	lsls	r7, r7, #19
 80009e6:	431f      	orrs	r7, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	4699      	mov	r9, r3
 80009ec:	469a      	mov	sl, r3
 80009ee:	3e7f      	subs	r6, #127	; 0x7f
 80009f0:	4643      	mov	r3, r8
 80009f2:	025d      	lsls	r5, r3, #9
 80009f4:	0058      	lsls	r0, r3, #1
 80009f6:	0fdb      	lsrs	r3, r3, #31
 80009f8:	0a6d      	lsrs	r5, r5, #9
 80009fa:	0e00      	lsrs	r0, r0, #24
 80009fc:	4698      	mov	r8, r3
 80009fe:	d043      	beq.n	8000a88 <__aeabi_fmul+0xc8>
 8000a00:	28ff      	cmp	r0, #255	; 0xff
 8000a02:	d03b      	beq.n	8000a7c <__aeabi_fmul+0xbc>
 8000a04:	00eb      	lsls	r3, r5, #3
 8000a06:	2580      	movs	r5, #128	; 0x80
 8000a08:	2200      	movs	r2, #0
 8000a0a:	04ed      	lsls	r5, r5, #19
 8000a0c:	431d      	orrs	r5, r3
 8000a0e:	387f      	subs	r0, #127	; 0x7f
 8000a10:	1836      	adds	r6, r6, r0
 8000a12:	1c73      	adds	r3, r6, #1
 8000a14:	4641      	mov	r1, r8
 8000a16:	469b      	mov	fp, r3
 8000a18:	464b      	mov	r3, r9
 8000a1a:	4061      	eors	r1, r4
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d864      	bhi.n	8000aec <__aeabi_fmul+0x12c>
 8000a22:	4875      	ldr	r0, [pc, #468]	; (8000bf8 <__aeabi_fmul+0x238>)
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	58c3      	ldr	r3, [r0, r3]
 8000a28:	469f      	mov	pc, r3
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	d142      	bne.n	8000ab4 <__aeabi_fmul+0xf4>
 8000a2e:	2308      	movs	r3, #8
 8000a30:	4699      	mov	r9, r3
 8000a32:	3b06      	subs	r3, #6
 8000a34:	26ff      	movs	r6, #255	; 0xff
 8000a36:	469a      	mov	sl, r3
 8000a38:	e7da      	b.n	80009f0 <__aeabi_fmul+0x30>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	2a02      	cmp	r2, #2
 8000a3e:	d028      	beq.n	8000a92 <__aeabi_fmul+0xd2>
 8000a40:	2a03      	cmp	r2, #3
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fmul+0x86>
 8000a44:	e0ce      	b.n	8000be4 <__aeabi_fmul+0x224>
 8000a46:	2a01      	cmp	r2, #1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fmul+0x8c>
 8000a4a:	e0ac      	b.n	8000ba6 <__aeabi_fmul+0x1e6>
 8000a4c:	4011      	ands	r1, r2
 8000a4e:	2000      	movs	r0, #0
 8000a50:	2200      	movs	r2, #0
 8000a52:	b2cc      	uxtb	r4, r1
 8000a54:	0240      	lsls	r0, r0, #9
 8000a56:	05d2      	lsls	r2, r2, #23
 8000a58:	0a40      	lsrs	r0, r0, #9
 8000a5a:	07e4      	lsls	r4, r4, #31
 8000a5c:	4310      	orrs	r0, r2
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	bc3c      	pop	{r2, r3, r4, r5}
 8000a62:	4690      	mov	r8, r2
 8000a64:	4699      	mov	r9, r3
 8000a66:	46a2      	mov	sl, r4
 8000a68:	46ab      	mov	fp, r5
 8000a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a6c:	2f00      	cmp	r7, #0
 8000a6e:	d115      	bne.n	8000a9c <__aeabi_fmul+0xdc>
 8000a70:	2304      	movs	r3, #4
 8000a72:	4699      	mov	r9, r3
 8000a74:	3b03      	subs	r3, #3
 8000a76:	2600      	movs	r6, #0
 8000a78:	469a      	mov	sl, r3
 8000a7a:	e7b9      	b.n	80009f0 <__aeabi_fmul+0x30>
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	2202      	movs	r2, #2
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d0c5      	beq.n	8000a10 <__aeabi_fmul+0x50>
 8000a84:	2203      	movs	r2, #3
 8000a86:	e7c3      	b.n	8000a10 <__aeabi_fmul+0x50>
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d119      	bne.n	8000ac0 <__aeabi_fmul+0x100>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2201      	movs	r2, #1
 8000a90:	e7be      	b.n	8000a10 <__aeabi_fmul+0x50>
 8000a92:	2401      	movs	r4, #1
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	400c      	ands	r4, r1
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e7db      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000a9c:	0038      	movs	r0, r7
 8000a9e:	f000 fe47 	bl	8001730 <__clzsi2>
 8000aa2:	2676      	movs	r6, #118	; 0x76
 8000aa4:	1f43      	subs	r3, r0, #5
 8000aa6:	409f      	lsls	r7, r3
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	4276      	negs	r6, r6
 8000aac:	1a36      	subs	r6, r6, r0
 8000aae:	4699      	mov	r9, r3
 8000ab0:	469a      	mov	sl, r3
 8000ab2:	e79d      	b.n	80009f0 <__aeabi_fmul+0x30>
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	3b09      	subs	r3, #9
 8000aba:	26ff      	movs	r6, #255	; 0xff
 8000abc:	469a      	mov	sl, r3
 8000abe:	e797      	b.n	80009f0 <__aeabi_fmul+0x30>
 8000ac0:	0028      	movs	r0, r5
 8000ac2:	f000 fe35 	bl	8001730 <__clzsi2>
 8000ac6:	1f43      	subs	r3, r0, #5
 8000ac8:	409d      	lsls	r5, r3
 8000aca:	2376      	movs	r3, #118	; 0x76
 8000acc:	425b      	negs	r3, r3
 8000ace:	1a18      	subs	r0, r3, r0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e79d      	b.n	8000a10 <__aeabi_fmul+0x50>
 8000ad4:	2080      	movs	r0, #128	; 0x80
 8000ad6:	2400      	movs	r4, #0
 8000ad8:	03c0      	lsls	r0, r0, #15
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	e7ba      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000ade:	003d      	movs	r5, r7
 8000ae0:	4652      	mov	r2, sl
 8000ae2:	e7ab      	b.n	8000a3c <__aeabi_fmul+0x7c>
 8000ae4:	003d      	movs	r5, r7
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	4652      	mov	r2, sl
 8000aea:	e7a7      	b.n	8000a3c <__aeabi_fmul+0x7c>
 8000aec:	0c3b      	lsrs	r3, r7, #16
 8000aee:	469c      	mov	ip, r3
 8000af0:	042a      	lsls	r2, r5, #16
 8000af2:	0c12      	lsrs	r2, r2, #16
 8000af4:	0c2b      	lsrs	r3, r5, #16
 8000af6:	0014      	movs	r4, r2
 8000af8:	4660      	mov	r0, ip
 8000afa:	4665      	mov	r5, ip
 8000afc:	043f      	lsls	r7, r7, #16
 8000afe:	0c3f      	lsrs	r7, r7, #16
 8000b00:	437c      	muls	r4, r7
 8000b02:	4342      	muls	r2, r0
 8000b04:	435d      	muls	r5, r3
 8000b06:	437b      	muls	r3, r7
 8000b08:	0c27      	lsrs	r7, r4, #16
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	18ff      	adds	r7, r7, r3
 8000b0e:	42ba      	cmp	r2, r7
 8000b10:	d903      	bls.n	8000b1a <__aeabi_fmul+0x15a>
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	469c      	mov	ip, r3
 8000b18:	4465      	add	r5, ip
 8000b1a:	0424      	lsls	r4, r4, #16
 8000b1c:	043a      	lsls	r2, r7, #16
 8000b1e:	0c24      	lsrs	r4, r4, #16
 8000b20:	1912      	adds	r2, r2, r4
 8000b22:	0193      	lsls	r3, r2, #6
 8000b24:	1e5c      	subs	r4, r3, #1
 8000b26:	41a3      	sbcs	r3, r4
 8000b28:	0c3f      	lsrs	r7, r7, #16
 8000b2a:	0e92      	lsrs	r2, r2, #26
 8000b2c:	197d      	adds	r5, r7, r5
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	01ad      	lsls	r5, r5, #6
 8000b32:	4315      	orrs	r5, r2
 8000b34:	012b      	lsls	r3, r5, #4
 8000b36:	d504      	bpl.n	8000b42 <__aeabi_fmul+0x182>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	465e      	mov	r6, fp
 8000b3c:	086a      	lsrs	r2, r5, #1
 8000b3e:	401d      	ands	r5, r3
 8000b40:	4315      	orrs	r5, r2
 8000b42:	0032      	movs	r2, r6
 8000b44:	327f      	adds	r2, #127	; 0x7f
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	dd25      	ble.n	8000b96 <__aeabi_fmul+0x1d6>
 8000b4a:	076b      	lsls	r3, r5, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fmul+0x198>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	402b      	ands	r3, r5
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fmul+0x198>
 8000b56:	3504      	adds	r5, #4
 8000b58:	012b      	lsls	r3, r5, #4
 8000b5a:	d503      	bpl.n	8000b64 <__aeabi_fmul+0x1a4>
 8000b5c:	0032      	movs	r2, r6
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <__aeabi_fmul+0x23c>)
 8000b60:	3280      	adds	r2, #128	; 0x80
 8000b62:	401d      	ands	r5, r3
 8000b64:	2afe      	cmp	r2, #254	; 0xfe
 8000b66:	dc94      	bgt.n	8000a92 <__aeabi_fmul+0xd2>
 8000b68:	2401      	movs	r4, #1
 8000b6a:	01a8      	lsls	r0, r5, #6
 8000b6c:	0a40      	lsrs	r0, r0, #9
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	400c      	ands	r4, r1
 8000b72:	e76f      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000b74:	2080      	movs	r0, #128	; 0x80
 8000b76:	03c0      	lsls	r0, r0, #15
 8000b78:	4207      	tst	r7, r0
 8000b7a:	d007      	beq.n	8000b8c <__aeabi_fmul+0x1cc>
 8000b7c:	4205      	tst	r5, r0
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_fmul+0x1cc>
 8000b80:	4328      	orrs	r0, r5
 8000b82:	0240      	lsls	r0, r0, #9
 8000b84:	0a40      	lsrs	r0, r0, #9
 8000b86:	4644      	mov	r4, r8
 8000b88:	22ff      	movs	r2, #255	; 0xff
 8000b8a:	e763      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000b8c:	4338      	orrs	r0, r7
 8000b8e:	0240      	lsls	r0, r0, #9
 8000b90:	0a40      	lsrs	r0, r0, #9
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	e75e      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000b96:	2401      	movs	r4, #1
 8000b98:	1aa3      	subs	r3, r4, r2
 8000b9a:	2b1b      	cmp	r3, #27
 8000b9c:	dd05      	ble.n	8000baa <__aeabi_fmul+0x1ea>
 8000b9e:	400c      	ands	r4, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	e756      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000ba6:	465e      	mov	r6, fp
 8000ba8:	e7cb      	b.n	8000b42 <__aeabi_fmul+0x182>
 8000baa:	002a      	movs	r2, r5
 8000bac:	2020      	movs	r0, #32
 8000bae:	40da      	lsrs	r2, r3
 8000bb0:	1ac3      	subs	r3, r0, r3
 8000bb2:	409d      	lsls	r5, r3
 8000bb4:	002b      	movs	r3, r5
 8000bb6:	1e5d      	subs	r5, r3, #1
 8000bb8:	41ab      	sbcs	r3, r5
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	075a      	lsls	r2, r3, #29
 8000bbe:	d004      	beq.n	8000bca <__aeabi_fmul+0x20a>
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	2a04      	cmp	r2, #4
 8000bc6:	d000      	beq.n	8000bca <__aeabi_fmul+0x20a>
 8000bc8:	3304      	adds	r3, #4
 8000bca:	015a      	lsls	r2, r3, #5
 8000bcc:	d504      	bpl.n	8000bd8 <__aeabi_fmul+0x218>
 8000bce:	2401      	movs	r4, #1
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	400c      	ands	r4, r1
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e73d      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000bd8:	2401      	movs	r4, #1
 8000bda:	019b      	lsls	r3, r3, #6
 8000bdc:	0a58      	lsrs	r0, r3, #9
 8000bde:	400c      	ands	r4, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	e737      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000be4:	2080      	movs	r0, #128	; 0x80
 8000be6:	2401      	movs	r4, #1
 8000be8:	03c0      	lsls	r0, r0, #15
 8000bea:	4328      	orrs	r0, r5
 8000bec:	0240      	lsls	r0, r0, #9
 8000bee:	0a40      	lsrs	r0, r0, #9
 8000bf0:	400c      	ands	r4, r1
 8000bf2:	22ff      	movs	r2, #255	; 0xff
 8000bf4:	e72e      	b.n	8000a54 <__aeabi_fmul+0x94>
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	08003b44 	.word	0x08003b44
 8000bfc:	f7ffffff 	.word	0xf7ffffff

08000c00 <__aeabi_fsub>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	464f      	mov	r7, r9
 8000c04:	46d6      	mov	lr, sl
 8000c06:	4646      	mov	r6, r8
 8000c08:	0044      	lsls	r4, r0, #1
 8000c0a:	b5c0      	push	{r6, r7, lr}
 8000c0c:	0fc2      	lsrs	r2, r0, #31
 8000c0e:	0247      	lsls	r7, r0, #9
 8000c10:	0248      	lsls	r0, r1, #9
 8000c12:	0a40      	lsrs	r0, r0, #9
 8000c14:	4684      	mov	ip, r0
 8000c16:	4666      	mov	r6, ip
 8000c18:	0a7b      	lsrs	r3, r7, #9
 8000c1a:	0048      	lsls	r0, r1, #1
 8000c1c:	0fc9      	lsrs	r1, r1, #31
 8000c1e:	469a      	mov	sl, r3
 8000c20:	0e24      	lsrs	r4, r4, #24
 8000c22:	0015      	movs	r5, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	0e00      	lsrs	r0, r0, #24
 8000c28:	4689      	mov	r9, r1
 8000c2a:	00f6      	lsls	r6, r6, #3
 8000c2c:	28ff      	cmp	r0, #255	; 0xff
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fsub+0x32>
 8000c30:	e08f      	b.n	8000d52 <__aeabi_fsub+0x152>
 8000c32:	2101      	movs	r1, #1
 8000c34:	464f      	mov	r7, r9
 8000c36:	404f      	eors	r7, r1
 8000c38:	0039      	movs	r1, r7
 8000c3a:	4291      	cmp	r1, r2
 8000c3c:	d066      	beq.n	8000d0c <__aeabi_fsub+0x10c>
 8000c3e:	1a22      	subs	r2, r4, r0
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_fsub+0x46>
 8000c44:	e09d      	b.n	8000d82 <__aeabi_fsub+0x182>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d13d      	bne.n	8000cc6 <__aeabi_fsub+0xc6>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x50>
 8000c4e:	e08b      	b.n	8000d68 <__aeabi_fsub+0x168>
 8000c50:	1e51      	subs	r1, r2, #1
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d000      	beq.n	8000c58 <__aeabi_fsub+0x58>
 8000c56:	e0b5      	b.n	8000dc4 <__aeabi_fsub+0x1c4>
 8000c58:	2401      	movs	r4, #1
 8000c5a:	1b9b      	subs	r3, r3, r6
 8000c5c:	015a      	lsls	r2, r3, #5
 8000c5e:	d544      	bpl.n	8000cea <__aeabi_fsub+0xea>
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	099f      	lsrs	r7, r3, #6
 8000c64:	0038      	movs	r0, r7
 8000c66:	f000 fd63 	bl	8001730 <__clzsi2>
 8000c6a:	3805      	subs	r0, #5
 8000c6c:	4087      	lsls	r7, r0
 8000c6e:	4284      	cmp	r4, r0
 8000c70:	dd00      	ble.n	8000c74 <__aeabi_fsub+0x74>
 8000c72:	e096      	b.n	8000da2 <__aeabi_fsub+0x1a2>
 8000c74:	1b04      	subs	r4, r0, r4
 8000c76:	003a      	movs	r2, r7
 8000c78:	2020      	movs	r0, #32
 8000c7a:	3401      	adds	r4, #1
 8000c7c:	40e2      	lsrs	r2, r4
 8000c7e:	1b04      	subs	r4, r0, r4
 8000c80:	40a7      	lsls	r7, r4
 8000c82:	003b      	movs	r3, r7
 8000c84:	1e5f      	subs	r7, r3, #1
 8000c86:	41bb      	sbcs	r3, r7
 8000c88:	2400      	movs	r4, #0
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	075a      	lsls	r2, r3, #29
 8000c8e:	d004      	beq.n	8000c9a <__aeabi_fsub+0x9a>
 8000c90:	220f      	movs	r2, #15
 8000c92:	401a      	ands	r2, r3
 8000c94:	2a04      	cmp	r2, #4
 8000c96:	d000      	beq.n	8000c9a <__aeabi_fsub+0x9a>
 8000c98:	3304      	adds	r3, #4
 8000c9a:	015a      	lsls	r2, r3, #5
 8000c9c:	d527      	bpl.n	8000cee <__aeabi_fsub+0xee>
 8000c9e:	3401      	adds	r4, #1
 8000ca0:	2cff      	cmp	r4, #255	; 0xff
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0xa6>
 8000ca4:	e079      	b.n	8000d9a <__aeabi_fsub+0x19a>
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	0a5b      	lsrs	r3, r3, #9
 8000cac:	b2e4      	uxtb	r4, r4
 8000cae:	402a      	ands	r2, r5
 8000cb0:	025b      	lsls	r3, r3, #9
 8000cb2:	05e4      	lsls	r4, r4, #23
 8000cb4:	0a58      	lsrs	r0, r3, #9
 8000cb6:	07d2      	lsls	r2, r2, #31
 8000cb8:	4320      	orrs	r0, r4
 8000cba:	4310      	orrs	r0, r2
 8000cbc:	bc1c      	pop	{r2, r3, r4}
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	46a2      	mov	sl, r4
 8000cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d0e0      	beq.n	8000c8c <__aeabi_fsub+0x8c>
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	04c9      	lsls	r1, r1, #19
 8000cce:	430e      	orrs	r6, r1
 8000cd0:	2a1b      	cmp	r2, #27
 8000cd2:	dc7b      	bgt.n	8000dcc <__aeabi_fsub+0x1cc>
 8000cd4:	0031      	movs	r1, r6
 8000cd6:	2020      	movs	r0, #32
 8000cd8:	40d1      	lsrs	r1, r2
 8000cda:	1a82      	subs	r2, r0, r2
 8000cdc:	4096      	lsls	r6, r2
 8000cde:	1e72      	subs	r2, r6, #1
 8000ce0:	4196      	sbcs	r6, r2
 8000ce2:	430e      	orrs	r6, r1
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	015a      	lsls	r2, r3, #5
 8000ce8:	d4ba      	bmi.n	8000c60 <__aeabi_fsub+0x60>
 8000cea:	075a      	lsls	r2, r3, #29
 8000cec:	d1d0      	bne.n	8000c90 <__aeabi_fsub+0x90>
 8000cee:	2201      	movs	r2, #1
 8000cf0:	08df      	lsrs	r7, r3, #3
 8000cf2:	402a      	ands	r2, r5
 8000cf4:	2cff      	cmp	r4, #255	; 0xff
 8000cf6:	d133      	bne.n	8000d60 <__aeabi_fsub+0x160>
 8000cf8:	2f00      	cmp	r7, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_fsub+0xfe>
 8000cfc:	e0a8      	b.n	8000e50 <__aeabi_fsub+0x250>
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	03db      	lsls	r3, r3, #15
 8000d02:	433b      	orrs	r3, r7
 8000d04:	025b      	lsls	r3, r3, #9
 8000d06:	0a5b      	lsrs	r3, r3, #9
 8000d08:	24ff      	movs	r4, #255	; 0xff
 8000d0a:	e7d1      	b.n	8000cb0 <__aeabi_fsub+0xb0>
 8000d0c:	1a21      	subs	r1, r4, r0
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	dd4c      	ble.n	8000dac <__aeabi_fsub+0x1ac>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d02a      	beq.n	8000d6c <__aeabi_fsub+0x16c>
 8000d16:	2cff      	cmp	r4, #255	; 0xff
 8000d18:	d0b8      	beq.n	8000c8c <__aeabi_fsub+0x8c>
 8000d1a:	2080      	movs	r0, #128	; 0x80
 8000d1c:	04c0      	lsls	r0, r0, #19
 8000d1e:	4306      	orrs	r6, r0
 8000d20:	291b      	cmp	r1, #27
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_fsub+0x126>
 8000d24:	e0af      	b.n	8000e86 <__aeabi_fsub+0x286>
 8000d26:	0030      	movs	r0, r6
 8000d28:	2720      	movs	r7, #32
 8000d2a:	40c8      	lsrs	r0, r1
 8000d2c:	1a79      	subs	r1, r7, r1
 8000d2e:	408e      	lsls	r6, r1
 8000d30:	1e71      	subs	r1, r6, #1
 8000d32:	418e      	sbcs	r6, r1
 8000d34:	4306      	orrs	r6, r0
 8000d36:	199b      	adds	r3, r3, r6
 8000d38:	0159      	lsls	r1, r3, #5
 8000d3a:	d5d6      	bpl.n	8000cea <__aeabi_fsub+0xea>
 8000d3c:	3401      	adds	r4, #1
 8000d3e:	2cff      	cmp	r4, #255	; 0xff
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x144>
 8000d42:	e085      	b.n	8000e50 <__aeabi_fsub+0x250>
 8000d44:	2201      	movs	r2, #1
 8000d46:	497a      	ldr	r1, [pc, #488]	; (8000f30 <__aeabi_fsub+0x330>)
 8000d48:	401a      	ands	r2, r3
 8000d4a:	085b      	lsrs	r3, r3, #1
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	e79c      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fsub+0x158>
 8000d56:	e770      	b.n	8000c3a <__aeabi_fsub+0x3a>
 8000d58:	e76b      	b.n	8000c32 <__aeabi_fsub+0x32>
 8000d5a:	1e3b      	subs	r3, r7, #0
 8000d5c:	d1c5      	bne.n	8000cea <__aeabi_fsub+0xea>
 8000d5e:	2200      	movs	r2, #0
 8000d60:	027b      	lsls	r3, r7, #9
 8000d62:	0a5b      	lsrs	r3, r3, #9
 8000d64:	b2e4      	uxtb	r4, r4
 8000d66:	e7a3      	b.n	8000cb0 <__aeabi_fsub+0xb0>
 8000d68:	0014      	movs	r4, r2
 8000d6a:	e78f      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d04d      	beq.n	8000e0c <__aeabi_fsub+0x20c>
 8000d70:	1e48      	subs	r0, r1, #1
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d157      	bne.n	8000e26 <__aeabi_fsub+0x226>
 8000d76:	199b      	adds	r3, r3, r6
 8000d78:	2401      	movs	r4, #1
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	d5b5      	bpl.n	8000cea <__aeabi_fsub+0xea>
 8000d7e:	2402      	movs	r4, #2
 8000d80:	e7e0      	b.n	8000d44 <__aeabi_fsub+0x144>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d125      	bne.n	8000dd2 <__aeabi_fsub+0x1d2>
 8000d86:	1c62      	adds	r2, r4, #1
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	dd72      	ble.n	8000e74 <__aeabi_fsub+0x274>
 8000d8e:	1b9f      	subs	r7, r3, r6
 8000d90:	017a      	lsls	r2, r7, #5
 8000d92:	d535      	bpl.n	8000e00 <__aeabi_fsub+0x200>
 8000d94:	1af7      	subs	r7, r6, r3
 8000d96:	000d      	movs	r5, r1
 8000d98:	e764      	b.n	8000c64 <__aeabi_fsub+0x64>
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	402a      	ands	r2, r5
 8000da0:	e786      	b.n	8000cb0 <__aeabi_fsub+0xb0>
 8000da2:	003b      	movs	r3, r7
 8000da4:	4a63      	ldr	r2, [pc, #396]	; (8000f34 <__aeabi_fsub+0x334>)
 8000da6:	1a24      	subs	r4, r4, r0
 8000da8:	4013      	ands	r3, r2
 8000daa:	e76f      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d16c      	bne.n	8000e8a <__aeabi_fsub+0x28a>
 8000db0:	1c61      	adds	r1, r4, #1
 8000db2:	b2c8      	uxtb	r0, r1
 8000db4:	2801      	cmp	r0, #1
 8000db6:	dd4e      	ble.n	8000e56 <__aeabi_fsub+0x256>
 8000db8:	29ff      	cmp	r1, #255	; 0xff
 8000dba:	d049      	beq.n	8000e50 <__aeabi_fsub+0x250>
 8000dbc:	199b      	adds	r3, r3, r6
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	000c      	movs	r4, r1
 8000dc2:	e763      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000dc4:	2aff      	cmp	r2, #255	; 0xff
 8000dc6:	d041      	beq.n	8000e4c <__aeabi_fsub+0x24c>
 8000dc8:	000a      	movs	r2, r1
 8000dca:	e781      	b.n	8000cd0 <__aeabi_fsub+0xd0>
 8000dcc:	2601      	movs	r6, #1
 8000dce:	1b9b      	subs	r3, r3, r6
 8000dd0:	e789      	b.n	8000ce6 <__aeabi_fsub+0xe6>
 8000dd2:	2c00      	cmp	r4, #0
 8000dd4:	d01c      	beq.n	8000e10 <__aeabi_fsub+0x210>
 8000dd6:	28ff      	cmp	r0, #255	; 0xff
 8000dd8:	d021      	beq.n	8000e1e <__aeabi_fsub+0x21e>
 8000dda:	2480      	movs	r4, #128	; 0x80
 8000ddc:	04e4      	lsls	r4, r4, #19
 8000dde:	4252      	negs	r2, r2
 8000de0:	4323      	orrs	r3, r4
 8000de2:	2a1b      	cmp	r2, #27
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_fsub+0x1e8>
 8000de6:	e096      	b.n	8000f16 <__aeabi_fsub+0x316>
 8000de8:	001c      	movs	r4, r3
 8000dea:	2520      	movs	r5, #32
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	1aaa      	subs	r2, r5, r2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	4193      	sbcs	r3, r2
 8000df6:	4323      	orrs	r3, r4
 8000df8:	1af3      	subs	r3, r6, r3
 8000dfa:	0004      	movs	r4, r0
 8000dfc:	000d      	movs	r5, r1
 8000dfe:	e72d      	b.n	8000c5c <__aeabi_fsub+0x5c>
 8000e00:	2f00      	cmp	r7, #0
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x206>
 8000e04:	e72e      	b.n	8000c64 <__aeabi_fsub+0x64>
 8000e06:	2200      	movs	r2, #0
 8000e08:	2400      	movs	r4, #0
 8000e0a:	e7a9      	b.n	8000d60 <__aeabi_fsub+0x160>
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	e73d      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d058      	beq.n	8000ec6 <__aeabi_fsub+0x2c6>
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d0ee      	beq.n	8000df8 <__aeabi_fsub+0x1f8>
 8000e1a:	28ff      	cmp	r0, #255	; 0xff
 8000e1c:	d1e1      	bne.n	8000de2 <__aeabi_fsub+0x1e2>
 8000e1e:	0033      	movs	r3, r6
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	000d      	movs	r5, r1
 8000e24:	e732      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e26:	29ff      	cmp	r1, #255	; 0xff
 8000e28:	d010      	beq.n	8000e4c <__aeabi_fsub+0x24c>
 8000e2a:	0001      	movs	r1, r0
 8000e2c:	e778      	b.n	8000d20 <__aeabi_fsub+0x120>
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d06e      	beq.n	8000f10 <__aeabi_fsub+0x310>
 8000e32:	24ff      	movs	r4, #255	; 0xff
 8000e34:	2e00      	cmp	r6, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_fsub+0x23a>
 8000e38:	e728      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	4651      	mov	r1, sl
 8000e3e:	03d2      	lsls	r2, r2, #15
 8000e40:	4211      	tst	r1, r2
 8000e42:	d003      	beq.n	8000e4c <__aeabi_fsub+0x24c>
 8000e44:	4661      	mov	r1, ip
 8000e46:	4211      	tst	r1, r2
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x24c>
 8000e4a:	0033      	movs	r3, r6
 8000e4c:	24ff      	movs	r4, #255	; 0xff
 8000e4e:	e71d      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e50:	24ff      	movs	r4, #255	; 0xff
 8000e52:	2300      	movs	r3, #0
 8000e54:	e72c      	b.n	8000cb0 <__aeabi_fsub+0xb0>
 8000e56:	2c00      	cmp	r4, #0
 8000e58:	d1e9      	bne.n	8000e2e <__aeabi_fsub+0x22e>
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d063      	beq.n	8000f26 <__aeabi_fsub+0x326>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x264>
 8000e62:	e713      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e64:	199b      	adds	r3, r3, r6
 8000e66:	015a      	lsls	r2, r3, #5
 8000e68:	d400      	bmi.n	8000e6c <__aeabi_fsub+0x26c>
 8000e6a:	e73e      	b.n	8000cea <__aeabi_fsub+0xea>
 8000e6c:	4a31      	ldr	r2, [pc, #196]	; (8000f34 <__aeabi_fsub+0x334>)
 8000e6e:	000c      	movs	r4, r1
 8000e70:	4013      	ands	r3, r2
 8000e72:	e70b      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e74:	2c00      	cmp	r4, #0
 8000e76:	d11e      	bne.n	8000eb6 <__aeabi_fsub+0x2b6>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d12f      	bne.n	8000edc <__aeabi_fsub+0x2dc>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d04f      	beq.n	8000f20 <__aeabi_fsub+0x320>
 8000e80:	0033      	movs	r3, r6
 8000e82:	000d      	movs	r5, r1
 8000e84:	e702      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000e86:	2601      	movs	r6, #1
 8000e88:	e755      	b.n	8000d36 <__aeabi_fsub+0x136>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d11f      	bne.n	8000ece <__aeabi_fsub+0x2ce>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d043      	beq.n	8000f1a <__aeabi_fsub+0x31a>
 8000e92:	43c9      	mvns	r1, r1
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d00b      	beq.n	8000eb0 <__aeabi_fsub+0x2b0>
 8000e98:	28ff      	cmp	r0, #255	; 0xff
 8000e9a:	d039      	beq.n	8000f10 <__aeabi_fsub+0x310>
 8000e9c:	291b      	cmp	r1, #27
 8000e9e:	dc44      	bgt.n	8000f2a <__aeabi_fsub+0x32a>
 8000ea0:	001c      	movs	r4, r3
 8000ea2:	2720      	movs	r7, #32
 8000ea4:	40cc      	lsrs	r4, r1
 8000ea6:	1a79      	subs	r1, r7, r1
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	418b      	sbcs	r3, r1
 8000eae:	4323      	orrs	r3, r4
 8000eb0:	199b      	adds	r3, r3, r6
 8000eb2:	0004      	movs	r4, r0
 8000eb4:	e740      	b.n	8000d38 <__aeabi_fsub+0x138>
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11a      	bne.n	8000ef0 <__aeabi_fsub+0x2f0>
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d124      	bne.n	8000f08 <__aeabi_fsub+0x308>
 8000ebe:	2780      	movs	r7, #128	; 0x80
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	03ff      	lsls	r7, r7, #15
 8000ec4:	e71b      	b.n	8000cfe <__aeabi_fsub+0xfe>
 8000ec6:	0033      	movs	r3, r6
 8000ec8:	0004      	movs	r4, r0
 8000eca:	000d      	movs	r5, r1
 8000ecc:	e6de      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000ece:	28ff      	cmp	r0, #255	; 0xff
 8000ed0:	d01e      	beq.n	8000f10 <__aeabi_fsub+0x310>
 8000ed2:	2480      	movs	r4, #128	; 0x80
 8000ed4:	04e4      	lsls	r4, r4, #19
 8000ed6:	4249      	negs	r1, r1
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	e7df      	b.n	8000e9c <__aeabi_fsub+0x29c>
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_fsub+0x2e2>
 8000ee0:	e6d4      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000ee2:	1b9f      	subs	r7, r3, r6
 8000ee4:	017a      	lsls	r2, r7, #5
 8000ee6:	d400      	bmi.n	8000eea <__aeabi_fsub+0x2ea>
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fsub+0x15a>
 8000eea:	1af3      	subs	r3, r6, r3
 8000eec:	000d      	movs	r5, r1
 8000eee:	e6cd      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000ef0:	24ff      	movs	r4, #255	; 0xff
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x2f8>
 8000ef6:	e6c9      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	4650      	mov	r0, sl
 8000efc:	03d2      	lsls	r2, r2, #15
 8000efe:	4210      	tst	r0, r2
 8000f00:	d0a4      	beq.n	8000e4c <__aeabi_fsub+0x24c>
 8000f02:	4660      	mov	r0, ip
 8000f04:	4210      	tst	r0, r2
 8000f06:	d1a1      	bne.n	8000e4c <__aeabi_fsub+0x24c>
 8000f08:	0033      	movs	r3, r6
 8000f0a:	000d      	movs	r5, r1
 8000f0c:	24ff      	movs	r4, #255	; 0xff
 8000f0e:	e6bd      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000f10:	0033      	movs	r3, r6
 8000f12:	24ff      	movs	r4, #255	; 0xff
 8000f14:	e6ba      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e76e      	b.n	8000df8 <__aeabi_fsub+0x1f8>
 8000f1a:	0033      	movs	r3, r6
 8000f1c:	0004      	movs	r4, r0
 8000f1e:	e6b5      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000f20:	2700      	movs	r7, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	e71c      	b.n	8000d60 <__aeabi_fsub+0x160>
 8000f26:	0033      	movs	r3, r6
 8000f28:	e6b0      	b.n	8000c8c <__aeabi_fsub+0x8c>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e7c0      	b.n	8000eb0 <__aeabi_fsub+0x2b0>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	7dffffff 	.word	0x7dffffff
 8000f34:	fbffffff 	.word	0xfbffffff

08000f38 <__aeabi_f2iz>:
 8000f38:	0241      	lsls	r1, r0, #9
 8000f3a:	0043      	lsls	r3, r0, #1
 8000f3c:	0fc2      	lsrs	r2, r0, #31
 8000f3e:	0a49      	lsrs	r1, r1, #9
 8000f40:	0e1b      	lsrs	r3, r3, #24
 8000f42:	2000      	movs	r0, #0
 8000f44:	2b7e      	cmp	r3, #126	; 0x7e
 8000f46:	dd0d      	ble.n	8000f64 <__aeabi_f2iz+0x2c>
 8000f48:	2b9d      	cmp	r3, #157	; 0x9d
 8000f4a:	dc0c      	bgt.n	8000f66 <__aeabi_f2iz+0x2e>
 8000f4c:	2080      	movs	r0, #128	; 0x80
 8000f4e:	0400      	lsls	r0, r0, #16
 8000f50:	4301      	orrs	r1, r0
 8000f52:	2b95      	cmp	r3, #149	; 0x95
 8000f54:	dc0a      	bgt.n	8000f6c <__aeabi_f2iz+0x34>
 8000f56:	2096      	movs	r0, #150	; 0x96
 8000f58:	1ac3      	subs	r3, r0, r3
 8000f5a:	40d9      	lsrs	r1, r3
 8000f5c:	4248      	negs	r0, r1
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_f2iz+0x2c>
 8000f62:	0008      	movs	r0, r1
 8000f64:	4770      	bx	lr
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <__aeabi_f2iz+0x3c>)
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	e7fb      	b.n	8000f64 <__aeabi_f2iz+0x2c>
 8000f6c:	3b96      	subs	r3, #150	; 0x96
 8000f6e:	4099      	lsls	r1, r3
 8000f70:	e7f4      	b.n	8000f5c <__aeabi_f2iz+0x24>
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	7fffffff 	.word	0x7fffffff

08000f78 <__aeabi_dadd>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	4645      	mov	r5, r8
 8000f7c:	46de      	mov	lr, fp
 8000f7e:	4657      	mov	r7, sl
 8000f80:	464e      	mov	r6, r9
 8000f82:	030c      	lsls	r4, r1, #12
 8000f84:	b5e0      	push	{r5, r6, r7, lr}
 8000f86:	004e      	lsls	r6, r1, #1
 8000f88:	0fc9      	lsrs	r1, r1, #31
 8000f8a:	4688      	mov	r8, r1
 8000f8c:	000d      	movs	r5, r1
 8000f8e:	0a61      	lsrs	r1, r4, #9
 8000f90:	0f44      	lsrs	r4, r0, #29
 8000f92:	430c      	orrs	r4, r1
 8000f94:	00c7      	lsls	r7, r0, #3
 8000f96:	0319      	lsls	r1, r3, #12
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	0fdb      	lsrs	r3, r3, #31
 8000f9c:	469b      	mov	fp, r3
 8000f9e:	0a4b      	lsrs	r3, r1, #9
 8000fa0:	0f51      	lsrs	r1, r2, #29
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	0d76      	lsrs	r6, r6, #21
 8000fa6:	0d40      	lsrs	r0, r0, #21
 8000fa8:	0019      	movs	r1, r3
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	45d8      	cmp	r8, fp
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dadd+0x3a>
 8000fb0:	e0ae      	b.n	8001110 <__aeabi_dadd+0x198>
 8000fb2:	1a35      	subs	r5, r6, r0
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	dc00      	bgt.n	8000fba <__aeabi_dadd+0x42>
 8000fb8:	e0f6      	b.n	80011a8 <__aeabi_dadd+0x230>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d10f      	bne.n	8000fde <__aeabi_dadd+0x66>
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dadd+0x4c>
 8000fc2:	e0db      	b.n	800117c <__aeabi_dadd+0x204>
 8000fc4:	1e6b      	subs	r3, r5, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_dadd+0x54>
 8000fca:	e137      	b.n	800123c <__aeabi_dadd+0x2c4>
 8000fcc:	1aba      	subs	r2, r7, r2
 8000fce:	4297      	cmp	r7, r2
 8000fd0:	41bf      	sbcs	r7, r7
 8000fd2:	1a64      	subs	r4, r4, r1
 8000fd4:	427f      	negs	r7, r7
 8000fd6:	1be4      	subs	r4, r4, r7
 8000fd8:	2601      	movs	r6, #1
 8000fda:	0017      	movs	r7, r2
 8000fdc:	e024      	b.n	8001028 <__aeabi_dadd+0xb0>
 8000fde:	4bc6      	ldr	r3, [pc, #792]	; (80012f8 <__aeabi_dadd+0x380>)
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d04d      	beq.n	8001080 <__aeabi_dadd+0x108>
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	4319      	orrs	r1, r3
 8000fea:	2d38      	cmp	r5, #56	; 0x38
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_dadd+0x78>
 8000fee:	e107      	b.n	8001200 <__aeabi_dadd+0x288>
 8000ff0:	2d1f      	cmp	r5, #31
 8000ff2:	dd00      	ble.n	8000ff6 <__aeabi_dadd+0x7e>
 8000ff4:	e138      	b.n	8001268 <__aeabi_dadd+0x2f0>
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	1b43      	subs	r3, r0, r5
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	000b      	movs	r3, r1
 8000ffe:	4650      	mov	r0, sl
 8001000:	4083      	lsls	r3, r0
 8001002:	4699      	mov	r9, r3
 8001004:	0013      	movs	r3, r2
 8001006:	4648      	mov	r0, r9
 8001008:	40eb      	lsrs	r3, r5
 800100a:	4318      	orrs	r0, r3
 800100c:	0003      	movs	r3, r0
 800100e:	4650      	mov	r0, sl
 8001010:	4082      	lsls	r2, r0
 8001012:	1e50      	subs	r0, r2, #1
 8001014:	4182      	sbcs	r2, r0
 8001016:	40e9      	lsrs	r1, r5
 8001018:	431a      	orrs	r2, r3
 800101a:	1aba      	subs	r2, r7, r2
 800101c:	1a61      	subs	r1, r4, r1
 800101e:	4297      	cmp	r7, r2
 8001020:	41a4      	sbcs	r4, r4
 8001022:	0017      	movs	r7, r2
 8001024:	4264      	negs	r4, r4
 8001026:	1b0c      	subs	r4, r1, r4
 8001028:	0223      	lsls	r3, r4, #8
 800102a:	d562      	bpl.n	80010f2 <__aeabi_dadd+0x17a>
 800102c:	0264      	lsls	r4, r4, #9
 800102e:	0a65      	lsrs	r5, r4, #9
 8001030:	2d00      	cmp	r5, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_dadd+0xbe>
 8001034:	e0df      	b.n	80011f6 <__aeabi_dadd+0x27e>
 8001036:	0028      	movs	r0, r5
 8001038:	f000 fb7a 	bl	8001730 <__clzsi2>
 800103c:	0003      	movs	r3, r0
 800103e:	3b08      	subs	r3, #8
 8001040:	2b1f      	cmp	r3, #31
 8001042:	dd00      	ble.n	8001046 <__aeabi_dadd+0xce>
 8001044:	e0d2      	b.n	80011ec <__aeabi_dadd+0x274>
 8001046:	2220      	movs	r2, #32
 8001048:	003c      	movs	r4, r7
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	409d      	lsls	r5, r3
 800104e:	40d4      	lsrs	r4, r2
 8001050:	409f      	lsls	r7, r3
 8001052:	4325      	orrs	r5, r4
 8001054:	429e      	cmp	r6, r3
 8001056:	dd00      	ble.n	800105a <__aeabi_dadd+0xe2>
 8001058:	e0c4      	b.n	80011e4 <__aeabi_dadd+0x26c>
 800105a:	1b9e      	subs	r6, r3, r6
 800105c:	1c73      	adds	r3, r6, #1
 800105e:	2b1f      	cmp	r3, #31
 8001060:	dd00      	ble.n	8001064 <__aeabi_dadd+0xec>
 8001062:	e0f1      	b.n	8001248 <__aeabi_dadd+0x2d0>
 8001064:	2220      	movs	r2, #32
 8001066:	0038      	movs	r0, r7
 8001068:	0029      	movs	r1, r5
 800106a:	1ad2      	subs	r2, r2, r3
 800106c:	40d8      	lsrs	r0, r3
 800106e:	4091      	lsls	r1, r2
 8001070:	4097      	lsls	r7, r2
 8001072:	002c      	movs	r4, r5
 8001074:	4301      	orrs	r1, r0
 8001076:	1e78      	subs	r0, r7, #1
 8001078:	4187      	sbcs	r7, r0
 800107a:	40dc      	lsrs	r4, r3
 800107c:	2600      	movs	r6, #0
 800107e:	430f      	orrs	r7, r1
 8001080:	077b      	lsls	r3, r7, #29
 8001082:	d009      	beq.n	8001098 <__aeabi_dadd+0x120>
 8001084:	230f      	movs	r3, #15
 8001086:	403b      	ands	r3, r7
 8001088:	2b04      	cmp	r3, #4
 800108a:	d005      	beq.n	8001098 <__aeabi_dadd+0x120>
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	42bb      	cmp	r3, r7
 8001090:	41bf      	sbcs	r7, r7
 8001092:	427f      	negs	r7, r7
 8001094:	19e4      	adds	r4, r4, r7
 8001096:	001f      	movs	r7, r3
 8001098:	0223      	lsls	r3, r4, #8
 800109a:	d52c      	bpl.n	80010f6 <__aeabi_dadd+0x17e>
 800109c:	4b96      	ldr	r3, [pc, #600]	; (80012f8 <__aeabi_dadd+0x380>)
 800109e:	3601      	adds	r6, #1
 80010a0:	429e      	cmp	r6, r3
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x12e>
 80010a4:	e09a      	b.n	80011dc <__aeabi_dadd+0x264>
 80010a6:	4645      	mov	r5, r8
 80010a8:	4b94      	ldr	r3, [pc, #592]	; (80012fc <__aeabi_dadd+0x384>)
 80010aa:	08ff      	lsrs	r7, r7, #3
 80010ac:	401c      	ands	r4, r3
 80010ae:	0760      	lsls	r0, r4, #29
 80010b0:	0576      	lsls	r6, r6, #21
 80010b2:	0264      	lsls	r4, r4, #9
 80010b4:	4307      	orrs	r7, r0
 80010b6:	0b24      	lsrs	r4, r4, #12
 80010b8:	0d76      	lsrs	r6, r6, #21
 80010ba:	2100      	movs	r1, #0
 80010bc:	0324      	lsls	r4, r4, #12
 80010be:	0b23      	lsrs	r3, r4, #12
 80010c0:	0d0c      	lsrs	r4, r1, #20
 80010c2:	4a8f      	ldr	r2, [pc, #572]	; (8001300 <__aeabi_dadd+0x388>)
 80010c4:	0524      	lsls	r4, r4, #20
 80010c6:	431c      	orrs	r4, r3
 80010c8:	4014      	ands	r4, r2
 80010ca:	0533      	lsls	r3, r6, #20
 80010cc:	4323      	orrs	r3, r4
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	07ed      	lsls	r5, r5, #31
 80010d2:	085b      	lsrs	r3, r3, #1
 80010d4:	432b      	orrs	r3, r5
 80010d6:	0038      	movs	r0, r7
 80010d8:	0019      	movs	r1, r3
 80010da:	bc3c      	pop	{r2, r3, r4, r5}
 80010dc:	4690      	mov	r8, r2
 80010de:	4699      	mov	r9, r3
 80010e0:	46a2      	mov	sl, r4
 80010e2:	46ab      	mov	fp, r5
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e6:	4664      	mov	r4, ip
 80010e8:	4304      	orrs	r4, r0
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0x176>
 80010ec:	e211      	b.n	8001512 <__aeabi_dadd+0x59a>
 80010ee:	0004      	movs	r4, r0
 80010f0:	4667      	mov	r7, ip
 80010f2:	077b      	lsls	r3, r7, #29
 80010f4:	d1c6      	bne.n	8001084 <__aeabi_dadd+0x10c>
 80010f6:	4645      	mov	r5, r8
 80010f8:	0760      	lsls	r0, r4, #29
 80010fa:	08ff      	lsrs	r7, r7, #3
 80010fc:	4307      	orrs	r7, r0
 80010fe:	08e4      	lsrs	r4, r4, #3
 8001100:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <__aeabi_dadd+0x380>)
 8001102:	429e      	cmp	r6, r3
 8001104:	d030      	beq.n	8001168 <__aeabi_dadd+0x1f0>
 8001106:	0324      	lsls	r4, r4, #12
 8001108:	0576      	lsls	r6, r6, #21
 800110a:	0b24      	lsrs	r4, r4, #12
 800110c:	0d76      	lsrs	r6, r6, #21
 800110e:	e7d4      	b.n	80010ba <__aeabi_dadd+0x142>
 8001110:	1a33      	subs	r3, r6, r0
 8001112:	469a      	mov	sl, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	dd78      	ble.n	800120a <__aeabi_dadd+0x292>
 8001118:	2800      	cmp	r0, #0
 800111a:	d031      	beq.n	8001180 <__aeabi_dadd+0x208>
 800111c:	4876      	ldr	r0, [pc, #472]	; (80012f8 <__aeabi_dadd+0x380>)
 800111e:	4286      	cmp	r6, r0
 8001120:	d0ae      	beq.n	8001080 <__aeabi_dadd+0x108>
 8001122:	2080      	movs	r0, #128	; 0x80
 8001124:	0400      	lsls	r0, r0, #16
 8001126:	4301      	orrs	r1, r0
 8001128:	4653      	mov	r3, sl
 800112a:	2b38      	cmp	r3, #56	; 0x38
 800112c:	dc00      	bgt.n	8001130 <__aeabi_dadd+0x1b8>
 800112e:	e0e9      	b.n	8001304 <__aeabi_dadd+0x38c>
 8001130:	430a      	orrs	r2, r1
 8001132:	1e51      	subs	r1, r2, #1
 8001134:	418a      	sbcs	r2, r1
 8001136:	2100      	movs	r1, #0
 8001138:	19d2      	adds	r2, r2, r7
 800113a:	42ba      	cmp	r2, r7
 800113c:	41bf      	sbcs	r7, r7
 800113e:	1909      	adds	r1, r1, r4
 8001140:	427c      	negs	r4, r7
 8001142:	0017      	movs	r7, r2
 8001144:	190c      	adds	r4, r1, r4
 8001146:	0223      	lsls	r3, r4, #8
 8001148:	d5d3      	bpl.n	80010f2 <__aeabi_dadd+0x17a>
 800114a:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <__aeabi_dadd+0x380>)
 800114c:	3601      	adds	r6, #1
 800114e:	429e      	cmp	r6, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x1dc>
 8001152:	e13a      	b.n	80013ca <__aeabi_dadd+0x452>
 8001154:	2001      	movs	r0, #1
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <__aeabi_dadd+0x384>)
 8001158:	401c      	ands	r4, r3
 800115a:	087b      	lsrs	r3, r7, #1
 800115c:	4007      	ands	r7, r0
 800115e:	431f      	orrs	r7, r3
 8001160:	07e0      	lsls	r0, r4, #31
 8001162:	4307      	orrs	r7, r0
 8001164:	0864      	lsrs	r4, r4, #1
 8001166:	e78b      	b.n	8001080 <__aeabi_dadd+0x108>
 8001168:	0023      	movs	r3, r4
 800116a:	433b      	orrs	r3, r7
 800116c:	d100      	bne.n	8001170 <__aeabi_dadd+0x1f8>
 800116e:	e1cb      	b.n	8001508 <__aeabi_dadd+0x590>
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0312      	lsls	r2, r2, #12
 8001174:	4314      	orrs	r4, r2
 8001176:	0324      	lsls	r4, r4, #12
 8001178:	0b24      	lsrs	r4, r4, #12
 800117a:	e79e      	b.n	80010ba <__aeabi_dadd+0x142>
 800117c:	002e      	movs	r6, r5
 800117e:	e77f      	b.n	8001080 <__aeabi_dadd+0x108>
 8001180:	0008      	movs	r0, r1
 8001182:	4310      	orrs	r0, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x210>
 8001186:	e0b4      	b.n	80012f2 <__aeabi_dadd+0x37a>
 8001188:	1e58      	subs	r0, r3, #1
 800118a:	2800      	cmp	r0, #0
 800118c:	d000      	beq.n	8001190 <__aeabi_dadd+0x218>
 800118e:	e0de      	b.n	800134e <__aeabi_dadd+0x3d6>
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	42ba      	cmp	r2, r7
 8001194:	419b      	sbcs	r3, r3
 8001196:	1864      	adds	r4, r4, r1
 8001198:	425b      	negs	r3, r3
 800119a:	18e4      	adds	r4, r4, r3
 800119c:	0017      	movs	r7, r2
 800119e:	2601      	movs	r6, #1
 80011a0:	0223      	lsls	r3, r4, #8
 80011a2:	d5a6      	bpl.n	80010f2 <__aeabi_dadd+0x17a>
 80011a4:	2602      	movs	r6, #2
 80011a6:	e7d5      	b.n	8001154 <__aeabi_dadd+0x1dc>
 80011a8:	2d00      	cmp	r5, #0
 80011aa:	d16e      	bne.n	800128a <__aeabi_dadd+0x312>
 80011ac:	1c70      	adds	r0, r6, #1
 80011ae:	0540      	lsls	r0, r0, #21
 80011b0:	0d40      	lsrs	r0, r0, #21
 80011b2:	2801      	cmp	r0, #1
 80011b4:	dc00      	bgt.n	80011b8 <__aeabi_dadd+0x240>
 80011b6:	e0f9      	b.n	80013ac <__aeabi_dadd+0x434>
 80011b8:	1ab8      	subs	r0, r7, r2
 80011ba:	4684      	mov	ip, r0
 80011bc:	4287      	cmp	r7, r0
 80011be:	4180      	sbcs	r0, r0
 80011c0:	1ae5      	subs	r5, r4, r3
 80011c2:	4240      	negs	r0, r0
 80011c4:	1a2d      	subs	r5, r5, r0
 80011c6:	0228      	lsls	r0, r5, #8
 80011c8:	d400      	bmi.n	80011cc <__aeabi_dadd+0x254>
 80011ca:	e089      	b.n	80012e0 <__aeabi_dadd+0x368>
 80011cc:	1bd7      	subs	r7, r2, r7
 80011ce:	42ba      	cmp	r2, r7
 80011d0:	4192      	sbcs	r2, r2
 80011d2:	1b1c      	subs	r4, r3, r4
 80011d4:	4252      	negs	r2, r2
 80011d6:	1aa5      	subs	r5, r4, r2
 80011d8:	46d8      	mov	r8, fp
 80011da:	e729      	b.n	8001030 <__aeabi_dadd+0xb8>
 80011dc:	4645      	mov	r5, r8
 80011de:	2400      	movs	r4, #0
 80011e0:	2700      	movs	r7, #0
 80011e2:	e76a      	b.n	80010ba <__aeabi_dadd+0x142>
 80011e4:	4c45      	ldr	r4, [pc, #276]	; (80012fc <__aeabi_dadd+0x384>)
 80011e6:	1af6      	subs	r6, r6, r3
 80011e8:	402c      	ands	r4, r5
 80011ea:	e749      	b.n	8001080 <__aeabi_dadd+0x108>
 80011ec:	003d      	movs	r5, r7
 80011ee:	3828      	subs	r0, #40	; 0x28
 80011f0:	4085      	lsls	r5, r0
 80011f2:	2700      	movs	r7, #0
 80011f4:	e72e      	b.n	8001054 <__aeabi_dadd+0xdc>
 80011f6:	0038      	movs	r0, r7
 80011f8:	f000 fa9a 	bl	8001730 <__clzsi2>
 80011fc:	3020      	adds	r0, #32
 80011fe:	e71d      	b.n	800103c <__aeabi_dadd+0xc4>
 8001200:	430a      	orrs	r2, r1
 8001202:	1e51      	subs	r1, r2, #1
 8001204:	418a      	sbcs	r2, r1
 8001206:	2100      	movs	r1, #0
 8001208:	e707      	b.n	800101a <__aeabi_dadd+0xa2>
 800120a:	2b00      	cmp	r3, #0
 800120c:	d000      	beq.n	8001210 <__aeabi_dadd+0x298>
 800120e:	e0f3      	b.n	80013f8 <__aeabi_dadd+0x480>
 8001210:	1c70      	adds	r0, r6, #1
 8001212:	0543      	lsls	r3, r0, #21
 8001214:	0d5b      	lsrs	r3, r3, #21
 8001216:	2b01      	cmp	r3, #1
 8001218:	dc00      	bgt.n	800121c <__aeabi_dadd+0x2a4>
 800121a:	e0ad      	b.n	8001378 <__aeabi_dadd+0x400>
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <__aeabi_dadd+0x380>)
 800121e:	4298      	cmp	r0, r3
 8001220:	d100      	bne.n	8001224 <__aeabi_dadd+0x2ac>
 8001222:	e0d1      	b.n	80013c8 <__aeabi_dadd+0x450>
 8001224:	18ba      	adds	r2, r7, r2
 8001226:	42ba      	cmp	r2, r7
 8001228:	41bf      	sbcs	r7, r7
 800122a:	1864      	adds	r4, r4, r1
 800122c:	427f      	negs	r7, r7
 800122e:	19e4      	adds	r4, r4, r7
 8001230:	07e7      	lsls	r7, r4, #31
 8001232:	0852      	lsrs	r2, r2, #1
 8001234:	4317      	orrs	r7, r2
 8001236:	0864      	lsrs	r4, r4, #1
 8001238:	0006      	movs	r6, r0
 800123a:	e721      	b.n	8001080 <__aeabi_dadd+0x108>
 800123c:	482e      	ldr	r0, [pc, #184]	; (80012f8 <__aeabi_dadd+0x380>)
 800123e:	4285      	cmp	r5, r0
 8001240:	d100      	bne.n	8001244 <__aeabi_dadd+0x2cc>
 8001242:	e093      	b.n	800136c <__aeabi_dadd+0x3f4>
 8001244:	001d      	movs	r5, r3
 8001246:	e6d0      	b.n	8000fea <__aeabi_dadd+0x72>
 8001248:	0029      	movs	r1, r5
 800124a:	3e1f      	subs	r6, #31
 800124c:	40f1      	lsrs	r1, r6
 800124e:	2b20      	cmp	r3, #32
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x2dc>
 8001252:	e08d      	b.n	8001370 <__aeabi_dadd+0x3f8>
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	409d      	lsls	r5, r3
 800125a:	432f      	orrs	r7, r5
 800125c:	1e7d      	subs	r5, r7, #1
 800125e:	41af      	sbcs	r7, r5
 8001260:	2400      	movs	r4, #0
 8001262:	430f      	orrs	r7, r1
 8001264:	2600      	movs	r6, #0
 8001266:	e744      	b.n	80010f2 <__aeabi_dadd+0x17a>
 8001268:	002b      	movs	r3, r5
 800126a:	0008      	movs	r0, r1
 800126c:	3b20      	subs	r3, #32
 800126e:	40d8      	lsrs	r0, r3
 8001270:	0003      	movs	r3, r0
 8001272:	2d20      	cmp	r5, #32
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x300>
 8001276:	e07d      	b.n	8001374 <__aeabi_dadd+0x3fc>
 8001278:	2040      	movs	r0, #64	; 0x40
 800127a:	1b45      	subs	r5, r0, r5
 800127c:	40a9      	lsls	r1, r5
 800127e:	430a      	orrs	r2, r1
 8001280:	1e51      	subs	r1, r2, #1
 8001282:	418a      	sbcs	r2, r1
 8001284:	2100      	movs	r1, #0
 8001286:	431a      	orrs	r2, r3
 8001288:	e6c7      	b.n	800101a <__aeabi_dadd+0xa2>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d050      	beq.n	8001330 <__aeabi_dadd+0x3b8>
 800128e:	4e1a      	ldr	r6, [pc, #104]	; (80012f8 <__aeabi_dadd+0x380>)
 8001290:	42b0      	cmp	r0, r6
 8001292:	d057      	beq.n	8001344 <__aeabi_dadd+0x3cc>
 8001294:	2680      	movs	r6, #128	; 0x80
 8001296:	426b      	negs	r3, r5
 8001298:	4699      	mov	r9, r3
 800129a:	0436      	lsls	r6, r6, #16
 800129c:	4334      	orrs	r4, r6
 800129e:	464b      	mov	r3, r9
 80012a0:	2b38      	cmp	r3, #56	; 0x38
 80012a2:	dd00      	ble.n	80012a6 <__aeabi_dadd+0x32e>
 80012a4:	e0d6      	b.n	8001454 <__aeabi_dadd+0x4dc>
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dd00      	ble.n	80012ac <__aeabi_dadd+0x334>
 80012aa:	e135      	b.n	8001518 <__aeabi_dadd+0x5a0>
 80012ac:	2620      	movs	r6, #32
 80012ae:	1af5      	subs	r5, r6, r3
 80012b0:	0026      	movs	r6, r4
 80012b2:	40ae      	lsls	r6, r5
 80012b4:	46b2      	mov	sl, r6
 80012b6:	003e      	movs	r6, r7
 80012b8:	40de      	lsrs	r6, r3
 80012ba:	46ac      	mov	ip, r5
 80012bc:	0035      	movs	r5, r6
 80012be:	4656      	mov	r6, sl
 80012c0:	432e      	orrs	r6, r5
 80012c2:	4665      	mov	r5, ip
 80012c4:	40af      	lsls	r7, r5
 80012c6:	1e7d      	subs	r5, r7, #1
 80012c8:	41af      	sbcs	r7, r5
 80012ca:	40dc      	lsrs	r4, r3
 80012cc:	4337      	orrs	r7, r6
 80012ce:	1bd7      	subs	r7, r2, r7
 80012d0:	42ba      	cmp	r2, r7
 80012d2:	4192      	sbcs	r2, r2
 80012d4:	1b0c      	subs	r4, r1, r4
 80012d6:	4252      	negs	r2, r2
 80012d8:	1aa4      	subs	r4, r4, r2
 80012da:	0006      	movs	r6, r0
 80012dc:	46d8      	mov	r8, fp
 80012de:	e6a3      	b.n	8001028 <__aeabi_dadd+0xb0>
 80012e0:	4664      	mov	r4, ip
 80012e2:	4667      	mov	r7, ip
 80012e4:	432c      	orrs	r4, r5
 80012e6:	d000      	beq.n	80012ea <__aeabi_dadd+0x372>
 80012e8:	e6a2      	b.n	8001030 <__aeabi_dadd+0xb8>
 80012ea:	2500      	movs	r5, #0
 80012ec:	2600      	movs	r6, #0
 80012ee:	2700      	movs	r7, #0
 80012f0:	e706      	b.n	8001100 <__aeabi_dadd+0x188>
 80012f2:	001e      	movs	r6, r3
 80012f4:	e6c4      	b.n	8001080 <__aeabi_dadd+0x108>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	000007ff 	.word	0x000007ff
 80012fc:	ff7fffff 	.word	0xff7fffff
 8001300:	800fffff 	.word	0x800fffff
 8001304:	2b1f      	cmp	r3, #31
 8001306:	dc63      	bgt.n	80013d0 <__aeabi_dadd+0x458>
 8001308:	2020      	movs	r0, #32
 800130a:	1ac3      	subs	r3, r0, r3
 800130c:	0008      	movs	r0, r1
 800130e:	4098      	lsls	r0, r3
 8001310:	469c      	mov	ip, r3
 8001312:	4683      	mov	fp, r0
 8001314:	4653      	mov	r3, sl
 8001316:	0010      	movs	r0, r2
 8001318:	40d8      	lsrs	r0, r3
 800131a:	0003      	movs	r3, r0
 800131c:	4658      	mov	r0, fp
 800131e:	4318      	orrs	r0, r3
 8001320:	4663      	mov	r3, ip
 8001322:	409a      	lsls	r2, r3
 8001324:	1e53      	subs	r3, r2, #1
 8001326:	419a      	sbcs	r2, r3
 8001328:	4653      	mov	r3, sl
 800132a:	4302      	orrs	r2, r0
 800132c:	40d9      	lsrs	r1, r3
 800132e:	e703      	b.n	8001138 <__aeabi_dadd+0x1c0>
 8001330:	0026      	movs	r6, r4
 8001332:	433e      	orrs	r6, r7
 8001334:	d006      	beq.n	8001344 <__aeabi_dadd+0x3cc>
 8001336:	43eb      	mvns	r3, r5
 8001338:	4699      	mov	r9, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c7      	beq.n	80012ce <__aeabi_dadd+0x356>
 800133e:	4e94      	ldr	r6, [pc, #592]	; (8001590 <__aeabi_dadd+0x618>)
 8001340:	42b0      	cmp	r0, r6
 8001342:	d1ac      	bne.n	800129e <__aeabi_dadd+0x326>
 8001344:	000c      	movs	r4, r1
 8001346:	0017      	movs	r7, r2
 8001348:	0006      	movs	r6, r0
 800134a:	46d8      	mov	r8, fp
 800134c:	e698      	b.n	8001080 <__aeabi_dadd+0x108>
 800134e:	4b90      	ldr	r3, [pc, #576]	; (8001590 <__aeabi_dadd+0x618>)
 8001350:	459a      	cmp	sl, r3
 8001352:	d00b      	beq.n	800136c <__aeabi_dadd+0x3f4>
 8001354:	4682      	mov	sl, r0
 8001356:	e6e7      	b.n	8001128 <__aeabi_dadd+0x1b0>
 8001358:	2800      	cmp	r0, #0
 800135a:	d000      	beq.n	800135e <__aeabi_dadd+0x3e6>
 800135c:	e09e      	b.n	800149c <__aeabi_dadd+0x524>
 800135e:	0018      	movs	r0, r3
 8001360:	4310      	orrs	r0, r2
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x3ee>
 8001364:	e0e9      	b.n	800153a <__aeabi_dadd+0x5c2>
 8001366:	001c      	movs	r4, r3
 8001368:	0017      	movs	r7, r2
 800136a:	46d8      	mov	r8, fp
 800136c:	4e88      	ldr	r6, [pc, #544]	; (8001590 <__aeabi_dadd+0x618>)
 800136e:	e687      	b.n	8001080 <__aeabi_dadd+0x108>
 8001370:	2500      	movs	r5, #0
 8001372:	e772      	b.n	800125a <__aeabi_dadd+0x2e2>
 8001374:	2100      	movs	r1, #0
 8001376:	e782      	b.n	800127e <__aeabi_dadd+0x306>
 8001378:	0023      	movs	r3, r4
 800137a:	433b      	orrs	r3, r7
 800137c:	2e00      	cmp	r6, #0
 800137e:	d000      	beq.n	8001382 <__aeabi_dadd+0x40a>
 8001380:	e0ab      	b.n	80014da <__aeabi_dadd+0x562>
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x410>
 8001386:	e0e7      	b.n	8001558 <__aeabi_dadd+0x5e0>
 8001388:	000b      	movs	r3, r1
 800138a:	4313      	orrs	r3, r2
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x418>
 800138e:	e677      	b.n	8001080 <__aeabi_dadd+0x108>
 8001390:	18ba      	adds	r2, r7, r2
 8001392:	42ba      	cmp	r2, r7
 8001394:	41bf      	sbcs	r7, r7
 8001396:	1864      	adds	r4, r4, r1
 8001398:	427f      	negs	r7, r7
 800139a:	19e4      	adds	r4, r4, r7
 800139c:	0223      	lsls	r3, r4, #8
 800139e:	d400      	bmi.n	80013a2 <__aeabi_dadd+0x42a>
 80013a0:	e0f2      	b.n	8001588 <__aeabi_dadd+0x610>
 80013a2:	4b7c      	ldr	r3, [pc, #496]	; (8001594 <__aeabi_dadd+0x61c>)
 80013a4:	0017      	movs	r7, r2
 80013a6:	401c      	ands	r4, r3
 80013a8:	0006      	movs	r6, r0
 80013aa:	e669      	b.n	8001080 <__aeabi_dadd+0x108>
 80013ac:	0020      	movs	r0, r4
 80013ae:	4338      	orrs	r0, r7
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d1d1      	bne.n	8001358 <__aeabi_dadd+0x3e0>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d15b      	bne.n	8001470 <__aeabi_dadd+0x4f8>
 80013b8:	001c      	movs	r4, r3
 80013ba:	4314      	orrs	r4, r2
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dadd+0x448>
 80013be:	e0a8      	b.n	8001512 <__aeabi_dadd+0x59a>
 80013c0:	001c      	movs	r4, r3
 80013c2:	0017      	movs	r7, r2
 80013c4:	46d8      	mov	r8, fp
 80013c6:	e65b      	b.n	8001080 <__aeabi_dadd+0x108>
 80013c8:	0006      	movs	r6, r0
 80013ca:	2400      	movs	r4, #0
 80013cc:	2700      	movs	r7, #0
 80013ce:	e697      	b.n	8001100 <__aeabi_dadd+0x188>
 80013d0:	4650      	mov	r0, sl
 80013d2:	000b      	movs	r3, r1
 80013d4:	3820      	subs	r0, #32
 80013d6:	40c3      	lsrs	r3, r0
 80013d8:	4699      	mov	r9, r3
 80013da:	4653      	mov	r3, sl
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x46a>
 80013e0:	e095      	b.n	800150e <__aeabi_dadd+0x596>
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	4650      	mov	r0, sl
 80013e6:	1a1b      	subs	r3, r3, r0
 80013e8:	4099      	lsls	r1, r3
 80013ea:	430a      	orrs	r2, r1
 80013ec:	1e51      	subs	r1, r2, #1
 80013ee:	418a      	sbcs	r2, r1
 80013f0:	464b      	mov	r3, r9
 80013f2:	2100      	movs	r1, #0
 80013f4:	431a      	orrs	r2, r3
 80013f6:	e69f      	b.n	8001138 <__aeabi_dadd+0x1c0>
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	d130      	bne.n	800145e <__aeabi_dadd+0x4e6>
 80013fc:	0026      	movs	r6, r4
 80013fe:	433e      	orrs	r6, r7
 8001400:	d067      	beq.n	80014d2 <__aeabi_dadd+0x55a>
 8001402:	43db      	mvns	r3, r3
 8001404:	469a      	mov	sl, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01c      	beq.n	8001444 <__aeabi_dadd+0x4cc>
 800140a:	4e61      	ldr	r6, [pc, #388]	; (8001590 <__aeabi_dadd+0x618>)
 800140c:	42b0      	cmp	r0, r6
 800140e:	d060      	beq.n	80014d2 <__aeabi_dadd+0x55a>
 8001410:	4653      	mov	r3, sl
 8001412:	2b38      	cmp	r3, #56	; 0x38
 8001414:	dd00      	ble.n	8001418 <__aeabi_dadd+0x4a0>
 8001416:	e096      	b.n	8001546 <__aeabi_dadd+0x5ce>
 8001418:	2b1f      	cmp	r3, #31
 800141a:	dd00      	ble.n	800141e <__aeabi_dadd+0x4a6>
 800141c:	e09f      	b.n	800155e <__aeabi_dadd+0x5e6>
 800141e:	2620      	movs	r6, #32
 8001420:	1af3      	subs	r3, r6, r3
 8001422:	0026      	movs	r6, r4
 8001424:	409e      	lsls	r6, r3
 8001426:	469c      	mov	ip, r3
 8001428:	46b3      	mov	fp, r6
 800142a:	4653      	mov	r3, sl
 800142c:	003e      	movs	r6, r7
 800142e:	40de      	lsrs	r6, r3
 8001430:	0033      	movs	r3, r6
 8001432:	465e      	mov	r6, fp
 8001434:	431e      	orrs	r6, r3
 8001436:	4663      	mov	r3, ip
 8001438:	409f      	lsls	r7, r3
 800143a:	1e7b      	subs	r3, r7, #1
 800143c:	419f      	sbcs	r7, r3
 800143e:	4653      	mov	r3, sl
 8001440:	40dc      	lsrs	r4, r3
 8001442:	4337      	orrs	r7, r6
 8001444:	18bf      	adds	r7, r7, r2
 8001446:	4297      	cmp	r7, r2
 8001448:	4192      	sbcs	r2, r2
 800144a:	1864      	adds	r4, r4, r1
 800144c:	4252      	negs	r2, r2
 800144e:	18a4      	adds	r4, r4, r2
 8001450:	0006      	movs	r6, r0
 8001452:	e678      	b.n	8001146 <__aeabi_dadd+0x1ce>
 8001454:	4327      	orrs	r7, r4
 8001456:	1e7c      	subs	r4, r7, #1
 8001458:	41a7      	sbcs	r7, r4
 800145a:	2400      	movs	r4, #0
 800145c:	e737      	b.n	80012ce <__aeabi_dadd+0x356>
 800145e:	4e4c      	ldr	r6, [pc, #304]	; (8001590 <__aeabi_dadd+0x618>)
 8001460:	42b0      	cmp	r0, r6
 8001462:	d036      	beq.n	80014d2 <__aeabi_dadd+0x55a>
 8001464:	2680      	movs	r6, #128	; 0x80
 8001466:	425b      	negs	r3, r3
 8001468:	0436      	lsls	r6, r6, #16
 800146a:	469a      	mov	sl, r3
 800146c:	4334      	orrs	r4, r6
 800146e:	e7cf      	b.n	8001410 <__aeabi_dadd+0x498>
 8001470:	0018      	movs	r0, r3
 8001472:	4310      	orrs	r0, r2
 8001474:	d100      	bne.n	8001478 <__aeabi_dadd+0x500>
 8001476:	e603      	b.n	8001080 <__aeabi_dadd+0x108>
 8001478:	1ab8      	subs	r0, r7, r2
 800147a:	4684      	mov	ip, r0
 800147c:	4567      	cmp	r7, ip
 800147e:	41ad      	sbcs	r5, r5
 8001480:	1ae0      	subs	r0, r4, r3
 8001482:	426d      	negs	r5, r5
 8001484:	1b40      	subs	r0, r0, r5
 8001486:	0205      	lsls	r5, r0, #8
 8001488:	d400      	bmi.n	800148c <__aeabi_dadd+0x514>
 800148a:	e62c      	b.n	80010e6 <__aeabi_dadd+0x16e>
 800148c:	1bd7      	subs	r7, r2, r7
 800148e:	42ba      	cmp	r2, r7
 8001490:	4192      	sbcs	r2, r2
 8001492:	1b1c      	subs	r4, r3, r4
 8001494:	4252      	negs	r2, r2
 8001496:	1aa4      	subs	r4, r4, r2
 8001498:	46d8      	mov	r8, fp
 800149a:	e5f1      	b.n	8001080 <__aeabi_dadd+0x108>
 800149c:	0018      	movs	r0, r3
 800149e:	4310      	orrs	r0, r2
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dadd+0x52c>
 80014a2:	e763      	b.n	800136c <__aeabi_dadd+0x3f4>
 80014a4:	08f8      	lsrs	r0, r7, #3
 80014a6:	0767      	lsls	r7, r4, #29
 80014a8:	4307      	orrs	r7, r0
 80014aa:	2080      	movs	r0, #128	; 0x80
 80014ac:	08e4      	lsrs	r4, r4, #3
 80014ae:	0300      	lsls	r0, r0, #12
 80014b0:	4204      	tst	r4, r0
 80014b2:	d008      	beq.n	80014c6 <__aeabi_dadd+0x54e>
 80014b4:	08dd      	lsrs	r5, r3, #3
 80014b6:	4205      	tst	r5, r0
 80014b8:	d105      	bne.n	80014c6 <__aeabi_dadd+0x54e>
 80014ba:	08d2      	lsrs	r2, r2, #3
 80014bc:	0759      	lsls	r1, r3, #29
 80014be:	4311      	orrs	r1, r2
 80014c0:	000f      	movs	r7, r1
 80014c2:	002c      	movs	r4, r5
 80014c4:	46d8      	mov	r8, fp
 80014c6:	0f7b      	lsrs	r3, r7, #29
 80014c8:	00e4      	lsls	r4, r4, #3
 80014ca:	431c      	orrs	r4, r3
 80014cc:	00ff      	lsls	r7, r7, #3
 80014ce:	4e30      	ldr	r6, [pc, #192]	; (8001590 <__aeabi_dadd+0x618>)
 80014d0:	e5d6      	b.n	8001080 <__aeabi_dadd+0x108>
 80014d2:	000c      	movs	r4, r1
 80014d4:	0017      	movs	r7, r2
 80014d6:	0006      	movs	r6, r0
 80014d8:	e5d2      	b.n	8001080 <__aeabi_dadd+0x108>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d038      	beq.n	8001550 <__aeabi_dadd+0x5d8>
 80014de:	000b      	movs	r3, r1
 80014e0:	4313      	orrs	r3, r2
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x56e>
 80014e4:	e742      	b.n	800136c <__aeabi_dadd+0x3f4>
 80014e6:	08f8      	lsrs	r0, r7, #3
 80014e8:	0767      	lsls	r7, r4, #29
 80014ea:	4307      	orrs	r7, r0
 80014ec:	2080      	movs	r0, #128	; 0x80
 80014ee:	08e4      	lsrs	r4, r4, #3
 80014f0:	0300      	lsls	r0, r0, #12
 80014f2:	4204      	tst	r4, r0
 80014f4:	d0e7      	beq.n	80014c6 <__aeabi_dadd+0x54e>
 80014f6:	08cb      	lsrs	r3, r1, #3
 80014f8:	4203      	tst	r3, r0
 80014fa:	d1e4      	bne.n	80014c6 <__aeabi_dadd+0x54e>
 80014fc:	08d2      	lsrs	r2, r2, #3
 80014fe:	0749      	lsls	r1, r1, #29
 8001500:	4311      	orrs	r1, r2
 8001502:	000f      	movs	r7, r1
 8001504:	001c      	movs	r4, r3
 8001506:	e7de      	b.n	80014c6 <__aeabi_dadd+0x54e>
 8001508:	2700      	movs	r7, #0
 800150a:	2400      	movs	r4, #0
 800150c:	e5d5      	b.n	80010ba <__aeabi_dadd+0x142>
 800150e:	2100      	movs	r1, #0
 8001510:	e76b      	b.n	80013ea <__aeabi_dadd+0x472>
 8001512:	2500      	movs	r5, #0
 8001514:	2700      	movs	r7, #0
 8001516:	e5f3      	b.n	8001100 <__aeabi_dadd+0x188>
 8001518:	464e      	mov	r6, r9
 800151a:	0025      	movs	r5, r4
 800151c:	3e20      	subs	r6, #32
 800151e:	40f5      	lsrs	r5, r6
 8001520:	464b      	mov	r3, r9
 8001522:	002e      	movs	r6, r5
 8001524:	2b20      	cmp	r3, #32
 8001526:	d02d      	beq.n	8001584 <__aeabi_dadd+0x60c>
 8001528:	2540      	movs	r5, #64	; 0x40
 800152a:	1aed      	subs	r5, r5, r3
 800152c:	40ac      	lsls	r4, r5
 800152e:	4327      	orrs	r7, r4
 8001530:	1e7c      	subs	r4, r7, #1
 8001532:	41a7      	sbcs	r7, r4
 8001534:	2400      	movs	r4, #0
 8001536:	4337      	orrs	r7, r6
 8001538:	e6c9      	b.n	80012ce <__aeabi_dadd+0x356>
 800153a:	2480      	movs	r4, #128	; 0x80
 800153c:	2500      	movs	r5, #0
 800153e:	0324      	lsls	r4, r4, #12
 8001540:	4e13      	ldr	r6, [pc, #76]	; (8001590 <__aeabi_dadd+0x618>)
 8001542:	2700      	movs	r7, #0
 8001544:	e5dc      	b.n	8001100 <__aeabi_dadd+0x188>
 8001546:	4327      	orrs	r7, r4
 8001548:	1e7c      	subs	r4, r7, #1
 800154a:	41a7      	sbcs	r7, r4
 800154c:	2400      	movs	r4, #0
 800154e:	e779      	b.n	8001444 <__aeabi_dadd+0x4cc>
 8001550:	000c      	movs	r4, r1
 8001552:	0017      	movs	r7, r2
 8001554:	4e0e      	ldr	r6, [pc, #56]	; (8001590 <__aeabi_dadd+0x618>)
 8001556:	e593      	b.n	8001080 <__aeabi_dadd+0x108>
 8001558:	000c      	movs	r4, r1
 800155a:	0017      	movs	r7, r2
 800155c:	e590      	b.n	8001080 <__aeabi_dadd+0x108>
 800155e:	4656      	mov	r6, sl
 8001560:	0023      	movs	r3, r4
 8001562:	3e20      	subs	r6, #32
 8001564:	40f3      	lsrs	r3, r6
 8001566:	4699      	mov	r9, r3
 8001568:	4653      	mov	r3, sl
 800156a:	2b20      	cmp	r3, #32
 800156c:	d00e      	beq.n	800158c <__aeabi_dadd+0x614>
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	4656      	mov	r6, sl
 8001572:	1b9b      	subs	r3, r3, r6
 8001574:	409c      	lsls	r4, r3
 8001576:	4327      	orrs	r7, r4
 8001578:	1e7c      	subs	r4, r7, #1
 800157a:	41a7      	sbcs	r7, r4
 800157c:	464b      	mov	r3, r9
 800157e:	2400      	movs	r4, #0
 8001580:	431f      	orrs	r7, r3
 8001582:	e75f      	b.n	8001444 <__aeabi_dadd+0x4cc>
 8001584:	2400      	movs	r4, #0
 8001586:	e7d2      	b.n	800152e <__aeabi_dadd+0x5b6>
 8001588:	0017      	movs	r7, r2
 800158a:	e5b2      	b.n	80010f2 <__aeabi_dadd+0x17a>
 800158c:	2400      	movs	r4, #0
 800158e:	e7f2      	b.n	8001576 <__aeabi_dadd+0x5fe>
 8001590:	000007ff 	.word	0x000007ff
 8001594:	ff7fffff 	.word	0xff7fffff

08001598 <__aeabi_i2d>:
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	2800      	cmp	r0, #0
 800159c:	d030      	beq.n	8001600 <__aeabi_i2d+0x68>
 800159e:	17c3      	asrs	r3, r0, #31
 80015a0:	18c4      	adds	r4, r0, r3
 80015a2:	405c      	eors	r4, r3
 80015a4:	0fc5      	lsrs	r5, r0, #31
 80015a6:	0020      	movs	r0, r4
 80015a8:	f000 f8c2 	bl	8001730 <__clzsi2>
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <__aeabi_i2d+0x74>)
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <__aeabi_i2d+0x78>)
 80015b0:	1a1b      	subs	r3, r3, r0
 80015b2:	1ad2      	subs	r2, r2, r3
 80015b4:	2a1f      	cmp	r2, #31
 80015b6:	dd18      	ble.n	80015ea <__aeabi_i2d+0x52>
 80015b8:	4a16      	ldr	r2, [pc, #88]	; (8001614 <__aeabi_i2d+0x7c>)
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	4094      	lsls	r4, r2
 80015be:	2200      	movs	r2, #0
 80015c0:	0324      	lsls	r4, r4, #12
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	0b24      	lsrs	r4, r4, #12
 80015c6:	0d5b      	lsrs	r3, r3, #21
 80015c8:	2100      	movs	r1, #0
 80015ca:	0010      	movs	r0, r2
 80015cc:	0324      	lsls	r4, r4, #12
 80015ce:	0d0a      	lsrs	r2, r1, #20
 80015d0:	0b24      	lsrs	r4, r4, #12
 80015d2:	0512      	lsls	r2, r2, #20
 80015d4:	4322      	orrs	r2, r4
 80015d6:	4c10      	ldr	r4, [pc, #64]	; (8001618 <__aeabi_i2d+0x80>)
 80015d8:	051b      	lsls	r3, r3, #20
 80015da:	4022      	ands	r2, r4
 80015dc:	4313      	orrs	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	07ed      	lsls	r5, r5, #31
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	432b      	orrs	r3, r5
 80015e6:	0019      	movs	r1, r3
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
 80015ea:	0021      	movs	r1, r4
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	210b      	movs	r1, #11
 80015f2:	1a08      	subs	r0, r1, r0
 80015f4:	40c4      	lsrs	r4, r0
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	0324      	lsls	r4, r4, #12
 80015fa:	0b24      	lsrs	r4, r4, #12
 80015fc:	0d5b      	lsrs	r3, r3, #21
 80015fe:	e7e3      	b.n	80015c8 <__aeabi_i2d+0x30>
 8001600:	2500      	movs	r5, #0
 8001602:	2300      	movs	r3, #0
 8001604:	2400      	movs	r4, #0
 8001606:	2200      	movs	r2, #0
 8001608:	e7de      	b.n	80015c8 <__aeabi_i2d+0x30>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	0000041e 	.word	0x0000041e
 8001610:	00000433 	.word	0x00000433
 8001614:	00000413 	.word	0x00000413
 8001618:	800fffff 	.word	0x800fffff

0800161c <__aeabi_d2f>:
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	004c      	lsls	r4, r1, #1
 8001620:	0d64      	lsrs	r4, r4, #21
 8001622:	030b      	lsls	r3, r1, #12
 8001624:	1c62      	adds	r2, r4, #1
 8001626:	0f45      	lsrs	r5, r0, #29
 8001628:	0a5b      	lsrs	r3, r3, #9
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	432b      	orrs	r3, r5
 800162e:	0fc9      	lsrs	r1, r1, #31
 8001630:	00c5      	lsls	r5, r0, #3
 8001632:	0d52      	lsrs	r2, r2, #21
 8001634:	2a01      	cmp	r2, #1
 8001636:	dd28      	ble.n	800168a <__aeabi_d2f+0x6e>
 8001638:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <__aeabi_d2f+0x108>)
 800163a:	18a6      	adds	r6, r4, r2
 800163c:	2efe      	cmp	r6, #254	; 0xfe
 800163e:	dc1b      	bgt.n	8001678 <__aeabi_d2f+0x5c>
 8001640:	2e00      	cmp	r6, #0
 8001642:	dd3e      	ble.n	80016c2 <__aeabi_d2f+0xa6>
 8001644:	0180      	lsls	r0, r0, #6
 8001646:	0002      	movs	r2, r0
 8001648:	1e50      	subs	r0, r2, #1
 800164a:	4182      	sbcs	r2, r0
 800164c:	0f6d      	lsrs	r5, r5, #29
 800164e:	432a      	orrs	r2, r5
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4313      	orrs	r3, r2
 8001654:	075a      	lsls	r2, r3, #29
 8001656:	d004      	beq.n	8001662 <__aeabi_d2f+0x46>
 8001658:	220f      	movs	r2, #15
 800165a:	401a      	ands	r2, r3
 800165c:	2a04      	cmp	r2, #4
 800165e:	d000      	beq.n	8001662 <__aeabi_d2f+0x46>
 8001660:	3304      	adds	r3, #4
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	04d2      	lsls	r2, r2, #19
 8001666:	401a      	ands	r2, r3
 8001668:	d05a      	beq.n	8001720 <__aeabi_d2f+0x104>
 800166a:	3601      	adds	r6, #1
 800166c:	2eff      	cmp	r6, #255	; 0xff
 800166e:	d003      	beq.n	8001678 <__aeabi_d2f+0x5c>
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	0a5b      	lsrs	r3, r3, #9
 8001674:	b2f4      	uxtb	r4, r6
 8001676:	e001      	b.n	800167c <__aeabi_d2f+0x60>
 8001678:	24ff      	movs	r4, #255	; 0xff
 800167a:	2300      	movs	r3, #0
 800167c:	0258      	lsls	r0, r3, #9
 800167e:	05e4      	lsls	r4, r4, #23
 8001680:	0a40      	lsrs	r0, r0, #9
 8001682:	07c9      	lsls	r1, r1, #31
 8001684:	4320      	orrs	r0, r4
 8001686:	4308      	orrs	r0, r1
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	2c00      	cmp	r4, #0
 800168c:	d007      	beq.n	800169e <__aeabi_d2f+0x82>
 800168e:	431d      	orrs	r5, r3
 8001690:	d0f2      	beq.n	8001678 <__aeabi_d2f+0x5c>
 8001692:	2080      	movs	r0, #128	; 0x80
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	0480      	lsls	r0, r0, #18
 8001698:	4303      	orrs	r3, r0
 800169a:	26ff      	movs	r6, #255	; 0xff
 800169c:	e7da      	b.n	8001654 <__aeabi_d2f+0x38>
 800169e:	432b      	orrs	r3, r5
 80016a0:	d003      	beq.n	80016aa <__aeabi_d2f+0x8e>
 80016a2:	2305      	movs	r3, #5
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	2cff      	cmp	r4, #255	; 0xff
 80016a8:	d003      	beq.n	80016b2 <__aeabi_d2f+0x96>
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	0a5b      	lsrs	r3, r3, #9
 80016ae:	b2e4      	uxtb	r4, r4
 80016b0:	e7e4      	b.n	800167c <__aeabi_d2f+0x60>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d032      	beq.n	800171c <__aeabi_d2f+0x100>
 80016b6:	2080      	movs	r0, #128	; 0x80
 80016b8:	03c0      	lsls	r0, r0, #15
 80016ba:	4303      	orrs	r3, r0
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	0a5b      	lsrs	r3, r3, #9
 80016c0:	e7dc      	b.n	800167c <__aeabi_d2f+0x60>
 80016c2:	0032      	movs	r2, r6
 80016c4:	3217      	adds	r2, #23
 80016c6:	db14      	blt.n	80016f2 <__aeabi_d2f+0xd6>
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	271e      	movs	r7, #30
 80016cc:	0412      	lsls	r2, r2, #16
 80016ce:	4313      	orrs	r3, r2
 80016d0:	1bbf      	subs	r7, r7, r6
 80016d2:	2f1f      	cmp	r7, #31
 80016d4:	dc0f      	bgt.n	80016f6 <__aeabi_d2f+0xda>
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <__aeabi_d2f+0x10c>)
 80016d8:	4694      	mov	ip, r2
 80016da:	4464      	add	r4, ip
 80016dc:	002a      	movs	r2, r5
 80016de:	40a5      	lsls	r5, r4
 80016e0:	002e      	movs	r6, r5
 80016e2:	40a3      	lsls	r3, r4
 80016e4:	1e75      	subs	r5, r6, #1
 80016e6:	41ae      	sbcs	r6, r5
 80016e8:	40fa      	lsrs	r2, r7
 80016ea:	4333      	orrs	r3, r6
 80016ec:	4313      	orrs	r3, r2
 80016ee:	2600      	movs	r6, #0
 80016f0:	e7b0      	b.n	8001654 <__aeabi_d2f+0x38>
 80016f2:	2400      	movs	r4, #0
 80016f4:	e7d5      	b.n	80016a2 <__aeabi_d2f+0x86>
 80016f6:	2202      	movs	r2, #2
 80016f8:	4252      	negs	r2, r2
 80016fa:	1b96      	subs	r6, r2, r6
 80016fc:	001a      	movs	r2, r3
 80016fe:	40f2      	lsrs	r2, r6
 8001700:	2f20      	cmp	r7, #32
 8001702:	d009      	beq.n	8001718 <__aeabi_d2f+0xfc>
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <__aeabi_d2f+0x110>)
 8001706:	4684      	mov	ip, r0
 8001708:	4464      	add	r4, ip
 800170a:	40a3      	lsls	r3, r4
 800170c:	432b      	orrs	r3, r5
 800170e:	1e5d      	subs	r5, r3, #1
 8001710:	41ab      	sbcs	r3, r5
 8001712:	2600      	movs	r6, #0
 8001714:	4313      	orrs	r3, r2
 8001716:	e79d      	b.n	8001654 <__aeabi_d2f+0x38>
 8001718:	2300      	movs	r3, #0
 800171a:	e7f7      	b.n	800170c <__aeabi_d2f+0xf0>
 800171c:	2300      	movs	r3, #0
 800171e:	e7ad      	b.n	800167c <__aeabi_d2f+0x60>
 8001720:	0034      	movs	r4, r6
 8001722:	e7bf      	b.n	80016a4 <__aeabi_d2f+0x88>
 8001724:	fffffc80 	.word	0xfffffc80
 8001728:	fffffc82 	.word	0xfffffc82
 800172c:	fffffca2 	.word	0xfffffca2

08001730 <__clzsi2>:
 8001730:	211c      	movs	r1, #28
 8001732:	2301      	movs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	4298      	cmp	r0, r3
 8001738:	d301      	bcc.n	800173e <__clzsi2+0xe>
 800173a:	0c00      	lsrs	r0, r0, #16
 800173c:	3910      	subs	r1, #16
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	4298      	cmp	r0, r3
 8001742:	d301      	bcc.n	8001748 <__clzsi2+0x18>
 8001744:	0a00      	lsrs	r0, r0, #8
 8001746:	3908      	subs	r1, #8
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	4298      	cmp	r0, r3
 800174c:	d301      	bcc.n	8001752 <__clzsi2+0x22>
 800174e:	0900      	lsrs	r0, r0, #4
 8001750:	3904      	subs	r1, #4
 8001752:	a202      	add	r2, pc, #8	; (adr r2, 800175c <__clzsi2+0x2c>)
 8001754:	5c10      	ldrb	r0, [r2, r0]
 8001756:	1840      	adds	r0, r0, r1
 8001758:	4770      	bx	lr
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	02020304 	.word	0x02020304
 8001760:	01010101 	.word	0x01010101
	...

0800176c <APP_TestApplication>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void APP_TestApplication()
{
 800176c:	e7fe      	b.n	800176c <APP_TestApplication>

0800176e <APP_Init>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void APP_Init(void)
{
 800176e:	b510      	push	{r4, lr}
	BSP_LEDStart();
 8001770:	f000 f8b6 	bl	80018e0 <BSP_LEDStart>
	//BSP_UARTStart();
	//BSP_ADCStart();
	BSP_InitUART();
 8001774:	f000 f804 	bl	8001780 <BSP_InitUART>
	BSP_PWMStart();
 8001778:	f000 f8be 	bl	80018f8 <BSP_PWMStart>
}
 800177c:	bd10      	pop	{r4, pc}
	...

08001780 <BSP_InitUART>:

// Global function definitions -----------------------------------------------------------------------------------------

void BSP_InitUART()
{
	CharCount = 0;
 8001780:	2200      	movs	r2, #0
{
 8001782:	b510      	push	{r4, lr}
	CharCount = 0;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <BSP_InitUART+0x14>)
	HAL_UART_Receive_IT(MAIN_BOARD_UART, &ReceiveBufferUART[CharCount], 1);
 8001786:	4904      	ldr	r1, [pc, #16]	; (8001798 <BSP_InitUART+0x18>)
	CharCount = 0;
 8001788:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(MAIN_BOARD_UART, &ReceiveBufferUART[CharCount], 1);
 800178a:	4804      	ldr	r0, [pc, #16]	; (800179c <BSP_InitUART+0x1c>)
 800178c:	3201      	adds	r2, #1
 800178e:	f001 fb37 	bl	8002e00 <HAL_UART_Receive_IT>
}
 8001792:	bd10      	pop	{r4, pc}
 8001794:	20000048 	.word	0x20000048
 8001798:	2000004c 	.word	0x2000004c
 800179c:	2000014c 	.word	0x2000014c

080017a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;
	int valid = 1;

	if (huart == MAIN_BOARD_UART)
 80017a2:	4d1c      	ldr	r5, [pc, #112]	; (8001814 <HAL_UART_RxCpltCallback+0x74>)
 80017a4:	42a8      	cmp	r0, r5
 80017a6:	d133      	bne.n	8001810 <HAL_UART_RxCpltCallback+0x70>
	{
		if (ReceiveBufferUART[CharCount] == '\n')
 80017a8:	4c1b      	ldr	r4, [pc, #108]	; (8001818 <HAL_UART_RxCpltCallback+0x78>)
 80017aa:	4e1c      	ldr	r6, [pc, #112]	; (800181c <HAL_UART_RxCpltCallback+0x7c>)
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	5cf2      	ldrb	r2, [r6, r3]
 80017b0:	2a0a      	cmp	r2, #10
 80017b2:	d125      	bne.n	8001800 <HAL_UART_RxCpltCallback+0x60>
		{

			CharCount = 0;
 80017b4:	2000      	movs	r0, #0
	int i = 0;
 80017b6:	0001      	movs	r1, r0
			CharCount = 0;
 80017b8:	6020      	str	r0, [r4, #0]

			int32_t Converted = 0;
			while(ReceiveBufferUART[i] != '\r' && ReceiveBufferUART[i] != '\n')
 80017ba:	5c73      	ldrb	r3, [r6, r1]
 80017bc:	2b0d      	cmp	r3, #13
 80017be:	d001      	beq.n	80017c4 <HAL_UART_RxCpltCallback+0x24>
 80017c0:	2b0a      	cmp	r3, #10
 80017c2:	d115      	bne.n	80017f0 <HAL_UART_RxCpltCallback+0x50>
				i++;
			}

			if (valid)
			{
				ConvertedDutyCycle = Converted + 0.0;
 80017c4:	f7ff fee8 	bl	8001598 <__aeabi_i2d>
 80017c8:	2200      	movs	r2, #0
 80017ca:	2300      	movs	r3, #0
 80017cc:	f7ff fbd4 	bl	8000f78 <__aeabi_dadd>
 80017d0:	f7ff ff24 	bl	800161c <__aeabi_d2f>
				ConvertedDutyCycle /= 100;
 80017d4:	4912      	ldr	r1, [pc, #72]	; (8001820 <HAL_UART_RxCpltCallback+0x80>)
 80017d6:	f7fe ff03 	bl	80005e0 <__aeabi_fdiv>
 80017da:	4f12      	ldr	r7, [pc, #72]	; (8001824 <HAL_UART_RxCpltCallback+0x84>)
 80017dc:	6038      	str	r0, [r7, #0]

				BSP_SetDutyCycle(&ConvertedDutyCycle);
 80017de:	0038      	movs	r0, r7
 80017e0:	f000 f8fc 	bl	80019dc <BSP_SetDutyCycle>
				HAL_UART_Transmit_IT(MAIN_BOARD_UART, response, 5);
 80017e4:	2205      	movs	r2, #5
 80017e6:	4910      	ldr	r1, [pc, #64]	; (8001828 <HAL_UART_RxCpltCallback+0x88>)
 80017e8:	0028      	movs	r0, r5
 80017ea:	f001 fadb 	bl	8002da4 <HAL_UART_Transmit_IT>
 80017ee:	e009      	b.n	8001804 <HAL_UART_RxCpltCallback+0x64>
				if (ReceiveBufferUART[i] < '0' || ReceiveBufferUART[i] > '9')
 80017f0:	3b30      	subs	r3, #48	; 0x30
 80017f2:	b2df      	uxtb	r7, r3
 80017f4:	2f09      	cmp	r7, #9
 80017f6:	d805      	bhi.n	8001804 <HAL_UART_RxCpltCallback+0x64>
				Converted *= 10;
 80017f8:	4350      	muls	r0, r2
				i++;
 80017fa:	3101      	adds	r1, #1
				Converted += ReceiveBufferUART[i] - '0';
 80017fc:	1818      	adds	r0, r3, r0
 80017fe:	e7dc      	b.n	80017ba <HAL_UART_RxCpltCallback+0x1a>
			}
		}
		else
		{
			CharCount++;
 8001800:	3301      	adds	r3, #1
 8001802:	6023      	str	r3, [r4, #0]
		}

		HAL_UART_Receive_IT(MAIN_BOARD_UART, &ReceiveBufferUART[CharCount], 1);
 8001804:	6821      	ldr	r1, [r4, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	1871      	adds	r1, r6, r1
 800180a:	0028      	movs	r0, r5
 800180c:	f001 faf8 	bl	8002e00 <HAL_UART_Receive_IT>
	}
}
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	2000014c 	.word	0x2000014c
 8001818:	20000048 	.word	0x20000048
 800181c:	2000004c 	.word	0x2000004c
 8001820:	42c80000 	.word	0x42c80000
 8001824:	2000002c 	.word	0x2000002c
 8001828:	20000000 	.word	0x20000000

0800182c <BSP_SetLEDBurstOFF5V>:

// Local (static) function definitions ---------------------------------------------------------------------------------

void BSP_SetLEDBurstOFF5V(void)
{
	 HAL_GPIO_WritePin(BurstOFF5V_GPIO_Port, BurstOFF5V_Pin, GPIO_PIN_SET);
 800182c:	2090      	movs	r0, #144	; 0x90
{
 800182e:	b510      	push	{r4, lr}
	 HAL_GPIO_WritePin(BurstOFF5V_GPIO_Port, BurstOFF5V_Pin, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	05c0      	lsls	r0, r0, #23
 8001836:	f000 fc05 	bl	8002044 <HAL_GPIO_WritePin>
}
 800183a:	bd10      	pop	{r4, pc}

0800183c <BSP_SetLEDBurtsOFF6V>:

void BSP_SetLEDBurtsOFF6V(void)
{
	HAL_GPIO_WritePin(BurstOFF6V_GPIO_Port, BurstOFF6V_Pin, GPIO_PIN_SET);
 800183c:	2090      	movs	r0, #144	; 0x90
{
 800183e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BurstOFF6V_GPIO_Port, BurstOFF6V_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	05c0      	lsls	r0, r0, #23
 8001846:	f000 fbfd 	bl	8002044 <HAL_GPIO_WritePin>
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <BSP_SetLEDHeartbeat>:

void BSP_SetLEDHeartbeat(void)
{
 800184c:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim3);
 800184e:	4c06      	ldr	r4, [pc, #24]	; (8001868 <BSP_SetLEDHeartbeat+0x1c>)
 8001850:	0020      	movs	r0, r4
 8001852:	f001 f803 	bl	800285c <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PERIOD_LED_HEARTBEAT);
 8001856:	2296      	movs	r2, #150	; 0x96
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800185e:	2108      	movs	r1, #8
 8001860:	0020      	movs	r0, r4
 8001862:	f001 f9cb 	bl	8002bfc <HAL_TIM_PWM_Start>
}
 8001866:	bd10      	pop	{r4, pc}
 8001868:	200000cc 	.word	0x200000cc

0800186c <BSP_SetLEDHeartbeatBlinkingDutyCyle>:
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PERIOD_LED_HEARTBEAT/2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
}

void BSP_SetLEDHeartbeatBlinkingDutyCyle(int32_t* CompareValue)
{
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	0005      	movs	r5, r0
	//int32_t CompareValue = 0;

	//CompareValue = (*DutyCyle) * PERIOD_LED_HEARTBEAT;

	HAL_TIM_Base_Start(&htim3);
 8001870:	4c05      	ldr	r4, [pc, #20]	; (8001888 <BSP_SetLEDHeartbeatBlinkingDutyCyle+0x1c>)
 8001872:	0020      	movs	r0, r4
 8001874:	f000 fff2 	bl	800285c <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, CompareValue);
 8001878:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800187a:	2108      	movs	r1, #8
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, CompareValue);
 800187c:	63dd      	str	r5, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800187e:	0020      	movs	r0, r4
 8001880:	f001 f9bc 	bl	8002bfc <HAL_TIM_PWM_Start>
}
 8001884:	bd70      	pop	{r4, r5, r6, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	200000cc 	.word	0x200000cc

0800188c <BSP_SetLEDOrange>:

void BSP_SetLEDOrange(void)
{
 800188c:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim3);
 800188e:	4c06      	ldr	r4, [pc, #24]	; (80018a8 <BSP_SetLEDOrange+0x1c>)
 8001890:	0020      	movs	r0, r4
 8001892:	f000 ffe3 	bl	800285c <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PERIOD_LED_HEARTBEAT);
 8001896:	2296      	movs	r2, #150	; 0x96
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800189e:	210c      	movs	r1, #12
 80018a0:	0020      	movs	r0, r4
 80018a2:	f001 f9ab 	bl	8002bfc <HAL_TIM_PWM_Start>
}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	200000cc 	.word	0x200000cc

080018ac <BSP_SetLEDOrangeBlinkingDutyCyle>:
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PERIOD_LED_HEARTBEAT/2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
}

void BSP_SetLEDOrangeBlinkingDutyCyle(int32_t* CompareValue)
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	0005      	movs	r5, r0
	//int32_t CompareValue = 0;

	//CompareValue = (*DutyCyle) * PERIOD_LED_HEARTBEAT;

	HAL_TIM_Base_Start(&htim3);
 80018b0:	4c05      	ldr	r4, [pc, #20]	; (80018c8 <BSP_SetLEDOrangeBlinkingDutyCyle+0x1c>)
 80018b2:	0020      	movs	r0, r4
 80018b4:	f000 ffd2 	bl	800285c <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, CompareValue);
 80018b8:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80018ba:	210c      	movs	r1, #12
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, CompareValue);
 80018bc:	641d      	str	r5, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80018be:	0020      	movs	r0, r4
 80018c0:	f001 f99c 	bl	8002bfc <HAL_TIM_PWM_Start>
}
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	200000cc 	.word	0x200000cc

080018cc <BSP_SetLEDFault>:

void BSP_SetLEDFault(void)
{
 80018cc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	4802      	ldr	r0, [pc, #8]	; (80018dc <BSP_SetLEDFault+0x10>)
 80018d4:	f000 fbb6 	bl	8002044 <HAL_GPIO_WritePin>
}
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	48000400 	.word	0x48000400

080018e0 <BSP_LEDStart>:
{
	HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
}

void BSP_LEDStart(void)
{
 80018e0:	b510      	push	{r4, lr}
	BSP_SetLEDBurstOFF5V();
 80018e2:	f7ff ffa3 	bl	800182c <BSP_SetLEDBurstOFF5V>
	BSP_SetLEDBurtsOFF6V();
 80018e6:	f7ff ffa9 	bl	800183c <BSP_SetLEDBurtsOFF6V>
	BSP_SetLEDHeartbeat();
 80018ea:	f7ff ffaf 	bl	800184c <BSP_SetLEDHeartbeat>
	BSP_SetLEDOrange();
 80018ee:	f7ff ffcd 	bl	800188c <BSP_SetLEDOrange>
	BSP_SetLEDFault();
 80018f2:	f7ff ffeb 	bl	80018cc <BSP_SetLEDFault>
}
 80018f6:	bd10      	pop	{r4, pc}

080018f8 <BSP_PWMStart>:
// Local (static) function prototypes ----------------------------------------------------------------------------------

// Global function definitions -----------------------------------------------------------------------------------------

void BSP_PWMStart()
{
 80018f8:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim1);
 80018fa:	4c06      	ldr	r4, [pc, #24]	; (8001914 <BSP_PWMStart+0x1c>)
 80018fc:	0020      	movs	r0, r4
 80018fe:	f000 ffad 	bl	800285c <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PERIOD+1);	//to prevent any impulse on the output by starting
 8001902:	22f6      	movs	r2, #246	; 0xf6
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	32ff      	adds	r2, #255	; 0xff
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PERIOD+1);	//to prevent any impulse on the output by starting
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PERIOD+1);	//to prevent any impulse on the output by starting
 800190c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PERIOD+1);	//to prevent any impulse on the output by starting
 800190e:	641a      	str	r2, [r3, #64]	; 0x40

	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
}
 8001910:	bd10      	pop	{r4, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	2000010c 	.word	0x2000010c

08001918 <BSP_CreateCompareValue>:
	*DutyCycleHalfBridge1 = (DutyCycle + 1) / 2;
	*DutyCycleHalfBridge2 = 1 - *DutyCycleHalfBridge1;
}

void BSP_CreateCompareValue(float* DutyCycleHalfBridge, int32_t* CompareValueHigh, int32_t* CompareValueLow)
{
 8001918:	b570      	push	{r4, r5, r6, lr}
	float dutyCycle = *DutyCycleHalfBridge;
 800191a:	6804      	ldr	r4, [r0, #0]
{
 800191c:	000e      	movs	r6, r1

	if (dutyCycle > DUTY_CYCLE_HALF_BRIDGE_MAX)
 800191e:	1c20      	adds	r0, r4, #0
 8001920:	4910      	ldr	r1, [pc, #64]	; (8001964 <BSP_CreateCompareValue+0x4c>)
{
 8001922:	0015      	movs	r5, r2
	if (dutyCycle > DUTY_CYCLE_HALF_BRIDGE_MAX)
 8001924:	f7fe fcb6 	bl	8000294 <__aeabi_fcmpgt>
 8001928:	2800      	cmp	r0, #0
 800192a:	d119      	bne.n	8001960 <BSP_CreateCompareValue+0x48>
	{
		dutyCycle = DUTY_CYCLE_HALF_BRIDGE_MAX;
	}

	if (dutyCycle < DUTY_CYCLE_HALF_BRIDGE_MIN)
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <BSP_CreateCompareValue+0x50>)
 800192e:	1c20      	adds	r0, r4, #0
 8001930:	f7fe fc9c 	bl	800026c <__aeabi_fcmplt>
 8001934:	2800      	cmp	r0, #0
 8001936:	d000      	beq.n	800193a <BSP_CreateCompareValue+0x22>
	{
		dutyCycle = DUTY_CYCLE_HALF_BRIDGE_MIN;
 8001938:	4c0b      	ldr	r4, [pc, #44]	; (8001968 <BSP_CreateCompareValue+0x50>)
	}

	*CompareValueHigh	= dutyCycle * PERIOD + DEADTIME_HIGH;
 800193a:	490c      	ldr	r1, [pc, #48]	; (800196c <BSP_CreateCompareValue+0x54>)
 800193c:	1c20      	adds	r0, r4, #0
 800193e:	f7ff f83f 	bl	80009c0 <__aeabi_fmul>
 8001942:	490b      	ldr	r1, [pc, #44]	; (8001970 <BSP_CreateCompareValue+0x58>)
 8001944:	1c04      	adds	r4, r0, #0
 8001946:	f7ff f95b 	bl	8000c00 <__aeabi_fsub>
 800194a:	f7ff faf5 	bl	8000f38 <__aeabi_f2iz>
	*CompareValueLow	= dutyCycle	* PERIOD - DEADTIME_LOW;
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <BSP_CreateCompareValue+0x58>)
	*CompareValueHigh	= dutyCycle * PERIOD + DEADTIME_HIGH;
 8001950:	6030      	str	r0, [r6, #0]
	*CompareValueLow	= dutyCycle	* PERIOD - DEADTIME_LOW;
 8001952:	1c20      	adds	r0, r4, #0
 8001954:	f7fe fcb2 	bl	80002bc <__aeabi_fadd>
 8001958:	f7ff faee 	bl	8000f38 <__aeabi_f2iz>
 800195c:	6028      	str	r0, [r5, #0]
}
 800195e:	bd70      	pop	{r4, r5, r6, pc}
		dutyCycle = DUTY_CYCLE_HALF_BRIDGE_MAX;
 8001960:	4c00      	ldr	r4, [pc, #0]	; (8001964 <BSP_CreateCompareValue+0x4c>)
 8001962:	e7ea      	b.n	800193a <BSP_CreateCompareValue+0x22>
 8001964:	3f59999a 	.word	0x3f59999a
 8001968:	3e199998 	.word	0x3e199998
 800196c:	43fa0000 	.word	0x43fa0000
 8001970:	41200000 	.word	0x41200000

08001974 <BSP_PWMSetCompareRegisters>:
								int32_t* CompareValueHigh2,		//Transistor 3	(because PCB)
								int32_t* CompareValueLow2,		//Transistor 4	(because PCB)
								int32_t* CompareValueHigh1,		//Transistor 1	(because PCB)
								int32_t* CompareValueLow1		//Transistor 2	(because PCB)
							)
{
 8001974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001976:	0007      	movs	r7, r0
 8001978:	000e      	movs	r6, r1
 800197a:	0015      	movs	r5, r2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800197c:	4c16      	ldr	r4, [pc, #88]	; (80019d8 <BSP_PWMSetCompareRegisters+0x64>)
 800197e:	2100      	movs	r1, #0
 8001980:	0020      	movs	r0, r4
{
 8001982:	9301      	str	r3, [sp, #4]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001984:	f001 f960 	bl	8002c48 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001988:	2104      	movs	r1, #4
 800198a:	0020      	movs	r0, r4
 800198c:	f001 f95c 	bl	8002c48 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001990:	2108      	movs	r1, #8
 8001992:	0020      	movs	r0, r4
 8001994:	f001 f958 	bl	8002c48 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8001998:	210c      	movs	r1, #12
 800199a:	0020      	movs	r0, r4
 800199c:	f001 f954 	bl	8002c48 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, *CompareValueHigh2);		//Transistor 3
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	683a      	ldr	r2, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, *CompareValueLow2);		//Transistor 4
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, *CompareValueHigh1);		//Transistor 1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, *CompareValueLow1);		//Transistor 2

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019a4:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, *CompareValueHigh2);		//Transistor 3
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, *CompareValueLow2);		//Transistor 4
 80019a8:	6832      	ldr	r2, [r6, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019aa:	0020      	movs	r0, r4
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, *CompareValueLow2);		//Transistor 4
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, *CompareValueHigh1);		//Transistor 1
 80019ae:	682a      	ldr	r2, [r5, #0]
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, *CompareValueLow1);		//Transistor 2
 80019b2:	9a01      	ldr	r2, [sp, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019b8:	f001 f920 	bl	8002bfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019bc:	2104      	movs	r1, #4
 80019be:	0020      	movs	r0, r4
 80019c0:	f001 f91c 	bl	8002bfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019c4:	2108      	movs	r1, #8
 80019c6:	0020      	movs	r0, r4
 80019c8:	f001 f918 	bl	8002bfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019cc:	210c      	movs	r1, #12
 80019ce:	0020      	movs	r0, r4
 80019d0:	f001 f914 	bl	8002bfc <HAL_TIM_PWM_Start>
}
 80019d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	2000010c 	.word	0x2000010c

080019dc <BSP_SetDutyCycle>:
	*DutyCycleHalfBridge1 = (DutyCycle + 1) / 2;
 80019dc:	21fe      	movs	r1, #254	; 0xfe

void BSP_SetDutyCycle(float* DutyCycle)
{
 80019de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*DutyCycleHalfBridge1 = (DutyCycle + 1) / 2;
 80019e0:	6800      	ldr	r0, [r0, #0]
 80019e2:	0589      	lsls	r1, r1, #22
 80019e4:	f7fe fc6a 	bl	80002bc <__aeabi_fadd>
 80019e8:	21fc      	movs	r1, #252	; 0xfc
 80019ea:	0589      	lsls	r1, r1, #22
 80019ec:	f7fe ffe8 	bl	80009c0 <__aeabi_fmul>
 80019f0:	4e11      	ldr	r6, [pc, #68]	; (8001a38 <BSP_SetDutyCycle+0x5c>)
 80019f2:	1c01      	adds	r1, r0, #0
 80019f4:	6030      	str	r0, [r6, #0]
	*DutyCycleHalfBridge2 = 1 - *DutyCycleHalfBridge1;
 80019f6:	20fe      	movs	r0, #254	; 0xfe
 80019f8:	0580      	lsls	r0, r0, #22
 80019fa:	f7ff f901 	bl	8000c00 <__aeabi_fsub>
 80019fe:	4f0f      	ldr	r7, [pc, #60]	; (8001a3c <BSP_SetDutyCycle+0x60>)
	BSP_CreateDutyCycle(*DutyCycle, &DutyCycleHalfBridge1, &DutyCycleHalfBridge2);
	BSP_CreateCompareValue(&DutyCycleHalfBridge1, &CompareValueHigh1, &CompareValueLow1);
 8001a00:	4d0f      	ldr	r5, [pc, #60]	; (8001a40 <BSP_SetDutyCycle+0x64>)
 8001a02:	4c10      	ldr	r4, [pc, #64]	; (8001a44 <BSP_SetDutyCycle+0x68>)
	*DutyCycleHalfBridge2 = 1 - *DutyCycleHalfBridge1;
 8001a04:	6038      	str	r0, [r7, #0]
	BSP_CreateCompareValue(&DutyCycleHalfBridge1, &CompareValueHigh1, &CompareValueLow1);
 8001a06:	0029      	movs	r1, r5
 8001a08:	0022      	movs	r2, r4
 8001a0a:	0030      	movs	r0, r6
 8001a0c:	f7ff ff84 	bl	8001918 <BSP_CreateCompareValue>
	BSP_CreateCompareValue(&DutyCycleHalfBridge2, &CompareValueHigh2, &CompareValueLow2);
 8001a10:	4e0d      	ldr	r6, [pc, #52]	; (8001a48 <BSP_SetDutyCycle+0x6c>)
 8001a12:	0038      	movs	r0, r7
 8001a14:	0032      	movs	r2, r6
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <BSP_SetDutyCycle+0x70>)
 8001a18:	f7ff ff7e 	bl	8001918 <BSP_CreateCompareValue>
	BSP_PWMSetCompareRegisters	(
 8001a1c:	002a      	movs	r2, r5
 8001a1e:	0031      	movs	r1, r6
 8001a20:	0023      	movs	r3, r4
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <BSP_SetDutyCycle+0x70>)
 8001a24:	f7ff ffa6 	bl	8001974 <BSP_PWMSetCompareRegisters>
								&CompareValueHigh2,
								&CompareValueLow2,
								&CompareValueHigh1,
								&CompareValueLow1
						);
	BSP_SetLEDHeartbeatBlinkingDutyCyle(&CompareValueHigh1);
 8001a28:	0028      	movs	r0, r5
 8001a2a:	f7ff ff1f 	bl	800186c <BSP_SetLEDHeartbeatBlinkingDutyCyle>
	BSP_SetLEDOrangeBlinkingDutyCyle(&CompareValueLow1);
 8001a2e:	0020      	movs	r0, r4
 8001a30:	f7ff ff3c 	bl	80018ac <BSP_SetLEDOrangeBlinkingDutyCyle>
}
 8001a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	2000006c 	.word	0x2000006c
 8001a3c:	20000078 	.word	0x20000078
 8001a40:	20000070 	.word	0x20000070
 8001a44:	20000068 	.word	0x20000068
 8001a48:	20000074 	.word	0x20000074
 8001a4c:	20000064 	.word	0x20000064

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001a54:	f000 fda6 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 8001a58:	21fa      	movs	r1, #250	; 0xfa
 8001a5a:	0089      	lsls	r1, r1, #2
 8001a5c:	f7fe fb68 	bl	8000130 <__udivsi3>
 8001a60:	f000 f9f0 	bl	8001e44 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001a64:	2001      	movs	r0, #1
 8001a66:	2200      	movs	r2, #0
 8001a68:	0021      	movs	r1, r4
 8001a6a:	4240      	negs	r0, r0
 8001a6c:	f000 f9b0 	bl	8001dd0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001a70:	2000      	movs	r0, #0
 8001a72:	bd10      	pop	{r4, pc}

08001a74 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	2310      	movs	r3, #16
 8001a76:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_Init+0x1c>)
{
 8001a78:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	f7ff ffe5 	bl	8001a50 <HAL_InitTick>
  HAL_MspInit();
 8001a86:	f001 fdb9 	bl	80035fc <HAL_MspInit>
}
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001a94:	4a02      	ldr	r2, [pc, #8]	; (8001aa0 <HAL_IncTick+0xc>)
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	4770      	bx	lr
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	2000007c 	.word	0x2000007c

08001aa4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001aa4:	4b01      	ldr	r3, [pc, #4]	; (8001aac <HAL_GetTick+0x8>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
}
 8001aa8:	4770      	bx	lr
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	2000007c 	.word	0x2000007c

08001ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d072      	beq.n	8001ba0 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac0:	0022      	movs	r2, r4
 8001ac2:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac4:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001ac8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001aca:	f001 fca3 	bl	8003414 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ace:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ad0:	06db      	lsls	r3, r3, #27
 8001ad2:	d500      	bpl.n	8001ad6 <HAL_ADC_Init+0x26>
 8001ad4:	e079      	b.n	8001bca <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	6898      	ldr	r0, [r3, #8]
 8001adc:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001ade:	d000      	beq.n	8001ae2 <HAL_ADC_Init+0x32>
 8001ae0:	e073      	b.n	8001bca <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ae4:	4942      	ldr	r1, [pc, #264]	; (8001bf0 <HAL_ADC_Init+0x140>)
 8001ae6:	4011      	ands	r1, r2
 8001ae8:	2202      	movs	r2, #2
 8001aea:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001aec:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	400a      	ands	r2, r1
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d000      	beq.n	8001afa <HAL_ADC_Init+0x4a>
 8001af8:	e06d      	b.n	8001bd6 <HAL_ADC_Init+0x126>
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	4211      	tst	r1, r2
 8001afe:	d102      	bne.n	8001b06 <HAL_ADC_Init+0x56>
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	0412      	lsls	r2, r2, #16
 8001b04:	d567      	bpl.n	8001bd6 <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	493a      	ldr	r1, [pc, #232]	; (8001bf4 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001b0a:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b10:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001b12:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b14:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001b16:	69e2      	ldr	r2, [r4, #28]
 8001b18:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001b1a:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001b1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b1e:	3a01      	subs	r2, #1
 8001b20:	1e56      	subs	r6, r2, #1
 8001b22:	41b2      	sbcs	r2, r6
 8001b24:	0316      	lsls	r6, r2, #12
 8001b26:	68e2      	ldr	r2, [r4, #12]
 8001b28:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001b2a:	6922      	ldr	r2, [r4, #16]
 8001b2c:	430f      	orrs	r7, r1
 8001b2e:	2a02      	cmp	r2, #2
 8001b30:	d100      	bne.n	8001b34 <HAL_ADC_Init+0x84>
 8001b32:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001b34:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b36:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001b38:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001b3a:	433a      	orrs	r2, r7
 8001b3c:	4332      	orrs	r2, r6
 8001b3e:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	2901      	cmp	r1, #1
 8001b42:	d104      	bne.n	8001b4e <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d12c      	bne.n	8001ba2 <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0249      	lsls	r1, r1, #9
 8001b4c:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b4e:	20c2      	movs	r0, #194	; 0xc2
 8001b50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b52:	30ff      	adds	r0, #255	; 0xff
 8001b54:	4281      	cmp	r1, r0
 8001b56:	d002      	beq.n	8001b5e <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001b5a:	4301      	orrs	r1, r0
 8001b5c:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b5e:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b60:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b62:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b64:	4311      	orrs	r1, r2
 8001b66:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b6a:	4281      	cmp	r1, r0
 8001b6c:	d002      	beq.n	8001b74 <HAL_ADC_Init+0xc4>
 8001b6e:	1e48      	subs	r0, r1, #1
 8001b70:	2806      	cmp	r0, #6
 8001b72:	d807      	bhi.n	8001b84 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b74:	2507      	movs	r5, #7
 8001b76:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b78:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b7a:	43a8      	bics	r0, r5
 8001b7c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b7e:	6958      	ldr	r0, [r3, #20]
 8001b80:	4301      	orrs	r1, r0
 8001b82:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	491c      	ldr	r1, [pc, #112]	; (8001bf8 <HAL_ADC_Init+0x148>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d111      	bne.n	8001bb2 <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b8e:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b90:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001b92:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8001b94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b96:	4393      	bics	r3, r2
 8001b98:	001a      	movs	r2, r3
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba2:	2020      	movs	r0, #32
 8001ba4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001ba6:	4328      	orrs	r0, r5
 8001ba8:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001bac:	4301      	orrs	r1, r0
 8001bae:	64a1      	str	r1, [r4, #72]	; 0x48
 8001bb0:	e7cd      	b.n	8001b4e <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	2212      	movs	r2, #18
 8001bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	4393      	bics	r3, r2
 8001bba:	001a      	movs	r2, r3
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001bc4:	4303      	orrs	r3, r0
 8001bc6:	64a3      	str	r3, [r4, #72]	; 0x48
 8001bc8:	e7ea      	b.n	8001ba0 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bca:	2310      	movs	r3, #16
 8001bcc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001bce:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	6463      	str	r3, [r4, #68]	; 0x44
 8001bd4:	e7e4      	b.n	8001ba0 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bd6:	2118      	movs	r1, #24
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	438a      	bics	r2, r1
 8001bdc:	68a1      	ldr	r1, [r4, #8]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001be2:	6919      	ldr	r1, [r3, #16]
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	0089      	lsls	r1, r1, #2
 8001be8:	0889      	lsrs	r1, r1, #2
 8001bea:	4311      	orrs	r1, r2
 8001bec:	6119      	str	r1, [r3, #16]
 8001bee:	e78a      	b.n	8001b06 <HAL_ADC_Init+0x56>
 8001bf0:	fffffefd 	.word	0xfffffefd
 8001bf4:	fffe0219 	.word	0xfffe0219
 8001bf8:	833fffe7 	.word	0x833fffe7

08001bfc <HAL_ADC_ConvCpltCallback>:
 8001bfc:	4770      	bx	lr

08001bfe <HAL_ADC_LevelOutOfWindowCallback>:
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001c04:	2204      	movs	r2, #4
 8001c06:	6803      	ldr	r3, [r0, #0]
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001c0a:	6819      	ldr	r1, [r3, #0]
{
 8001c0c:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001c0e:	4211      	tst	r1, r2
 8001c10:	d002      	beq.n	8001c18 <HAL_ADC_IRQHandler+0x14>
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	4211      	tst	r1, r2
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001c18:	2208      	movs	r2, #8
 8001c1a:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001c1c:	4211      	tst	r1, r2
 8001c1e:	d028      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	4211      	tst	r1, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c26:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c28:	06d2      	lsls	r2, r2, #27
 8001c2a:	d404      	bmi.n	8001c36 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	430a      	orrs	r2, r1
 8001c34:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c36:	22c0      	movs	r2, #192	; 0xc0
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	4211      	tst	r1, r2
 8001c3e:	d112      	bne.n	8001c66 <HAL_ADC_IRQHandler+0x62>
 8001c40:	6a22      	ldr	r2, [r4, #32]
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d10f      	bne.n	8001c66 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	0712      	lsls	r2, r2, #28
 8001c4a:	d50c      	bpl.n	8001c66 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	0752      	lsls	r2, r2, #29
 8001c50:	d43c      	bmi.n	8001ccc <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c52:	210c      	movs	r1, #12
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	438a      	bics	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c5c:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <HAL_ADC_IRQHandler+0xdc>)
 8001c5e:	401a      	ands	r2, r3
 8001c60:	2301      	movs	r3, #1
 8001c62:	4313      	orrs	r3, r2
 8001c64:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8001c66:	0020      	movs	r0, r4
 8001c68:	f7ff ffc8 	bl	8001bfc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001c72:	2580      	movs	r5, #128	; 0x80
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	422a      	tst	r2, r5
 8001c7a:	d00c      	beq.n	8001c96 <HAL_ADC_IRQHandler+0x92>
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	422b      	tst	r3, r5
 8001c80:	d009      	beq.n	8001c96 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c8c:	0020      	movs	r0, r4
 8001c8e:	f7ff ffb6 	bl	8001bfe <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001c96:	2210      	movs	r2, #16
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d014      	beq.n	8001cca <HAL_ADC_IRQHandler+0xc6>
 8001ca0:	6859      	ldr	r1, [r3, #4]
 8001ca2:	4211      	tst	r1, r2
 8001ca4:	d011      	beq.n	8001cca <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001ca6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ca8:	2a01      	cmp	r2, #1
 8001caa:	d002      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001cac:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001cae:	07d2      	lsls	r2, r2, #31
 8001cb0:	d508      	bpl.n	8001cc4 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8001cb6:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001cc0:	f7ff ff9e 	bl	8001c00 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ccc:	2320      	movs	r3, #32
 8001cce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	64a3      	str	r3, [r4, #72]	; 0x48
 8001cdc:	e7c3      	b.n	8001c66 <HAL_ADC_IRQHandler+0x62>
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	fffffefe 	.word	0xfffffefe

08001ce4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001ce6:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001cea:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001cec:	3440      	adds	r4, #64	; 0x40
 8001cee:	7823      	ldrb	r3, [r4, #0]
{
 8001cf0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d02b      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x6c>
 8001cf8:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cfa:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001cfc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cfe:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8001d00:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d02:	0740      	lsls	r0, r0, #29
 8001d04:	d452      	bmi.n	8001dac <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d06:	482c      	ldr	r0, [pc, #176]	; (8001db8 <HAL_ADC_ConfigChannel+0xd4>)
 8001d08:	684f      	ldr	r7, [r1, #4]
 8001d0a:	680d      	ldr	r5, [r1, #0]
 8001d0c:	4287      	cmp	r7, r0
 8001d0e:	d03b      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0xa4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d10:	40ab      	lsls	r3, r5
 8001d12:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d14:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d16:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d18:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d1a:	4338      	orrs	r0, r7
 8001d1c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d1e:	429e      	cmp	r6, r3
 8001d20:	d00f      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x5e>
 8001d22:	3e01      	subs	r6, #1
 8001d24:	2e06      	cmp	r6, #6
 8001d26:	d90c      	bls.n	8001d42 <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d28:	688b      	ldr	r3, [r1, #8]
 8001d2a:	2107      	movs	r1, #7
 8001d2c:	6950      	ldr	r0, [r2, #20]
 8001d2e:	4008      	ands	r0, r1
 8001d30:	4283      	cmp	r3, r0
 8001d32:	d006      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d34:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d36:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d38:	4388      	bics	r0, r1
 8001d3a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d3c:	6950      	ldr	r0, [r2, #20]
 8001d3e:	4303      	orrs	r3, r0
 8001d40:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d42:	002b      	movs	r3, r5
 8001d44:	3b10      	subs	r3, #16
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d903      	bls.n	8001d52 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4a:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_ADC_ConfigChannel+0xd8>)
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	6819      	ldr	r1, [r3, #0]
 8001d58:	2d10      	cmp	r5, #16
 8001d5a:	d013      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0xa0>
 8001d5c:	03d2      	lsls	r2, r2, #15
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d62:	2d10      	cmp	r5, #16
 8001d64:	d1f1      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_ADC_ConfigChannel+0xdc>)
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_ADC_ConfigChannel+0xe0>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f7fe f9e0 	bl	8000130 <__udivsi3>
 8001d70:	230a      	movs	r3, #10
 8001d72:	4358      	muls	r0, r3
 8001d74:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0e6      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001d7c:	9b01      	ldr	r3, [sp, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	e7f8      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d84:	0412      	lsls	r2, r2, #16
 8001d86:	e7ea      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d88:	40ab      	lsls	r3, r5
 8001d8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d8c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d8e:	002b      	movs	r3, r5
 8001d90:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d92:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d8d8      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_ADC_ConfigChannel+0xd8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2d10      	cmp	r5, #16
 8001d9e:	d003      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0xc4>
 8001da0:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <HAL_ADC_ConfigChannel+0xe4>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e7d0      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x66>
 8001da8:	4908      	ldr	r1, [pc, #32]	; (8001dcc <HAL_ADC_ConfigChannel+0xe8>)
 8001daa:	e7fa      	b.n	8001da2 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dac:	2220      	movs	r2, #32
 8001dae:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001db0:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db2:	430a      	orrs	r2, r1
 8001db4:	646a      	str	r2, [r5, #68]	; 0x44
 8001db6:	e7c9      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x68>
 8001db8:	00001001 	.word	0x00001001
 8001dbc:	40012708 	.word	0x40012708
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	000f4240 	.word	0x000f4240
 8001dc8:	ffbfffff 	.word	0xffbfffff
 8001dcc:	ff7fffff 	.word	0xff7fffff

08001dd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	da14      	bge.n	8001e02 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd8:	230f      	movs	r3, #15
 8001dda:	b2c0      	uxtb	r0, r0
 8001ddc:	4003      	ands	r3, r0
 8001dde:	3b08      	subs	r3, #8
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_NVIC_SetPriority+0x58>)
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	189b      	adds	r3, r3, r2
 8001de8:	2203      	movs	r2, #3
 8001dea:	4010      	ands	r0, r2
 8001dec:	4090      	lsls	r0, r2
 8001dee:	32fc      	adds	r2, #252	; 0xfc
 8001df0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001df2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001df6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df8:	69dc      	ldr	r4, [r3, #28]
 8001dfa:	43ac      	bics	r4, r5
 8001dfc:	4321      	orrs	r1, r4
 8001dfe:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e02:	2503      	movs	r5, #3
 8001e04:	0883      	lsrs	r3, r0, #2
 8001e06:	4028      	ands	r0, r5
 8001e08:	40a8      	lsls	r0, r5
 8001e0a:	35fc      	adds	r5, #252	; 0xfc
 8001e0c:	002e      	movs	r6, r5
 8001e0e:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_NVIC_SetPriority+0x5c>)
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	22c0      	movs	r2, #192	; 0xc0
 8001e16:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e18:	4029      	ands	r1, r5
 8001e1a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	589c      	ldr	r4, [r3, r2]
 8001e20:	43b4      	bics	r4, r6
 8001e22:	4321      	orrs	r1, r4
 8001e24:	5099      	str	r1, [r3, r2]
 8001e26:	e7eb      	b.n	8001e00 <HAL_NVIC_SetPriority+0x30>
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e30:	231f      	movs	r3, #31
 8001e32:	4018      	ands	r0, r3
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	4083      	lsls	r3, r0
 8001e38:	4a01      	ldr	r2, [pc, #4]	; (8001e40 <HAL_NVIC_EnableIRQ+0x10>)
 8001e3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e3c:	4770      	bx	lr
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_SYSTICK_Config+0x28>)
 8001e46:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e48:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d80d      	bhi.n	8001e6a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e4e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e52:	4808      	ldr	r0, [pc, #32]	; (8001e74 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e54:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e56:	6a03      	ldr	r3, [r0, #32]
 8001e58:	0609      	lsls	r1, r1, #24
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e62:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e64:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e66:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e68:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e6a:	4770      	bx	lr
 8001e6c:	00ffffff 	.word	0x00ffffff
 8001e70:	e000e010 	.word	0xe000e010
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e7a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001e7c:	2804      	cmp	r0, #4
 8001e7e:	d102      	bne.n	8001e86 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e80:	4310      	orrs	r0, r2
 8001e82:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001e84:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e86:	2104      	movs	r1, #4
 8001e88:	438a      	bics	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	e7fa      	b.n	8001e84 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001e94:	4770      	bx	lr

08001e96 <HAL_SYSTICK_IRQHandler>:
{
 8001e96:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8001e98:	f7ff fffc 	bl	8001e94 <HAL_SYSTICK_Callback>
}
 8001e9c:	bd10      	pop	{r4, pc}

08001e9e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e9e:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ea0:	1c84      	adds	r4, r0, #2
 8001ea2:	7fe3      	ldrb	r3, [r4, #31]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eac:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eb2:	210e      	movs	r1, #14
 8001eb4:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001eb6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	438a      	bics	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	4391      	bics	r1, r2
 8001ec4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	40a9      	lsls	r1, r5
 8001eca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001ecc:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ece:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8001ed4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001ed6:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d0e7      	beq.n	8001eae <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001ede:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	0023      	movs	r3, r4
 8001ee2:	e7e4      	b.n	8001eae <HAL_DMA_Abort_IT+0x10>

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ee6:	680b      	ldr	r3, [r1, #0]
{ 
 8001ee8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001eea:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8001eec:	2300      	movs	r3, #0
{ 
 8001eee:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ef0:	9a02      	ldr	r2, [sp, #8]
 8001ef2:	40da      	lsrs	r2, r3
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8001ef6:	b007      	add	sp, #28
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001efa:	2201      	movs	r2, #1
 8001efc:	409a      	lsls	r2, r3
 8001efe:	9203      	str	r2, [sp, #12]
 8001f00:	9903      	ldr	r1, [sp, #12]
 8001f02:	9a02      	ldr	r2, [sp, #8]
 8001f04:	400a      	ands	r2, r1
 8001f06:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8001f08:	d100      	bne.n	8001f0c <HAL_GPIO_Init+0x28>
 8001f0a:	e08c      	b.n	8002026 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001f0c:	9a01      	ldr	r2, [sp, #4]
 8001f0e:	2110      	movs	r1, #16
 8001f10:	6852      	ldr	r2, [r2, #4]
 8001f12:	0016      	movs	r6, r2
 8001f14:	438e      	bics	r6, r1
 8001f16:	2e02      	cmp	r6, #2
 8001f18:	d10e      	bne.n	8001f38 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001f1a:	2507      	movs	r5, #7
 8001f1c:	401d      	ands	r5, r3
 8001f1e:	00ad      	lsls	r5, r5, #2
 8001f20:	3901      	subs	r1, #1
 8001f22:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8001f24:	08dc      	lsrs	r4, r3, #3
 8001f26:	00a4      	lsls	r4, r4, #2
 8001f28:	1904      	adds	r4, r0, r4
 8001f2a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001f2c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001f2e:	9901      	ldr	r1, [sp, #4]
 8001f30:	6909      	ldr	r1, [r1, #16]
 8001f32:	40a9      	lsls	r1, r5
 8001f34:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001f36:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001f38:	2403      	movs	r4, #3
 8001f3a:	005f      	lsls	r7, r3, #1
 8001f3c:	40bc      	lsls	r4, r7
 8001f3e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001f40:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f42:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001f44:	4025      	ands	r5, r4
 8001f46:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f48:	2503      	movs	r5, #3
 8001f4a:	4015      	ands	r5, r2
 8001f4c:	40bd      	lsls	r5, r7
 8001f4e:	4661      	mov	r1, ip
 8001f50:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001f52:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f54:	2e01      	cmp	r6, #1
 8001f56:	d80f      	bhi.n	8001f78 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001f58:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8001f5a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001f5c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001f60:	40bd      	lsls	r5, r7
 8001f62:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001f64:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f66:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f68:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f6a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	400d      	ands	r5, r1
 8001f72:	409d      	lsls	r5, r3
 8001f74:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001f76:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f78:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001f7a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001f7e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001f80:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001f82:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001f84:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001f86:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001f88:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001f8a:	420a      	tst	r2, r1
 8001f8c:	d04b      	beq.n	8002026 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4c26      	ldr	r4, [pc, #152]	; (800202c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f92:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f94:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f96:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	430d      	orrs	r5, r1
 8001f9a:	61a5      	str	r5, [r4, #24]
 8001f9c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f9e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	400c      	ands	r4, r1
 8001fa2:	9405      	str	r4, [sp, #20]
 8001fa4:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001fa6:	240f      	movs	r4, #15
 8001fa8:	4921      	ldr	r1, [pc, #132]	; (8002030 <HAL_GPIO_Init+0x14c>)
 8001faa:	00ad      	lsls	r5, r5, #2
 8001fac:	00b6      	lsls	r6, r6, #2
 8001fae:	186d      	adds	r5, r5, r1
 8001fb0:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8001fb4:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb6:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001fb8:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fba:	2400      	movs	r4, #0
 8001fbc:	4288      	cmp	r0, r1
 8001fbe:	d00c      	beq.n	8001fda <HAL_GPIO_Init+0xf6>
 8001fc0:	491c      	ldr	r1, [pc, #112]	; (8002034 <HAL_GPIO_Init+0x150>)
 8001fc2:	3401      	adds	r4, #1
 8001fc4:	4288      	cmp	r0, r1
 8001fc6:	d008      	beq.n	8001fda <HAL_GPIO_Init+0xf6>
 8001fc8:	491b      	ldr	r1, [pc, #108]	; (8002038 <HAL_GPIO_Init+0x154>)
 8001fca:	3401      	adds	r4, #1
 8001fcc:	4288      	cmp	r0, r1
 8001fce:	d004      	beq.n	8001fda <HAL_GPIO_Init+0xf6>
 8001fd0:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_GPIO_Init+0x158>)
 8001fd2:	3403      	adds	r4, #3
 8001fd4:	4288      	cmp	r0, r1
 8001fd6:	d100      	bne.n	8001fda <HAL_GPIO_Init+0xf6>
 8001fd8:	3c02      	subs	r4, #2
 8001fda:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001fdc:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8001fe0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fe2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001fe4:	4c16      	ldr	r4, [pc, #88]	; (8002040 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001fe6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001fe8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8001fea:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	03d1      	lsls	r1, r2, #15
 8001fee:	d401      	bmi.n	8001ff4 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ff0:	003e      	movs	r6, r7
 8001ff2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001ff4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001ff6:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8001ff8:	9e00      	ldr	r6, [sp, #0]
 8001ffa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffc:	0391      	lsls	r1, r2, #14
 8001ffe:	d401      	bmi.n	8002004 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002000:	003e      	movs	r6, r7
 8002002:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002004:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002006:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8002008:	9e00      	ldr	r6, [sp, #0]
 800200a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	02d1      	lsls	r1, r2, #11
 800200e:	d401      	bmi.n	8002014 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002010:	003e      	movs	r6, r7
 8002012:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002014:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002016:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8002018:	9f00      	ldr	r7, [sp, #0]
 800201a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800201c:	0292      	lsls	r2, r2, #10
 800201e:	d401      	bmi.n	8002024 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002020:	402e      	ands	r6, r5
 8002022:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002024:	60e7      	str	r7, [r4, #12]
    position++;
 8002026:	3301      	adds	r3, #1
 8002028:	e762      	b.n	8001ef0 <HAL_GPIO_Init+0xc>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	48000c00 	.word	0x48000c00
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002044:	2a00      	cmp	r2, #0
 8002046:	d001      	beq.n	800204c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002048:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800204a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800204c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800204e:	e7fc      	b.n	800204a <HAL_GPIO_WritePin+0x6>

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	6803      	ldr	r3, [r0, #0]
{
 8002054:	b085      	sub	sp, #20
 8002056:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002058:	07db      	lsls	r3, r3, #31
 800205a:	d42f      	bmi.n	80020bc <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	079b      	lsls	r3, r3, #30
 8002060:	d500      	bpl.n	8002064 <HAL_RCC_OscConfig+0x14>
 8002062:	e081      	b.n	8002168 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	071b      	lsls	r3, r3, #28
 8002068:	d500      	bpl.n	800206c <HAL_RCC_OscConfig+0x1c>
 800206a:	e0bc      	b.n	80021e6 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	075b      	lsls	r3, r3, #29
 8002070:	d500      	bpl.n	8002074 <HAL_RCC_OscConfig+0x24>
 8002072:	e0df      	b.n	8002234 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	06db      	lsls	r3, r3, #27
 8002078:	d51a      	bpl.n	80020b0 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800207a:	696a      	ldr	r2, [r5, #20]
 800207c:	4cb5      	ldr	r4, [pc, #724]	; (8002354 <HAL_RCC_OscConfig+0x304>)
 800207e:	2304      	movs	r3, #4
 8002080:	2a01      	cmp	r2, #1
 8002082:	d000      	beq.n	8002086 <HAL_RCC_OscConfig+0x36>
 8002084:	e14b      	b.n	800231e <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002086:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002088:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800208a:	430b      	orrs	r3, r1
 800208c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800208e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002090:	431a      	orrs	r2, r3
 8002092:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002094:	f7ff fd06 	bl	8001aa4 <HAL_GetTick>
 8002098:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800209a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800209c:	4233      	tst	r3, r6
 800209e:	d100      	bne.n	80020a2 <HAL_RCC_OscConfig+0x52>
 80020a0:	e136      	b.n	8002310 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020a2:	21f8      	movs	r1, #248	; 0xf8
 80020a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80020a6:	69ab      	ldr	r3, [r5, #24]
 80020a8:	438a      	bics	r2, r1
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b0:	6a29      	ldr	r1, [r5, #32]
 80020b2:	2900      	cmp	r1, #0
 80020b4:	d000      	beq.n	80020b8 <HAL_RCC_OscConfig+0x68>
 80020b6:	e159      	b.n	800236c <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80020b8:	2000      	movs	r0, #0
 80020ba:	e013      	b.n	80020e4 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020bc:	210c      	movs	r1, #12
 80020be:	4ca5      	ldr	r4, [pc, #660]	; (8002354 <HAL_RCC_OscConfig+0x304>)
 80020c0:	6862      	ldr	r2, [r4, #4]
 80020c2:	400a      	ands	r2, r1
 80020c4:	2a04      	cmp	r2, #4
 80020c6:	d006      	beq.n	80020d6 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c8:	6863      	ldr	r3, [r4, #4]
 80020ca:	400b      	ands	r3, r1
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	03db      	lsls	r3, r3, #15
 80020d4:	d508      	bpl.n	80020e8 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	039b      	lsls	r3, r3, #14
 80020da:	d5bf      	bpl.n	800205c <HAL_RCC_OscConfig+0xc>
 80020dc:	686b      	ldr	r3, [r5, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1bc      	bne.n	800205c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
}
 80020e4:	b005      	add	sp, #20
 80020e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	686b      	ldr	r3, [r5, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d113      	bne.n	8002116 <HAL_RCC_OscConfig+0xc6>
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	025b      	lsls	r3, r3, #9
 80020f4:	4313      	orrs	r3, r2
 80020f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020f8:	f7ff fcd4 	bl	8001aa4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80020fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	02b6      	lsls	r6, r6, #10
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	4233      	tst	r3, r6
 8002106:	d1a9      	bne.n	800205c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fccc 	bl	8001aa4 <HAL_GetTick>
 800210c:	1bc0      	subs	r0, r0, r7
 800210e:	2864      	cmp	r0, #100	; 0x64
 8002110:	d9f7      	bls.n	8002102 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8002112:	2003      	movs	r0, #3
 8002114:	e7e6      	b.n	80020e4 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	2b00      	cmp	r3, #0
 8002118:	d116      	bne.n	8002148 <HAL_RCC_OscConfig+0xf8>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	4a8e      	ldr	r2, [pc, #568]	; (8002358 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	4013      	ands	r3, r2
 8002122:	6023      	str	r3, [r4, #0]
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	4a8d      	ldr	r2, [pc, #564]	; (800235c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002128:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	4013      	ands	r3, r2
 800212c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800212e:	f7ff fcb9 	bl	8001aa4 <HAL_GetTick>
 8002132:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	4233      	tst	r3, r6
 8002138:	d100      	bne.n	800213c <HAL_RCC_OscConfig+0xec>
 800213a:	e78f      	b.n	800205c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fcb2 	bl	8001aa4 <HAL_GetTick>
 8002140:	1bc0      	subs	r0, r0, r7
 8002142:	2864      	cmp	r0, #100	; 0x64
 8002144:	d9f6      	bls.n	8002134 <HAL_RCC_OscConfig+0xe4>
 8002146:	e7e4      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	2b05      	cmp	r3, #5
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x108>
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	02db      	lsls	r3, r3, #11
 8002152:	4313      	orrs	r3, r2
 8002154:	6023      	str	r3, [r4, #0]
 8002156:	e7ca      	b.n	80020ee <HAL_RCC_OscConfig+0x9e>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x308>)
 800215c:	4013      	ands	r3, r2
 800215e:	6023      	str	r3, [r4, #0]
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	4a7e      	ldr	r2, [pc, #504]	; (800235c <HAL_RCC_OscConfig+0x30c>)
 8002164:	4013      	ands	r3, r2
 8002166:	e7c6      	b.n	80020f6 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002168:	220c      	movs	r2, #12
 800216a:	4c7a      	ldr	r4, [pc, #488]	; (8002354 <HAL_RCC_OscConfig+0x304>)
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	4213      	tst	r3, r2
 8002170:	d006      	beq.n	8002180 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002172:	6863      	ldr	r3, [r4, #4]
 8002174:	4013      	ands	r3, r2
 8002176:	2b08      	cmp	r3, #8
 8002178:	d110      	bne.n	800219c <HAL_RCC_OscConfig+0x14c>
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	03db      	lsls	r3, r3, #15
 800217e:	d40d      	bmi.n	800219c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	079b      	lsls	r3, r3, #30
 8002184:	d502      	bpl.n	800218c <HAL_RCC_OscConfig+0x13c>
 8002186:	68eb      	ldr	r3, [r5, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d1aa      	bne.n	80020e2 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	21f8      	movs	r1, #248	; 0xf8
 800218e:	6822      	ldr	r2, [r4, #0]
 8002190:	692b      	ldr	r3, [r5, #16]
 8002192:	438a      	bics	r2, r1
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4313      	orrs	r3, r2
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	e763      	b.n	8002064 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800219c:	68ea      	ldr	r2, [r5, #12]
 800219e:	2301      	movs	r3, #1
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d00f      	beq.n	80021c4 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80021a4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4313      	orrs	r3, r2
 80021aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc7a 	bl	8001aa4 <HAL_GetTick>
 80021b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	4233      	tst	r3, r6
 80021b6:	d1e9      	bne.n	800218c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff fc74 	bl	8001aa4 <HAL_GetTick>
 80021bc:	1bc0      	subs	r0, r0, r7
 80021be:	2802      	cmp	r0, #2
 80021c0:	d9f7      	bls.n	80021b2 <HAL_RCC_OscConfig+0x162>
 80021c2:	e7a6      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80021c4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80021c8:	439a      	bics	r2, r3
 80021ca:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80021cc:	f7ff fc6a 	bl	8001aa4 <HAL_GetTick>
 80021d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	4233      	tst	r3, r6
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x18a>
 80021d8:	e744      	b.n	8002064 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff fc63 	bl	8001aa4 <HAL_GetTick>
 80021de:	1bc0      	subs	r0, r0, r7
 80021e0:	2802      	cmp	r0, #2
 80021e2:	d9f6      	bls.n	80021d2 <HAL_RCC_OscConfig+0x182>
 80021e4:	e795      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e6:	69ea      	ldr	r2, [r5, #28]
 80021e8:	2301      	movs	r3, #1
 80021ea:	4c5a      	ldr	r4, [pc, #360]	; (8002354 <HAL_RCC_OscConfig+0x304>)
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d010      	beq.n	8002212 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80021f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80021f4:	4313      	orrs	r3, r2
 80021f6:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80021f8:	f7ff fc54 	bl	8001aa4 <HAL_GetTick>
 80021fc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002200:	4233      	tst	r3, r6
 8002202:	d000      	beq.n	8002206 <HAL_RCC_OscConfig+0x1b6>
 8002204:	e732      	b.n	800206c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002206:	f7ff fc4d 	bl	8001aa4 <HAL_GetTick>
 800220a:	1bc0      	subs	r0, r0, r7
 800220c:	2802      	cmp	r0, #2
 800220e:	d9f6      	bls.n	80021fe <HAL_RCC_OscConfig+0x1ae>
 8002210:	e77f      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8002212:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8002216:	439a      	bics	r2, r3
 8002218:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800221a:	f7ff fc43 	bl	8001aa4 <HAL_GetTick>
 800221e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002222:	4233      	tst	r3, r6
 8002224:	d100      	bne.n	8002228 <HAL_RCC_OscConfig+0x1d8>
 8002226:	e721      	b.n	800206c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fc3c 	bl	8001aa4 <HAL_GetTick>
 800222c:	1bc0      	subs	r0, r0, r7
 800222e:	2802      	cmp	r0, #2
 8002230:	d9f6      	bls.n	8002220 <HAL_RCC_OscConfig+0x1d0>
 8002232:	e76e      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002234:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002238:	4c46      	ldr	r4, [pc, #280]	; (8002354 <HAL_RCC_OscConfig+0x304>)
 800223a:	0552      	lsls	r2, r2, #21
 800223c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800223e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4213      	tst	r3, r2
 8002242:	d108      	bne.n	8002256 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	69e3      	ldr	r3, [r4, #28]
 8002246:	4313      	orrs	r3, r2
 8002248:	61e3      	str	r3, [r4, #28]
 800224a:	69e3      	ldr	r3, [r4, #28]
 800224c:	4013      	ands	r3, r2
 800224e:	9303      	str	r3, [sp, #12]
 8002250:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	2780      	movs	r7, #128	; 0x80
 8002258:	4e41      	ldr	r6, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x310>)
 800225a:	007f      	lsls	r7, r7, #1
 800225c:	6833      	ldr	r3, [r6, #0]
 800225e:	423b      	tst	r3, r7
 8002260:	d006      	beq.n	8002270 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002262:	68ab      	ldr	r3, [r5, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d113      	bne.n	8002290 <HAL_RCC_OscConfig+0x240>
 8002268:	6a22      	ldr	r2, [r4, #32]
 800226a:	4313      	orrs	r3, r2
 800226c:	6223      	str	r3, [r4, #32]
 800226e:	e030      	b.n	80022d2 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002270:	6833      	ldr	r3, [r6, #0]
 8002272:	433b      	orrs	r3, r7
 8002274:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002276:	f7ff fc15 	bl	8001aa4 <HAL_GetTick>
 800227a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	6833      	ldr	r3, [r6, #0]
 800227e:	423b      	tst	r3, r7
 8002280:	d1ef      	bne.n	8002262 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7ff fc0f 	bl	8001aa4 <HAL_GetTick>
 8002286:	9b01      	ldr	r3, [sp, #4]
 8002288:	1ac0      	subs	r0, r0, r3
 800228a:	2864      	cmp	r0, #100	; 0x64
 800228c:	d9f6      	bls.n	800227c <HAL_RCC_OscConfig+0x22c>
 800228e:	e740      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
 8002290:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	2b00      	cmp	r3, #0
 8002294:	d114      	bne.n	80022c0 <HAL_RCC_OscConfig+0x270>
 8002296:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002298:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229a:	4393      	bics	r3, r2
 800229c:	6223      	str	r3, [r4, #32]
 800229e:	6a23      	ldr	r3, [r4, #32]
 80022a0:	3203      	adds	r2, #3
 80022a2:	4393      	bics	r3, r2
 80022a4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80022a6:	f7ff fbfd 	bl	8001aa4 <HAL_GetTick>
 80022aa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	6a23      	ldr	r3, [r4, #32]
 80022ae:	423b      	tst	r3, r7
 80022b0:	d025      	beq.n	80022fe <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff fbf7 	bl	8001aa4 <HAL_GetTick>
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x314>)
 80022b8:	1b80      	subs	r0, r0, r6
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d9f6      	bls.n	80022ac <HAL_RCC_OscConfig+0x25c>
 80022be:	e728      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d10b      	bne.n	80022dc <HAL_RCC_OscConfig+0x28c>
 80022c4:	6a21      	ldr	r1, [r4, #32]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6223      	str	r3, [r4, #32]
 80022cc:	6a23      	ldr	r3, [r4, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80022d2:	f7ff fbe7 	bl	8001aa4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80022d8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	e00d      	b.n	80022f8 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	6a23      	ldr	r3, [r4, #32]
 80022de:	4393      	bics	r3, r2
 80022e0:	2204      	movs	r2, #4
 80022e2:	6223      	str	r3, [r4, #32]
 80022e4:	6a23      	ldr	r3, [r4, #32]
 80022e6:	4393      	bics	r3, r2
 80022e8:	e7c0      	b.n	800226c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fbdb 	bl	8001aa4 <HAL_GetTick>
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x314>)
 80022f0:	1b80      	subs	r0, r0, r6
 80022f2:	4298      	cmp	r0, r3
 80022f4:	d900      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2a8>
 80022f6:	e70c      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	6a23      	ldr	r3, [r4, #32]
 80022fa:	423b      	tst	r3, r7
 80022fc:	d0f5      	beq.n	80022ea <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 80022fe:	9b00      	ldr	r3, [sp, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d000      	beq.n	8002306 <HAL_RCC_OscConfig+0x2b6>
 8002304:	e6b6      	b.n	8002074 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002306:	69e3      	ldr	r3, [r4, #28]
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x318>)
 800230a:	4013      	ands	r3, r2
 800230c:	61e3      	str	r3, [r4, #28]
 800230e:	e6b1      	b.n	8002074 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002310:	f7ff fbc8 	bl	8001aa4 <HAL_GetTick>
 8002314:	1bc0      	subs	r0, r0, r7
 8002316:	2802      	cmp	r0, #2
 8002318:	d800      	bhi.n	800231c <HAL_RCC_OscConfig+0x2cc>
 800231a:	e6be      	b.n	800209a <HAL_RCC_OscConfig+0x4a>
 800231c:	e6f9      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800231e:	3205      	adds	r2, #5
 8002320:	d103      	bne.n	800232a <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002322:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002324:	439a      	bics	r2, r3
 8002326:	6362      	str	r2, [r4, #52]	; 0x34
 8002328:	e6bb      	b.n	80020a2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800232a:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800232c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800232e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002330:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002332:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002336:	4393      	bics	r3, r2
 8002338:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800233a:	f7ff fbb3 	bl	8001aa4 <HAL_GetTick>
 800233e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002342:	4233      	tst	r3, r6
 8002344:	d100      	bne.n	8002348 <HAL_RCC_OscConfig+0x2f8>
 8002346:	e6b3      	b.n	80020b0 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002348:	f7ff fbac 	bl	8001aa4 <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	2802      	cmp	r0, #2
 8002350:	d9f6      	bls.n	8002340 <HAL_RCC_OscConfig+0x2f0>
 8002352:	e6de      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
 8002354:	40021000 	.word	0x40021000
 8002358:	fffeffff 	.word	0xfffeffff
 800235c:	fffbffff 	.word	0xfffbffff
 8002360:	40007000 	.word	0x40007000
 8002364:	00001388 	.word	0x00001388
 8002368:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	220c      	movs	r2, #12
 800236e:	4c26      	ldr	r4, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002372:	6863      	ldr	r3, [r4, #4]
 8002374:	4013      	ands	r3, r2
 8002376:	2b08      	cmp	r3, #8
 8002378:	d100      	bne.n	800237c <HAL_RCC_OscConfig+0x32c>
 800237a:	e6b3      	b.n	80020e4 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_RCC_OscConfig+0x3bc>)
 8002380:	4013      	ands	r3, r2
 8002382:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	2902      	cmp	r1, #2
 8002386:	d12f      	bne.n	80023e8 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8002388:	f7ff fb8c 	bl	8001aa4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800238e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	04b6      	lsls	r6, r6, #18
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	4233      	tst	r3, r6
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002398:	220f      	movs	r2, #15
 800239a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800239c:	4393      	bics	r3, r2
 800239e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023a0:	4313      	orrs	r3, r2
 80023a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80023a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023a8:	6862      	ldr	r2, [r4, #4]
 80023aa:	430b      	orrs	r3, r1
 80023ac:	4918      	ldr	r1, [pc, #96]	; (8002410 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ae:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	400a      	ands	r2, r1
 80023b2:	4313      	orrs	r3, r2
 80023b4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	6822      	ldr	r2, [r4, #0]
 80023ba:	045b      	lsls	r3, r3, #17
 80023bc:	4313      	orrs	r3, r2
 80023be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023c0:	f7ff fb70 	bl	8001aa4 <HAL_GetTick>
 80023c4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c6:	04ad      	lsls	r5, r5, #18
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	422b      	tst	r3, r5
 80023cc:	d000      	beq.n	80023d0 <HAL_RCC_OscConfig+0x380>
 80023ce:	e673      	b.n	80020b8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d0:	f7ff fb68 	bl	8001aa4 <HAL_GetTick>
 80023d4:	1b80      	subs	r0, r0, r6
 80023d6:	2802      	cmp	r0, #2
 80023d8:	d9f6      	bls.n	80023c8 <HAL_RCC_OscConfig+0x378>
 80023da:	e69a      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff fb62 	bl	8001aa4 <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9d5      	bls.n	8002392 <HAL_RCC_OscConfig+0x342>
 80023e6:	e694      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80023e8:	f7ff fb5c 	bl	8001aa4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80023ee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	04ad      	lsls	r5, r5, #18
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	422b      	tst	r3, r5
 80023f6:	d100      	bne.n	80023fa <HAL_RCC_OscConfig+0x3aa>
 80023f8:	e65e      	b.n	80020b8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7ff fb53 	bl	8001aa4 <HAL_GetTick>
 80023fe:	1b80      	subs	r0, r0, r6
 8002400:	2802      	cmp	r0, #2
 8002402:	d9f6      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
 8002404:	e685      	b.n	8002112 <HAL_RCC_OscConfig+0xc2>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000
 800240c:	feffffff 	.word	0xfeffffff
 8002410:	ffc2ffff 	.word	0xffc2ffff

08002414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002416:	4c14      	ldr	r4, [pc, #80]	; (8002468 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8002418:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800241a:	2210      	movs	r2, #16
 800241c:	0021      	movs	r1, r4
 800241e:	4668      	mov	r0, sp
 8002420:	f001 fb2a 	bl	8003a78 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002424:	0021      	movs	r1, r4
 8002426:	ad04      	add	r5, sp, #16
 8002428:	2210      	movs	r2, #16
 800242a:	3110      	adds	r1, #16
 800242c:	0028      	movs	r0, r5
 800242e:	f001 fb23 	bl	8003a78 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002432:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002434:	4e0d      	ldr	r6, [pc, #52]	; (800246c <HAL_RCC_GetSysClockFreq+0x58>)
 8002436:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002438:	401a      	ands	r2, r3
 800243a:	2a08      	cmp	r2, #8
 800243c:	d111      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800243e:	200f      	movs	r0, #15
 8002440:	466a      	mov	r2, sp
 8002442:	0c99      	lsrs	r1, r3, #18
 8002444:	4001      	ands	r1, r0
 8002446:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002448:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800244a:	4002      	ands	r2, r0
 800244c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800244e:	03db      	lsls	r3, r3, #15
 8002450:	d505      	bpl.n	800245e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002454:	f7fd fe6c 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002458:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800245a:	b008      	add	sp, #32
 800245c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <HAL_RCC_GetSysClockFreq+0x60>)
 8002460:	e7fa      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002464:	e7f9      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x46>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	08003aa4 	.word	0x08003aa4
 800246c:	40021000 	.word	0x40021000
 8002470:	007a1200 	.word	0x007a1200
 8002474:	003d0900 	.word	0x003d0900

08002478 <HAL_RCC_ClockConfig>:
{
 8002478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800247a:	2201      	movs	r2, #1
 800247c:	4c43      	ldr	r4, [pc, #268]	; (800258c <HAL_RCC_ClockConfig+0x114>)
{
 800247e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002480:	6823      	ldr	r3, [r4, #0]
{
 8002482:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002484:	4013      	ands	r3, r2
 8002486:	428b      	cmp	r3, r1
 8002488:	d31c      	bcc.n	80024c4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	6832      	ldr	r2, [r6, #0]
 800248c:	0793      	lsls	r3, r2, #30
 800248e:	d423      	bmi.n	80024d8 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002490:	07d3      	lsls	r3, r2, #31
 8002492:	d429      	bmi.n	80024e8 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002494:	2301      	movs	r3, #1
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	401a      	ands	r2, r3
 800249a:	4297      	cmp	r7, r2
 800249c:	d367      	bcc.n	800256e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	6833      	ldr	r3, [r6, #0]
 80024a0:	4c3b      	ldr	r4, [pc, #236]	; (8002590 <HAL_RCC_ClockConfig+0x118>)
 80024a2:	075b      	lsls	r3, r3, #29
 80024a4:	d46a      	bmi.n	800257c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a6:	f7ff ffb5 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	4a39      	ldr	r2, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x11c>)
 80024ae:	061b      	lsls	r3, r3, #24
 80024b0:	0f1b      	lsrs	r3, r3, #28
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	40d8      	lsrs	r0, r3
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_RCC_ClockConfig+0x120>)
 80024b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fac8 	bl	8001a50 <HAL_InitTick>
  return HAL_OK;
 80024c0:	2000      	movs	r0, #0
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	4393      	bics	r3, r2
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	4013      	ands	r3, r2
 80024d0:	4299      	cmp	r1, r3
 80024d2:	d0da      	beq.n	800248a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80024d4:	2001      	movs	r0, #1
}
 80024d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	20f0      	movs	r0, #240	; 0xf0
 80024da:	492d      	ldr	r1, [pc, #180]	; (8002590 <HAL_RCC_ClockConfig+0x118>)
 80024dc:	684b      	ldr	r3, [r1, #4]
 80024de:	4383      	bics	r3, r0
 80024e0:	68b0      	ldr	r0, [r6, #8]
 80024e2:	4303      	orrs	r3, r0
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e7d3      	b.n	8002490 <HAL_RCC_ClockConfig+0x18>
 80024e8:	4d29      	ldr	r5, [pc, #164]	; (8002590 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ec:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	2a01      	cmp	r2, #1
 80024f0:	d11a      	bne.n	8002528 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	039b      	lsls	r3, r3, #14
 80024f4:	d5ee      	bpl.n	80024d4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	2103      	movs	r1, #3
 80024f8:	686b      	ldr	r3, [r5, #4]
 80024fa:	438b      	bics	r3, r1
 80024fc:	4313      	orrs	r3, r2
 80024fe:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002500:	f7ff fad0 	bl	8001aa4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002504:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002506:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002508:	2b01      	cmp	r3, #1
 800250a:	d115      	bne.n	8002538 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	220c      	movs	r2, #12
 800250e:	686b      	ldr	r3, [r5, #4]
 8002510:	4013      	ands	r3, r2
 8002512:	2b04      	cmp	r3, #4
 8002514:	d0be      	beq.n	8002494 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002516:	f7ff fac5 	bl	8001aa4 <HAL_GetTick>
 800251a:	9b01      	ldr	r3, [sp, #4]
 800251c:	1ac0      	subs	r0, r0, r3
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_RCC_ClockConfig+0x124>)
 8002520:	4298      	cmp	r0, r3
 8002522:	d9f3      	bls.n	800250c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e7d6      	b.n	80024d6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002528:	2a02      	cmp	r2, #2
 800252a:	d102      	bne.n	8002532 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	d4e2      	bmi.n	80024f6 <HAL_RCC_ClockConfig+0x7e>
 8002530:	e7d0      	b.n	80024d4 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	079b      	lsls	r3, r3, #30
 8002534:	d4df      	bmi.n	80024f6 <HAL_RCC_ClockConfig+0x7e>
 8002536:	e7cd      	b.n	80024d4 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002538:	2b02      	cmp	r3, #2
 800253a:	d012      	beq.n	8002562 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800253c:	220c      	movs	r2, #12
 800253e:	686b      	ldr	r3, [r5, #4]
 8002540:	4213      	tst	r3, r2
 8002542:	d0a7      	beq.n	8002494 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff faae 	bl	8001aa4 <HAL_GetTick>
 8002548:	9b01      	ldr	r3, [sp, #4]
 800254a:	1ac0      	subs	r0, r0, r3
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_ClockConfig+0x124>)
 800254e:	4298      	cmp	r0, r3
 8002550:	d9f4      	bls.n	800253c <HAL_RCC_ClockConfig+0xc4>
 8002552:	e7e7      	b.n	8002524 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7ff faa6 	bl	8001aa4 <HAL_GetTick>
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	1ac0      	subs	r0, r0, r3
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_RCC_ClockConfig+0x124>)
 800255e:	4298      	cmp	r0, r3
 8002560:	d8e0      	bhi.n	8002524 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002562:	220c      	movs	r2, #12
 8002564:	686b      	ldr	r3, [r5, #4]
 8002566:	4013      	ands	r3, r2
 8002568:	2b08      	cmp	r3, #8
 800256a:	d1f3      	bne.n	8002554 <HAL_RCC_ClockConfig+0xdc>
 800256c:	e792      	b.n	8002494 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	439a      	bics	r2, r3
 8002572:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	421a      	tst	r2, r3
 8002578:	d1ac      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x5c>
 800257a:	e790      	b.n	800249e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	6863      	ldr	r3, [r4, #4]
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_RCC_ClockConfig+0x128>)
 8002580:	4013      	ands	r3, r2
 8002582:	68f2      	ldr	r2, [r6, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	6063      	str	r3, [r4, #4]
 8002588:	e78d      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2e>
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	40022000 	.word	0x40022000
 8002590:	40021000 	.word	0x40021000
 8002594:	08003b95 	.word	0x08003b95
 8002598:	2000000c 	.word	0x2000000c
 800259c:	00001388 	.word	0x00001388
 80025a0:	fffff8ff 	.word	0xfffff8ff

080025a4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80025a4:	4b01      	ldr	r3, [pc, #4]	; (80025ac <HAL_RCC_GetHCLKFreq+0x8>)
 80025a6:	6818      	ldr	r0, [r3, #0]
}
 80025a8:	4770      	bx	lr
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	2000000c 	.word	0x2000000c

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	0f5b      	lsrs	r3, r3, #29
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025be:	6810      	ldr	r0, [r2, #0]
 80025c0:	40d8      	lsrs	r0, r3
}    
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08003ba5 	.word	0x08003ba5
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025d2:	6803      	ldr	r3, [r0, #0]
{
 80025d4:	b085      	sub	sp, #20
 80025d6:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025d8:	03db      	lsls	r3, r3, #15
 80025da:	d528      	bpl.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025dc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e0:	4c37      	ldr	r4, [pc, #220]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80025e2:	0552      	lsls	r2, r2, #21
 80025e4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e8:	4213      	tst	r3, r2
 80025ea:	d108      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	69e3      	ldr	r3, [r4, #28]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61e3      	str	r3, [r4, #28]
 80025f2:	69e3      	ldr	r3, [r4, #28]
 80025f4:	4013      	ands	r3, r2
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	2780      	movs	r7, #128	; 0x80
 8002600:	4e30      	ldr	r6, [pc, #192]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002602:	007f      	lsls	r7, r7, #1
 8002604:	6833      	ldr	r3, [r6, #0]
 8002606:	423b      	tst	r3, r7
 8002608:	d026      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800260a:	22c0      	movs	r2, #192	; 0xc0
 800260c:	6a23      	ldr	r3, [r4, #32]
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	4e2d      	ldr	r6, [pc, #180]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002614:	d132      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002616:	6a23      	ldr	r3, [r4, #32]
 8002618:	401e      	ands	r6, r3
 800261a:	686b      	ldr	r3, [r5, #4]
 800261c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800261e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002620:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002622:	2b01      	cmp	r3, #1
 8002624:	d103      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	69e3      	ldr	r3, [r4, #28]
 8002628:	4a28      	ldr	r2, [pc, #160]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800262a:	4013      	ands	r3, r2
 800262c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262e:	682a      	ldr	r2, [r5, #0]
 8002630:	07d3      	lsls	r3, r2, #31
 8002632:	d506      	bpl.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002634:	2003      	movs	r0, #3
 8002636:	4922      	ldr	r1, [pc, #136]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002638:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800263a:	4383      	bics	r3, r0
 800263c:	68a8      	ldr	r0, [r5, #8]
 800263e:	4303      	orrs	r3, r0
 8002640:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002642:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002644:	0693      	lsls	r3, r2, #26
 8002646:	d517      	bpl.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002648:	2110      	movs	r1, #16
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800264c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800264e:	438b      	bics	r3, r1
 8002650:	68e9      	ldr	r1, [r5, #12]
 8002652:	430b      	orrs	r3, r1
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	e00f      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002658:	6833      	ldr	r3, [r6, #0]
 800265a:	433b      	orrs	r3, r7
 800265c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800265e:	f7ff fa21 	bl	8001aa4 <HAL_GetTick>
 8002662:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	6833      	ldr	r3, [r6, #0]
 8002666:	423b      	tst	r3, r7
 8002668:	d1cf      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fa1b 	bl	8001aa4 <HAL_GetTick>
 800266e:	9b01      	ldr	r3, [sp, #4]
 8002670:	1ac0      	subs	r0, r0, r3
 8002672:	2864      	cmp	r0, #100	; 0x64
 8002674:	d9f6      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8002676:	2003      	movs	r0, #3
}
 8002678:	b005      	add	sp, #20
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267c:	6869      	ldr	r1, [r5, #4]
 800267e:	400a      	ands	r2, r1
 8002680:	4293      	cmp	r3, r2
 8002682:	d0c8      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002684:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002686:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002688:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800268c:	025b      	lsls	r3, r3, #9
 800268e:	4303      	orrs	r3, r0
 8002690:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002692:	6a23      	ldr	r3, [r4, #32]
 8002694:	480e      	ldr	r0, [pc, #56]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002696:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4003      	ands	r3, r0
 800269a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800269c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800269e:	07d3      	lsls	r3, r2, #31
 80026a0:	d5b9      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80026a2:	f7ff f9ff 	bl	8001aa4 <HAL_GetTick>
 80026a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	2202      	movs	r2, #2
 80026aa:	6a23      	ldr	r3, [r4, #32]
 80026ac:	4213      	tst	r3, r2
 80026ae:	d1b2      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7ff f9f8 	bl	8001aa4 <HAL_GetTick>
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80026b6:	1bc0      	subs	r0, r0, r7
 80026b8:	4298      	cmp	r0, r3
 80026ba:	d9f5      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80026bc:	e7db      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
 80026c8:	fffffcff 	.word	0xfffffcff
 80026cc:	efffffff 	.word	0xefffffff
 80026d0:	fffeffff 	.word	0xfffeffff
 80026d4:	00001388 	.word	0x00001388

080026d8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d8:	2201      	movs	r2, #1
 80026da:	6a03      	ldr	r3, [r0, #32]
{
 80026dc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026de:	4393      	bics	r3, r2
 80026e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e6:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026e8:	3272      	adds	r2, #114	; 0x72
 80026ea:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ec:	680a      	ldr	r2, [r1, #0]
 80026ee:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026f0:	2202      	movs	r2, #2
 80026f2:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026f4:	688a      	ldr	r2, [r1, #8]
 80026f6:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026f8:	4a14      	ldr	r2, [pc, #80]	; (800274c <TIM_OC1_SetConfig+0x74>)
 80026fa:	4290      	cmp	r0, r2
 80026fc:	d008      	beq.n	8002710 <TIM_OC1_SetConfig+0x38>
 80026fe:	4e14      	ldr	r6, [pc, #80]	; (8002750 <TIM_OC1_SetConfig+0x78>)
 8002700:	42b0      	cmp	r0, r6
 8002702:	d005      	beq.n	8002710 <TIM_OC1_SetConfig+0x38>
 8002704:	4e13      	ldr	r6, [pc, #76]	; (8002754 <TIM_OC1_SetConfig+0x7c>)
 8002706:	42b0      	cmp	r0, r6
 8002708:	d002      	beq.n	8002710 <TIM_OC1_SetConfig+0x38>
 800270a:	4e13      	ldr	r6, [pc, #76]	; (8002758 <TIM_OC1_SetConfig+0x80>)
 800270c:	42b0      	cmp	r0, r6
 800270e:	d116      	bne.n	800273e <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002710:	2608      	movs	r6, #8
 8002712:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002714:	68ce      	ldr	r6, [r1, #12]
 8002716:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002718:	2604      	movs	r6, #4
 800271a:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800271c:	4290      	cmp	r0, r2
 800271e:	d008      	beq.n	8002732 <TIM_OC1_SetConfig+0x5a>
 8002720:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <TIM_OC1_SetConfig+0x78>)
 8002722:	4290      	cmp	r0, r2
 8002724:	d005      	beq.n	8002732 <TIM_OC1_SetConfig+0x5a>
 8002726:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <TIM_OC1_SetConfig+0x7c>)
 8002728:	4290      	cmp	r0, r2
 800272a:	d002      	beq.n	8002732 <TIM_OC1_SetConfig+0x5a>
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <TIM_OC1_SetConfig+0x80>)
 800272e:	4290      	cmp	r0, r2
 8002730:	d105      	bne.n	800273e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002734:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002736:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002738:	694c      	ldr	r4, [r1, #20]
 800273a:	4334      	orrs	r4, r6
 800273c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800273e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002740:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002742:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002744:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002746:	6203      	str	r3, [r0, #32]
}
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40014000 	.word	0x40014000
 8002754:	40014400 	.word	0x40014400
 8002758:	40014800 	.word	0x40014800
 800275c:	fffffcff 	.word	0xfffffcff

08002760 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002762:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002764:	6a03      	ldr	r3, [r0, #32]
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <TIM_OC3_SetConfig+0x64>)
 8002768:	4013      	ands	r3, r2
 800276a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800276c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800276e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002770:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002772:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002774:	680d      	ldr	r5, [r1, #0]
 8002776:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002778:	4d13      	ldr	r5, [pc, #76]	; (80027c8 <TIM_OC3_SetConfig+0x68>)
 800277a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800277c:	688d      	ldr	r5, [r1, #8]
 800277e:	022d      	lsls	r5, r5, #8
 8002780:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002782:	4d12      	ldr	r5, [pc, #72]	; (80027cc <TIM_OC3_SetConfig+0x6c>)
 8002784:	42a8      	cmp	r0, r5
 8002786:	d10e      	bne.n	80027a6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002788:	4d11      	ldr	r5, [pc, #68]	; (80027d0 <TIM_OC3_SetConfig+0x70>)
 800278a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800278c:	68cb      	ldr	r3, [r1, #12]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002792:	4d10      	ldr	r5, [pc, #64]	; (80027d4 <TIM_OC3_SetConfig+0x74>)
 8002794:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002796:	4d10      	ldr	r5, [pc, #64]	; (80027d8 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002798:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800279a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800279c:	698a      	ldr	r2, [r1, #24]
 800279e:	4332      	orrs	r2, r6
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	432a      	orrs	r2, r5
 80027a4:	e008      	b.n	80027b8 <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027a6:	4d0d      	ldr	r5, [pc, #52]	; (80027dc <TIM_OC3_SetConfig+0x7c>)
 80027a8:	42a8      	cmp	r0, r5
 80027aa:	d0f4      	beq.n	8002796 <TIM_OC3_SetConfig+0x36>
 80027ac:	4d0c      	ldr	r5, [pc, #48]	; (80027e0 <TIM_OC3_SetConfig+0x80>)
 80027ae:	42a8      	cmp	r0, r5
 80027b0:	d0f1      	beq.n	8002796 <TIM_OC3_SetConfig+0x36>
 80027b2:	4d0c      	ldr	r5, [pc, #48]	; (80027e4 <TIM_OC3_SetConfig+0x84>)
 80027b4:	42a8      	cmp	r0, r5
 80027b6:	d0ee      	beq.n	8002796 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ba:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80027bc:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80027be:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c0:	6203      	str	r3, [r0, #32]
}
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	fffffeff 	.word	0xfffffeff
 80027c8:	fffffdff 	.word	0xfffffdff
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	fffff7ff 	.word	0xfffff7ff
 80027d4:	fffffbff 	.word	0xfffffbff
 80027d8:	ffffcfff 	.word	0xffffcfff
 80027dc:	40014000 	.word	0x40014000
 80027e0:	40014400 	.word	0x40014400
 80027e4:	40014800 	.word	0x40014800

080027e8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e8:	6a03      	ldr	r3, [r0, #32]
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <TIM_OC4_SetConfig+0x54>)
{
 80027ec:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ee:	4013      	ands	r3, r2
 80027f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f4:	4c12      	ldr	r4, [pc, #72]	; (8002840 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80027f6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80027f8:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027fa:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027fc:	680c      	ldr	r4, [r1, #0]
 80027fe:	0224      	lsls	r4, r4, #8
 8002800:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002802:	4c10      	ldr	r4, [pc, #64]	; (8002844 <TIM_OC4_SetConfig+0x5c>)
 8002804:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002806:	688c      	ldr	r4, [r1, #8]
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800280c:	4c0e      	ldr	r4, [pc, #56]	; (8002848 <TIM_OC4_SetConfig+0x60>)
 800280e:	42a0      	cmp	r0, r4
 8002810:	d008      	beq.n	8002824 <TIM_OC4_SetConfig+0x3c>
 8002812:	4c0e      	ldr	r4, [pc, #56]	; (800284c <TIM_OC4_SetConfig+0x64>)
 8002814:	42a0      	cmp	r0, r4
 8002816:	d005      	beq.n	8002824 <TIM_OC4_SetConfig+0x3c>
 8002818:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <TIM_OC4_SetConfig+0x68>)
 800281a:	42a0      	cmp	r0, r4
 800281c:	d002      	beq.n	8002824 <TIM_OC4_SetConfig+0x3c>
 800281e:	4c0d      	ldr	r4, [pc, #52]	; (8002854 <TIM_OC4_SetConfig+0x6c>)
 8002820:	42a0      	cmp	r0, r4
 8002822:	d104      	bne.n	800282e <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002824:	4c0c      	ldr	r4, [pc, #48]	; (8002858 <TIM_OC4_SetConfig+0x70>)
 8002826:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002828:	694c      	ldr	r4, [r1, #20]
 800282a:	01a4      	lsls	r4, r4, #6
 800282c:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800282e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002830:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002832:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002834:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002836:	6202      	str	r2, [r0, #32]
}
 8002838:	bd30      	pop	{r4, r5, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	ffffefff 	.word	0xffffefff
 8002840:	ffff8cff 	.word	0xffff8cff
 8002844:	ffffdfff 	.word	0xffffdfff
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40014000 	.word	0x40014000
 8002850:	40014400 	.word	0x40014400
 8002854:	40014800 	.word	0x40014800
 8002858:	ffffbfff 	.word	0xffffbfff

0800285c <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 800285c:	0002      	movs	r2, r0
 800285e:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8002860:	2101      	movs	r1, #1
 8002862:	6800      	ldr	r0, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002864:	323d      	adds	r2, #61	; 0x3d
 8002866:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 8002868:	6803      	ldr	r3, [r0, #0]
 800286a:	430b      	orrs	r3, r1
 800286c:	6003      	str	r3, [r0, #0]
}
 800286e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002870:	7011      	strb	r1, [r2, #0]
}
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_PeriodElapsedCallback>:
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_OC_DelayElapsedCallback>:
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_IC_CaptureCallback>:
 8002878:	4770      	bx	lr

0800287a <HAL_TIM_PWM_PulseFinishedCallback>:
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_TriggerCallback>:
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800287e:	2202      	movs	r2, #2
 8002880:	6803      	ldr	r3, [r0, #0]
{
 8002882:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002884:	6919      	ldr	r1, [r3, #16]
{
 8002886:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002888:	4211      	tst	r1, r2
 800288a:	d00e      	beq.n	80028aa <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	4211      	tst	r1, r2
 8002890:	d00b      	beq.n	80028aa <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002892:	3a05      	subs	r2, #5
 8002894:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002896:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002898:	3204      	adds	r2, #4
 800289a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800289c:	079b      	lsls	r3, r3, #30
 800289e:	d100      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x24>
 80028a0:	e079      	b.n	8002996 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	f7ff ffe9 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	2300      	movs	r3, #0
 80028a8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028aa:	2204      	movs	r2, #4
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	6919      	ldr	r1, [r3, #16]
 80028b0:	4211      	tst	r1, r2
 80028b2:	d010      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80028b4:	68d9      	ldr	r1, [r3, #12]
 80028b6:	4211      	tst	r1, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028ba:	3a09      	subs	r2, #9
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028be:	3207      	adds	r2, #7
 80028c0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	23c0      	movs	r3, #192	; 0xc0
 80028c6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80028c8:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ca:	421a      	tst	r2, r3
 80028cc:	d069      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	f7ff ffd3 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	2300      	movs	r3, #0
 80028d4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d6:	2208      	movs	r2, #8
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	6919      	ldr	r1, [r3, #16]
 80028dc:	4211      	tst	r1, r2
 80028de:	d00e      	beq.n	80028fe <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80028e0:	68d9      	ldr	r1, [r3, #12]
 80028e2:	4211      	tst	r1, r2
 80028e4:	d00b      	beq.n	80028fe <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e6:	3a11      	subs	r2, #17
 80028e8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ec:	320d      	adds	r2, #13
 80028ee:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80028f0:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f2:	079b      	lsls	r3, r3, #30
 80028f4:	d05b      	beq.n	80029ae <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	f7ff ffbf 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	2300      	movs	r3, #0
 80028fc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028fe:	2210      	movs	r2, #16
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	4211      	tst	r1, r2
 8002906:	d010      	beq.n	800292a <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002908:	68d9      	ldr	r1, [r3, #12]
 800290a:	4211      	tst	r1, r2
 800290c:	d00d      	beq.n	800292a <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800290e:	3a21      	subs	r2, #33	; 0x21
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002912:	3219      	adds	r2, #25
 8002914:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	23c0      	movs	r3, #192	; 0xc0
 800291a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800291c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800291e:	421a      	tst	r2, r3
 8002920:	d04b      	beq.n	80029ba <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	f7ff ffa9 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	2300      	movs	r3, #0
 8002928:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800292a:	2201      	movs	r2, #1
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	6919      	ldr	r1, [r3, #16]
 8002930:	4211      	tst	r1, r2
 8002932:	d007      	beq.n	8002944 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002934:	68d9      	ldr	r1, [r3, #12]
 8002936:	4211      	tst	r1, r2
 8002938:	d004      	beq.n	8002944 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800293a:	3a03      	subs	r2, #3
 800293c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800293e:	0020      	movs	r0, r4
 8002940:	f7ff ff98 	bl	8002874 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	4211      	tst	r1, r2
 800294c:	d008      	beq.n	8002960 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800294e:	68d9      	ldr	r1, [r3, #12]
 8002950:	4211      	tst	r1, r2
 8002952:	d005      	beq.n	8002960 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002954:	3a02      	subs	r2, #2
 8002956:	3aff      	subs	r2, #255	; 0xff
 8002958:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800295a:	0020      	movs	r0, r4
 800295c:	f000 fa11 	bl	8002d82 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	4211      	tst	r1, r2
 8002968:	d007      	beq.n	800297a <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800296a:	68d9      	ldr	r1, [r3, #12]
 800296c:	4211      	tst	r1, r2
 800296e:	d004      	beq.n	800297a <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002970:	3a81      	subs	r2, #129	; 0x81
 8002972:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002974:	0020      	movs	r0, r4
 8002976:	f7ff ff81 	bl	800287c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297a:	2220      	movs	r2, #32
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	6919      	ldr	r1, [r3, #16]
 8002980:	4211      	tst	r1, r2
 8002982:	d007      	beq.n	8002994 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	4211      	tst	r1, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800298a:	3a41      	subs	r2, #65	; 0x41
 800298c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800298e:	0020      	movs	r0, r4
 8002990:	f000 f9f6 	bl	8002d80 <HAL_TIMEx_CommutationCallback>
}
 8002994:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	f7ff ff6e 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299a:	0020      	movs	r0, r4
 800299c:	f7ff ff6d 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
 80029a0:	e781      	b.n	80028a6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	f7ff ff68 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a6:	0020      	movs	r0, r4
 80029a8:	f7ff ff67 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
 80029ac:	e791      	b.n	80028d2 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	f7ff ff62 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b2:	0020      	movs	r0, r4
 80029b4:	f7ff ff61 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
 80029b8:	e79f      	b.n	80028fa <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	f7ff ff5c 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029be:	0020      	movs	r0, r4
 80029c0:	f7ff ff5b 	bl	800287a <HAL_TIM_PWM_PulseFinishedCallback>
 80029c4:	e7af      	b.n	8002926 <HAL_TIM_IRQHandler+0xa8>
	...

080029c8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <TIM_Base_SetConfig+0x74>)
{
 80029ca:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80029cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ce:	4290      	cmp	r0, r2
 80029d0:	d002      	beq.n	80029d8 <TIM_Base_SetConfig+0x10>
 80029d2:	4c1b      	ldr	r4, [pc, #108]	; (8002a40 <TIM_Base_SetConfig+0x78>)
 80029d4:	42a0      	cmp	r0, r4
 80029d6:	d108      	bne.n	80029ea <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d8:	2470      	movs	r4, #112	; 0x70
 80029da:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80029dc:	684c      	ldr	r4, [r1, #4]
 80029de:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e0:	4290      	cmp	r0, r2
 80029e2:	d00e      	beq.n	8002a02 <TIM_Base_SetConfig+0x3a>
 80029e4:	4c16      	ldr	r4, [pc, #88]	; (8002a40 <TIM_Base_SetConfig+0x78>)
 80029e6:	42a0      	cmp	r0, r4
 80029e8:	d00b      	beq.n	8002a02 <TIM_Base_SetConfig+0x3a>
 80029ea:	4c16      	ldr	r4, [pc, #88]	; (8002a44 <TIM_Base_SetConfig+0x7c>)
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d008      	beq.n	8002a02 <TIM_Base_SetConfig+0x3a>
 80029f0:	4c15      	ldr	r4, [pc, #84]	; (8002a48 <TIM_Base_SetConfig+0x80>)
 80029f2:	42a0      	cmp	r0, r4
 80029f4:	d005      	beq.n	8002a02 <TIM_Base_SetConfig+0x3a>
 80029f6:	4c15      	ldr	r4, [pc, #84]	; (8002a4c <TIM_Base_SetConfig+0x84>)
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d002      	beq.n	8002a02 <TIM_Base_SetConfig+0x3a>
 80029fc:	4c14      	ldr	r4, [pc, #80]	; (8002a50 <TIM_Base_SetConfig+0x88>)
 80029fe:	42a0      	cmp	r0, r4
 8002a00:	d103      	bne.n	8002a0a <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a02:	4c14      	ldr	r4, [pc, #80]	; (8002a54 <TIM_Base_SetConfig+0x8c>)
 8002a04:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a06:	68cc      	ldr	r4, [r1, #12]
 8002a08:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0a:	2480      	movs	r4, #128	; 0x80
 8002a0c:	43a3      	bics	r3, r4
 8002a0e:	694c      	ldr	r4, [r1, #20]
 8002a10:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002a12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a14:	688b      	ldr	r3, [r1, #8]
 8002a16:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a18:	680b      	ldr	r3, [r1, #0]
 8002a1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1c:	4290      	cmp	r0, r2
 8002a1e:	d008      	beq.n	8002a32 <TIM_Base_SetConfig+0x6a>
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <TIM_Base_SetConfig+0x80>)
 8002a22:	4298      	cmp	r0, r3
 8002a24:	d005      	beq.n	8002a32 <TIM_Base_SetConfig+0x6a>
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <TIM_Base_SetConfig+0x84>)
 8002a28:	4298      	cmp	r0, r3
 8002a2a:	d002      	beq.n	8002a32 <TIM_Base_SetConfig+0x6a>
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <TIM_Base_SetConfig+0x88>)
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	d101      	bne.n	8002a36 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002a32:	690b      	ldr	r3, [r1, #16]
 8002a34:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002a36:	2301      	movs	r3, #1
 8002a38:	6143      	str	r3, [r0, #20]
}
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40002000 	.word	0x40002000
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	fffffcff 	.word	0xfffffcff

08002a58 <HAL_TIM_PWM_Init>:
{
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002a5c:	2001      	movs	r0, #1
  if(htim == NULL)
 8002a5e:	2c00      	cmp	r4, #0
 8002a60:	d014      	beq.n	8002a8c <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a62:	0025      	movs	r5, r4
 8002a64:	353d      	adds	r5, #61	; 0x3d
 8002a66:	782b      	ldrb	r3, [r5, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	0022      	movs	r2, r4
 8002a70:	323c      	adds	r2, #60	; 0x3c
 8002a72:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002a74:	0020      	movs	r0, r4
 8002a76:	f000 fe3b 	bl	80036f0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002a7a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002a7e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a80:	1d21      	adds	r1, r4, #4
 8002a82:	f7ff ffa1 	bl	80029c8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002a86:	2301      	movs	r3, #1
  return HAL_OK;
 8002a88:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002a8a:	702b      	strb	r3, [r5, #0]
}
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a90:	2210      	movs	r2, #16
 8002a92:	6a03      	ldr	r3, [r0, #32]
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a96:	4393      	bics	r3, r2
 8002a98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a9a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a9c:	4d16      	ldr	r5, [pc, #88]	; (8002af8 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8002a9e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002aa0:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa2:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa4:	680d      	ldr	r5, [r1, #0]
 8002aa6:	022d      	lsls	r5, r5, #8
 8002aa8:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8002aaa:	2520      	movs	r5, #32
 8002aac:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aae:	688d      	ldr	r5, [r1, #8]
 8002ab0:	012d      	lsls	r5, r5, #4
 8002ab2:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab4:	4d11      	ldr	r5, [pc, #68]	; (8002afc <TIM_OC2_SetConfig+0x6c>)
 8002ab6:	42a8      	cmp	r0, r5
 8002ab8:	d10f      	bne.n	8002ada <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aba:	2580      	movs	r5, #128	; 0x80
 8002abc:	43aa      	bics	r2, r5
 8002abe:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac0:	68ca      	ldr	r2, [r1, #12]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ac6:	2540      	movs	r5, #64	; 0x40
 8002ac8:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aca:	4d0d      	ldr	r5, [pc, #52]	; (8002b00 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002acc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ace:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ad0:	698b      	ldr	r3, [r1, #24]
 8002ad2:	4333      	orrs	r3, r6
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	432b      	orrs	r3, r5
 8002ad8:	e008      	b.n	8002aec <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ada:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <TIM_OC2_SetConfig+0x74>)
 8002adc:	42a8      	cmp	r0, r5
 8002ade:	d0f4      	beq.n	8002aca <TIM_OC2_SetConfig+0x3a>
 8002ae0:	4d09      	ldr	r5, [pc, #36]	; (8002b08 <TIM_OC2_SetConfig+0x78>)
 8002ae2:	42a8      	cmp	r0, r5
 8002ae4:	d0f1      	beq.n	8002aca <TIM_OC2_SetConfig+0x3a>
 8002ae6:	4d09      	ldr	r5, [pc, #36]	; (8002b0c <TIM_OC2_SetConfig+0x7c>)
 8002ae8:	42a8      	cmp	r0, r5
 8002aea:	d0ee      	beq.n	8002aca <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002aec:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002aee:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002af0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002af2:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002af4:	6202      	str	r2, [r0, #32]
}
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	ffff8cff 	.word	0xffff8cff
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	fffff3ff 	.word	0xfffff3ff
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40014400 	.word	0x40014400
 8002b0c:	40014800 	.word	0x40014800

08002b10 <HAL_TIM_PWM_ConfigChannel>:
{
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002b12:	0006      	movs	r6, r0
 8002b14:	2302      	movs	r3, #2
 8002b16:	363c      	adds	r6, #60	; 0x3c
{
 8002b18:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002b1a:	7831      	ldrb	r1, [r6, #0]
{
 8002b1c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002b1e:	0018      	movs	r0, r3
 8002b20:	2901      	cmp	r1, #1
 8002b22:	d025      	beq.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8002b26:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8002b2a:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8002b2e:	2a0c      	cmp	r2, #12
 8002b30:	d81a      	bhi.n	8002b68 <HAL_TIM_PWM_ConfigChannel+0x58>
 8002b32:	0010      	movs	r0, r2
 8002b34:	f7fd faf2 	bl	800011c <__gnu_thumb1_case_uqi>
 8002b38:	18181807 	.word	0x18181807
 8002b3c:	1818181d 	.word	0x1818181d
 8002b40:	1818182f 	.word	0x1818182f
 8002b44:	41          	.byte	0x41
 8002b45:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b46:	0029      	movs	r1, r5
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	f7ff fdc5 	bl	80026d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b4e:	2208      	movs	r2, #8
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	6999      	ldr	r1, [r3, #24]
 8002b54:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b56:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b64:	430a      	orrs	r2, r1
 8002b66:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002b6a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8002b6e:	7030      	strb	r0, [r6, #0]
}
 8002b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b72:	0029      	movs	r1, r5
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	f7ff ff8b 	bl	8002a90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	6999      	ldr	r1, [r3, #24]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	4915      	ldr	r1, [pc, #84]	; (8002be0 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b8e:	692a      	ldr	r2, [r5, #16]
 8002b90:	6999      	ldr	r1, [r3, #24]
 8002b92:	0212      	lsls	r2, r2, #8
 8002b94:	e7e6      	b.n	8002b64 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b96:	0029      	movs	r1, r5
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	f7ff fde1 	bl	8002760 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ba6:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	438a      	bics	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	61da      	str	r2, [r3, #28]
    break;
 8002bb8:	e7d6      	b.n	8002b68 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bba:	0029      	movs	r1, r5
 8002bbc:	6820      	ldr	r0, [r4, #0]
 8002bbe:	f7ff fe13 	bl	80027e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	69d9      	ldr	r1, [r3, #28]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bd6:	692a      	ldr	r2, [r5, #16]
 8002bd8:	69d9      	ldr	r1, [r3, #28]
 8002bda:	0212      	lsls	r2, r2, #8
 8002bdc:	e7ea      	b.n	8002bb4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	fffffbff 	.word	0xfffffbff

08002be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002be4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002be6:	2401      	movs	r4, #1
 8002be8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002bea:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002bec:	6a03      	ldr	r3, [r0, #32]
 8002bee:	43a3      	bics	r3, r4
 8002bf0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002bf2:	6a03      	ldr	r3, [r0, #32]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	6202      	str	r2, [r0, #32]
}
 8002bf8:	bd10      	pop	{r4, pc}
	...

08002bfc <HAL_TIM_PWM_Start>:
{
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c00:	2201      	movs	r2, #1
 8002c02:	6800      	ldr	r0, [r0, #0]
 8002c04:	f7ff ffee 	bl	8002be4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <HAL_TIM_PWM_Start+0x3c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d008      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x26>
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_TIM_PWM_Start+0x40>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d005      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x26>
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_TIM_PWM_Start+0x44>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d002      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x26>
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_TIM_PWM_Start+0x48>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d104      	bne.n	8002c2c <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c26:	0212      	lsls	r2, r2, #8
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	6819      	ldr	r1, [r3, #0]
}
 8002c30:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bd10      	pop	{r4, pc}
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800

08002c48 <HAL_TIM_PWM_Stop>:
{
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6800      	ldr	r0, [r0, #0]
 8002c50:	f7ff ffc8 	bl	8002be4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_TIM_PWM_Stop+0x60>)
 8002c58:	4914      	ldr	r1, [pc, #80]	; (8002cac <HAL_TIM_PWM_Stop+0x64>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d008      	beq.n	8002c70 <HAL_TIM_PWM_Stop+0x28>
 8002c5e:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <HAL_TIM_PWM_Stop+0x68>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d005      	beq.n	8002c70 <HAL_TIM_PWM_Stop+0x28>
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_TIM_PWM_Stop+0x6c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d002      	beq.n	8002c70 <HAL_TIM_PWM_Stop+0x28>
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_TIM_PWM_Stop+0x70>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10a      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0x3e>
    __HAL_TIM_MOE_DISABLE(htim);
 8002c70:	6a1a      	ldr	r2, [r3, #32]
 8002c72:	420a      	tst	r2, r1
 8002c74:	d107      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0x3e>
 8002c76:	6a18      	ldr	r0, [r3, #32]
 8002c78:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_TIM_PWM_Stop+0x74>)
 8002c7a:	4210      	tst	r0, r2
 8002c7c:	d103      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0x3e>
 8002c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c80:	480f      	ldr	r0, [pc, #60]	; (8002cc0 <HAL_TIM_PWM_Stop+0x78>)
 8002c82:	4002      	ands	r2, r0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	420a      	tst	r2, r1
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_PWM_Stop+0x54>
 8002c8c:	6a19      	ldr	r1, [r3, #32]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <HAL_TIM_PWM_Stop+0x74>)
 8002c90:	4211      	tst	r1, r2
 8002c92:	d103      	bne.n	8002c9c <HAL_TIM_PWM_Stop+0x54>
 8002c94:	2101      	movs	r1, #1
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	438a      	bics	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	343d      	adds	r4, #61	; 0x3d
}
 8002ca0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	7023      	strb	r3, [r4, #0]
}
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	00001111 	.word	0x00001111
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40014400 	.word	0x40014400
 8002cb8:	40014800 	.word	0x40014800
 8002cbc:	00000444 	.word	0x00000444
 8002cc0:	ffff7fff 	.word	0xffff7fff

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002cc4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002cc6:	0004      	movs	r4, r0
 8002cc8:	343c      	adds	r4, #60	; 0x3c
 8002cca:	7822      	ldrb	r2, [r4, #0]
{
 8002ccc:	0003      	movs	r3, r0
 8002cce:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002cd0:	2a01      	cmp	r2, #1
 8002cd2:	d017      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cd6:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	353d      	adds	r5, #61	; 0x3d
 8002cda:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	306e      	adds	r0, #110	; 0x6e
 8002ce0:	4382      	bics	r2, r0
 8002ce2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002ce8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002cea:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cec:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002cee:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	4382      	bics	r2, r0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cf6:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002cf8:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002d02:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d04:	bd30      	pop	{r4, r5, pc}
	...

08002d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d08:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0a:	0004      	movs	r4, r0
 8002d0c:	343c      	adds	r4, #60	; 0x3c
 8002d0e:	7823      	ldrb	r3, [r4, #0]
{
 8002d10:	0002      	movs	r2, r0
 8002d12:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d024      	beq.n	8002d62 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	0015      	movs	r5, r2
 8002d1a:	353d      	adds	r5, #61	; 0x3d
 8002d1c:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8002d20:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d22:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d24:	4003      	ands	r3, r0
 8002d26:	6888      	ldr	r0, [r1, #8]
 8002d28:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d2a:	480f      	ldr	r0, [pc, #60]	; (8002d68 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002d2c:	4003      	ands	r3, r0
 8002d2e:	6848      	ldr	r0, [r1, #4]
 8002d30:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d32:	480e      	ldr	r0, [pc, #56]	; (8002d6c <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8002d34:	4003      	ands	r3, r0
 8002d36:	6808      	ldr	r0, [r1, #0]
 8002d38:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d3a:	480d      	ldr	r0, [pc, #52]	; (8002d70 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8002d3c:	4003      	ands	r3, r0
 8002d3e:	6908      	ldr	r0, [r1, #16]
 8002d40:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d42:	480c      	ldr	r0, [pc, #48]	; (8002d74 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8002d44:	4003      	ands	r3, r0
 8002d46:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d48:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d4a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d4c:	480a      	ldr	r0, [pc, #40]	; (8002d78 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8002d4e:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d50:	480a      	ldr	r0, [pc, #40]	; (8002d7c <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d52:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d54:	4003      	ands	r3, r0
 8002d56:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002d5a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002d60:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d62:	bd30      	pop	{r4, r5, pc}
 8002d64:	fffffcff 	.word	0xfffffcff
 8002d68:	fffffbff 	.word	0xfffffbff
 8002d6c:	fffff7ff 	.word	0xfffff7ff
 8002d70:	ffffefff 	.word	0xffffefff
 8002d74:	ffffdfff 	.word	0xffffdfff
 8002d78:	ffffbfff 	.word	0xffffbfff
 8002d7c:	ffff7fff 	.word	0xffff7fff

08002d80 <HAL_TIMEx_CommutationCallback>:
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d82:	4770      	bx	lr

08002d84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	4906      	ldr	r1, [pc, #24]	; (8002da0 <UART_EndRxTransfer+0x1c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	3123      	adds	r1, #35	; 0x23
 8002d94:	31ff      	adds	r1, #255	; 0xff
 8002d96:	438a      	bics	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	7003      	strb	r3, [r0, #0]
}
 8002d9e:	4770      	bx	lr
 8002da0:	fffffedf 	.word	0xfffffedf

08002da4 <HAL_UART_Transmit_IT>:
{
 8002da4:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002da6:	0006      	movs	r6, r0
 8002da8:	3669      	adds	r6, #105	; 0x69
 8002daa:	7833      	ldrb	r3, [r6, #0]
{
 8002dac:	0004      	movs	r4, r0
    return HAL_BUSY;
 8002dae:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d124      	bne.n	8002dfe <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8002db4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002db6:	2900      	cmp	r1, #0
 8002db8:	d021      	beq.n	8002dfe <HAL_UART_Transmit_IT+0x5a>
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d01f      	beq.n	8002dfe <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	68a5      	ldr	r5, [r4, #8]
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	429d      	cmp	r5, r3
 8002dc6:	d104      	bne.n	8002dd2 <HAL_UART_Transmit_IT+0x2e>
 8002dc8:	6923      	ldr	r3, [r4, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8002dce:	4201      	tst	r1, r0
 8002dd0:	d115      	bne.n	8002dfe <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8002dd2:	0025      	movs	r5, r4
 8002dd4:	3568      	adds	r5, #104	; 0x68
 8002dd6:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 8002dd8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d00f      	beq.n	8002dfe <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 8002dde:	0023      	movs	r3, r4
 8002de0:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8002de2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 8002de4:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 8002de6:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dea:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002dec:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002df2:	6808      	ldr	r0, [r1, #0]
 8002df4:	325f      	adds	r2, #95	; 0x5f
 8002df6:	4302      	orrs	r2, r0
    return HAL_OK;
 8002df8:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 8002dfa:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002dfc:	600a      	str	r2, [r1, #0]
}
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}

08002e00 <HAL_UART_Receive_IT>:
{
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e02:	0006      	movs	r6, r0
 8002e04:	366a      	adds	r6, #106	; 0x6a
 8002e06:	7834      	ldrb	r4, [r6, #0]
{
 8002e08:	0003      	movs	r3, r0
    return HAL_BUSY;
 8002e0a:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e0c:	2c20      	cmp	r4, #32
 8002e0e:	d135      	bne.n	8002e7c <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 8002e10:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002e12:	2900      	cmp	r1, #0
 8002e14:	d032      	beq.n	8002e7c <HAL_UART_Receive_IT+0x7c>
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	d030      	beq.n	8002e7c <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1a:	2480      	movs	r4, #128	; 0x80
 8002e1c:	689d      	ldr	r5, [r3, #8]
 8002e1e:	0164      	lsls	r4, r4, #5
 8002e20:	42a5      	cmp	r5, r4
 8002e22:	d104      	bne.n	8002e2e <HAL_UART_Receive_IT+0x2e>
 8002e24:	691c      	ldr	r4, [r3, #16]
 8002e26:	2c00      	cmp	r4, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8002e2a:	4201      	tst	r1, r0
 8002e2c:	d126      	bne.n	8002e7c <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 8002e2e:	001c      	movs	r4, r3
 8002e30:	3468      	adds	r4, #104	; 0x68
 8002e32:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8002e34:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002e36:	2f01      	cmp	r7, #1
 8002e38:	d020      	beq.n	8002e7c <HAL_UART_Receive_IT+0x7c>
 8002e3a:	3801      	subs	r0, #1
 8002e3c:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 8002e3e:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002e40:	0019      	movs	r1, r3
 8002e42:	3158      	adds	r1, #88	; 0x58
 8002e44:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8002e46:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	0152      	lsls	r2, r2, #5
 8002e4c:	4295      	cmp	r5, r2
 8002e4e:	d118      	bne.n	8002e82 <HAL_UART_Receive_IT+0x82>
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d113      	bne.n	8002e7e <HAL_UART_Receive_IT+0x7e>
 8002e56:	490e      	ldr	r1, [pc, #56]	; (8002e90 <HAL_UART_Receive_IT+0x90>)
 8002e58:	001a      	movs	r2, r3
 8002e5a:	325c      	adds	r2, #92	; 0x5c
 8002e5c:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e60:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e62:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e66:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	3a21      	subs	r2, #33	; 0x21
 8002e6c:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8002e6e:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002e72:	2290      	movs	r2, #144	; 0x90
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	0052      	lsls	r2, r2, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8002e7e:	21ff      	movs	r1, #255	; 0xff
 8002e80:	e7ea      	b.n	8002e58 <HAL_UART_Receive_IT+0x58>
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	d1eb      	bne.n	8002e5e <HAL_UART_Receive_IT+0x5e>
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d0f8      	beq.n	8002e7e <HAL_UART_Receive_IT+0x7e>
 8002e8c:	217f      	movs	r1, #127	; 0x7f
 8002e8e:	e7e3      	b.n	8002e58 <HAL_UART_Receive_IT+0x58>
 8002e90:	000001ff 	.word	0x000001ff

08002e94 <HAL_UART_TxCpltCallback>:
 8002e94:	4770      	bx	lr

08002e96 <HAL_UART_ErrorCallback>:
 8002e96:	4770      	bx	lr

08002e98 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002e98:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	0002      	movs	r2, r0
{
 8002e9e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002ea0:	325a      	adds	r2, #90	; 0x5a
 8002ea2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002ea4:	3a08      	subs	r2, #8
 8002ea6:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8002ea8:	f7ff fff5 	bl	8002e96 <HAL_UART_ErrorCallback>
}
 8002eac:	bd10      	pop	{r4, pc}
	...

08002eb0 <UART_SetConfig>:
{
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002eb4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb6:	69c2      	ldr	r2, [r0, #28]
 8002eb8:	6883      	ldr	r3, [r0, #8]
 8002eba:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ebc:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ebe:	4303      	orrs	r3, r0
 8002ec0:	6960      	ldr	r0, [r4, #20]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec2:	4e3f      	ldr	r6, [pc, #252]	; (8002fc0 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002ec6:	483f      	ldr	r0, [pc, #252]	; (8002fc4 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002eca:	4001      	ands	r1, r0
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed0:	686b      	ldr	r3, [r5, #4]
 8002ed2:	493d      	ldr	r1, [pc, #244]	; (8002fc8 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ed4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	68e1      	ldr	r1, [r4, #12]
 8002eda:	430b      	orrs	r3, r1
 8002edc:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ede:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ee0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ee2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ee4:	4839      	ldr	r0, [pc, #228]	; (8002fcc <UART_SetConfig+0x11c>)
 8002ee6:	4001      	ands	r1, r0
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60ab      	str	r3, [r5, #8]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef0:	42b5      	cmp	r5, r6
 8002ef2:	d110      	bne.n	8002f16 <UART_SetConfig+0x66>
 8002ef4:	2003      	movs	r0, #3
 8002ef6:	4936      	ldr	r1, [pc, #216]	; (8002fd0 <UART_SetConfig+0x120>)
 8002ef8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002efa:	4001      	ands	r1, r0
 8002efc:	4835      	ldr	r0, [pc, #212]	; (8002fd4 <UART_SetConfig+0x124>)
 8002efe:	5c40      	ldrb	r0, [r0, r1]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d013      	beq.n	8002f2c <UART_SetConfig+0x7c>
    switch (clocksource)
 8002f04:	2808      	cmp	r0, #8
 8002f06:	d858      	bhi.n	8002fba <UART_SetConfig+0x10a>
 8002f08:	f7fd f908 	bl	800011c <__gnu_thumb1_case_uqi>
 8002f0c:	57425737 	.word	0x57425737
 8002f10:	5757574b 	.word	0x5757574b
 8002f14:	50          	.byte	0x50
 8002f15:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f16:	4930      	ldr	r1, [pc, #192]	; (8002fd8 <UART_SetConfig+0x128>)
 8002f18:	428d      	cmp	r5, r1
 8002f1a:	d14c      	bne.n	8002fb6 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d12c      	bne.n	8002f7a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f20:	f7ff fb46 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f24:	6863      	ldr	r3, [r4, #4]
 8002f26:	0040      	lsls	r0, r0, #1
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	e00b      	b.n	8002f44 <UART_SetConfig+0x94>
    switch (clocksource)
 8002f2c:	2808      	cmp	r0, #8
 8002f2e:	d821      	bhi.n	8002f74 <UART_SetConfig+0xc4>
 8002f30:	f7fd f8ea 	bl	8000108 <__gnu_thumb1_case_sqi>
 8002f34:	200520f6 	.word	0x200520f6
 8002f38:	20202018 	.word	0x20202018
 8002f3c:	1b          	.byte	0x1b
 8002f3d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f3e:	6863      	ldr	r3, [r4, #4]
 8002f40:	0858      	lsrs	r0, r3, #1
 8002f42:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f44:	18c0      	adds	r0, r0, r3
 8002f46:	6861      	ldr	r1, [r4, #4]
 8002f48:	f7fd f8f2 	bl	8000130 <__udivsi3>
 8002f4c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002f50:	220f      	movs	r2, #15
 8002f52:	0019      	movs	r1, r3
 8002f54:	4391      	bics	r1, r2
 8002f56:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f58:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8002f5a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f5c:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60cb      	str	r3, [r1, #12]
}
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f64:	f7ff fa56 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8002f68:	e7dc      	b.n	8002f24 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	0858      	lsrs	r0, r3, #1
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	025b      	lsls	r3, r3, #9
 8002f72:	e7e7      	b.n	8002f44 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e7ea      	b.n	8002f50 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f7a:	f7ff fb19 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8002f7e:	6861      	ldr	r1, [r4, #4]
 8002f80:	084b      	lsrs	r3, r1, #1
 8002f82:	1818      	adds	r0, r3, r0
 8002f84:	f7fd f8d4 	bl	8000130 <__udivsi3>
 8002f88:	b280      	uxth	r0, r0
 8002f8a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8c:	2000      	movs	r0, #0
        break;
 8002f8e:	e7e8      	b.n	8002f62 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f90:	6861      	ldr	r1, [r4, #4]
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <UART_SetConfig+0x130>)
 8002f94:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f96:	18c0      	adds	r0, r0, r3
 8002f98:	f7fd f8ca 	bl	8000130 <__udivsi3>
 8002f9c:	b280      	uxth	r0, r0
 8002f9e:	60f0      	str	r0, [r6, #12]
 8002fa0:	e7f4      	b.n	8002f8c <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fa2:	f7ff fa37 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8002fa6:	6861      	ldr	r1, [r4, #4]
 8002fa8:	084b      	lsrs	r3, r1, #1
 8002faa:	e7f4      	b.n	8002f96 <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	6861      	ldr	r1, [r4, #4]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	0848      	lsrs	r0, r1, #1
 8002fb4:	e7ef      	b.n	8002f96 <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d0dc      	beq.n	8002f74 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
  return ret;
 8002fbc:	e7d1      	b.n	8002f62 <UART_SetConfig+0xb2>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	ffff69f3 	.word	0xffff69f3
 8002fc8:	ffffcfff 	.word	0xffffcfff
 8002fcc:	fffff4ff 	.word	0xfffff4ff
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08003b84 	.word	0x08003b84
 8002fd8:	40004400 	.word	0x40004400
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	007a1200 	.word	0x007a1200

08002fe4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002fe6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe8:	07da      	lsls	r2, r3, #31
 8002fea:	d506      	bpl.n	8002ffa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fec:	6801      	ldr	r1, [r0, #0]
 8002fee:	4c28      	ldr	r4, [pc, #160]	; (8003090 <UART_AdvFeatureConfig+0xac>)
 8002ff0:	684a      	ldr	r2, [r1, #4]
 8002ff2:	4022      	ands	r2, r4
 8002ff4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ff6:	4322      	orrs	r2, r4
 8002ff8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ffa:	079a      	lsls	r2, r3, #30
 8002ffc:	d506      	bpl.n	800300c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ffe:	6801      	ldr	r1, [r0, #0]
 8003000:	4c24      	ldr	r4, [pc, #144]	; (8003094 <UART_AdvFeatureConfig+0xb0>)
 8003002:	684a      	ldr	r2, [r1, #4]
 8003004:	4022      	ands	r2, r4
 8003006:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003008:	4322      	orrs	r2, r4
 800300a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800300c:	075a      	lsls	r2, r3, #29
 800300e:	d506      	bpl.n	800301e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003010:	6801      	ldr	r1, [r0, #0]
 8003012:	4c21      	ldr	r4, [pc, #132]	; (8003098 <UART_AdvFeatureConfig+0xb4>)
 8003014:	684a      	ldr	r2, [r1, #4]
 8003016:	4022      	ands	r2, r4
 8003018:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800301a:	4322      	orrs	r2, r4
 800301c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800301e:	071a      	lsls	r2, r3, #28
 8003020:	d506      	bpl.n	8003030 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003022:	6801      	ldr	r1, [r0, #0]
 8003024:	4c1d      	ldr	r4, [pc, #116]	; (800309c <UART_AdvFeatureConfig+0xb8>)
 8003026:	684a      	ldr	r2, [r1, #4]
 8003028:	4022      	ands	r2, r4
 800302a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800302c:	4322      	orrs	r2, r4
 800302e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003030:	06da      	lsls	r2, r3, #27
 8003032:	d506      	bpl.n	8003042 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003034:	6801      	ldr	r1, [r0, #0]
 8003036:	4c1a      	ldr	r4, [pc, #104]	; (80030a0 <UART_AdvFeatureConfig+0xbc>)
 8003038:	688a      	ldr	r2, [r1, #8]
 800303a:	4022      	ands	r2, r4
 800303c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800303e:	4322      	orrs	r2, r4
 8003040:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003042:	069a      	lsls	r2, r3, #26
 8003044:	d506      	bpl.n	8003054 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003046:	6801      	ldr	r1, [r0, #0]
 8003048:	4c16      	ldr	r4, [pc, #88]	; (80030a4 <UART_AdvFeatureConfig+0xc0>)
 800304a:	688a      	ldr	r2, [r1, #8]
 800304c:	4022      	ands	r2, r4
 800304e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003050:	4322      	orrs	r2, r4
 8003052:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003054:	065a      	lsls	r2, r3, #25
 8003056:	d510      	bpl.n	800307a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003058:	6801      	ldr	r1, [r0, #0]
 800305a:	4d13      	ldr	r5, [pc, #76]	; (80030a8 <UART_AdvFeatureConfig+0xc4>)
 800305c:	684a      	ldr	r2, [r1, #4]
 800305e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003060:	402a      	ands	r2, r5
 8003062:	4322      	orrs	r2, r4
 8003064:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	0352      	lsls	r2, r2, #13
 800306a:	4294      	cmp	r4, r2
 800306c:	d105      	bne.n	800307a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800306e:	684a      	ldr	r2, [r1, #4]
 8003070:	4c0e      	ldr	r4, [pc, #56]	; (80030ac <UART_AdvFeatureConfig+0xc8>)
 8003072:	4022      	ands	r2, r4
 8003074:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003076:	4322      	orrs	r2, r4
 8003078:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	d506      	bpl.n	800308c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307e:	6802      	ldr	r2, [r0, #0]
 8003080:	490b      	ldr	r1, [pc, #44]	; (80030b0 <UART_AdvFeatureConfig+0xcc>)
 8003082:	6853      	ldr	r3, [r2, #4]
 8003084:	400b      	ands	r3, r1
 8003086:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003088:	430b      	orrs	r3, r1
 800308a:	6053      	str	r3, [r2, #4]
}
 800308c:	bd30      	pop	{r4, r5, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	fffdffff 	.word	0xfffdffff
 8003094:	fffeffff 	.word	0xfffeffff
 8003098:	fffbffff 	.word	0xfffbffff
 800309c:	ffff7fff 	.word	0xffff7fff
 80030a0:	ffffefff 	.word	0xffffefff
 80030a4:	ffffdfff 	.word	0xffffdfff
 80030a8:	ffefffff 	.word	0xffefffff
 80030ac:	ff9fffff 	.word	0xff9fffff
 80030b0:	fff7ffff 	.word	0xfff7ffff

080030b4 <HAL_UART_Init>:
{
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
}
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80030be:	0005      	movs	r5, r0
 80030c0:	3569      	adds	r5, #105	; 0x69
 80030c2:	782b      	ldrb	r3, [r5, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d104      	bne.n	80030d4 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80030ca:	0002      	movs	r2, r0
 80030cc:	3268      	adds	r2, #104	; 0x68
 80030ce:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80030d0:	f000 fc56 	bl	8003980 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030d6:	2101      	movs	r1, #1
 80030d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030da:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80030dc:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030de:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80030e0:	438b      	bics	r3, r1
 80030e2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030e4:	f7ff fee4 	bl	8002eb0 <UART_SetConfig>
 80030e8:	2801      	cmp	r0, #1
 80030ea:	d0e6      	beq.n	80030ba <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80030f2:	0020      	movs	r0, r4
 80030f4:	f7ff ff76 	bl	8002fe4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	490b      	ldr	r1, [pc, #44]	; (8003128 <HAL_UART_Init+0x74>)
 80030fc:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003100:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003102:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003104:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	438a      	bics	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800310c:	2201      	movs	r2, #1
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8003116:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800311a:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 800311c:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800311e:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8003122:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003124:	e7ca      	b.n	80030bc <HAL_UART_Init+0x8>
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	fffff7ff 	.word	0xfffff7ff

0800312c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800312c:	0003      	movs	r3, r0
{
 800312e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003130:	3369      	adds	r3, #105	; 0x69
 8003132:	781b      	ldrb	r3, [r3, #0]
{
 8003134:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003136:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003138:	2b21      	cmp	r3, #33	; 0x21
 800313a:	d10f      	bne.n	800315c <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 800313c:	0014      	movs	r4, r2
 800313e:	3452      	adds	r4, #82	; 0x52
 8003140:	8823      	ldrh	r3, [r4, #0]
 8003142:	6811      	ldr	r1, [r2, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800314a:	680a      	ldr	r2, [r1, #0]
 800314c:	307e      	adds	r0, #126	; 0x7e
 800314e:	4382      	bics	r2, r0
 8003150:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	4302      	orrs	r2, r0
 8003158:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 800315a:	2000      	movs	r0, #0
  }
}
 800315c:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315e:	2080      	movs	r0, #128	; 0x80
 8003160:	6895      	ldr	r5, [r2, #8]
 8003162:	0140      	lsls	r0, r0, #5
 8003164:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003166:	4285      	cmp	r5, r0
 8003168:	d10d      	bne.n	8003186 <UART_Transmit_IT+0x5a>
 800316a:	6910      	ldr	r0, [r2, #16]
 800316c:	2800      	cmp	r0, #0
 800316e:	d10a      	bne.n	8003186 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003170:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8003172:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003174:	05c0      	lsls	r0, r0, #23
 8003176:	0dc0      	lsrs	r0, r0, #23
 8003178:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800317a:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 800317c:	8823      	ldrh	r3, [r4, #0]
 800317e:	3b01      	subs	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	8023      	strh	r3, [r4, #0]
 8003184:	e7e9      	b.n	800315a <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003186:	1c58      	adds	r0, r3, #1
 8003188:	64d0      	str	r0, [r2, #76]	; 0x4c
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	850b      	strh	r3, [r1, #40]	; 0x28
 800318e:	e7f5      	b.n	800317c <UART_Transmit_IT+0x50>

08003190 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003190:	2140      	movs	r1, #64	; 0x40
 8003192:	6802      	ldr	r2, [r0, #0]
{
 8003194:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	438b      	bics	r3, r1
 800319a:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800319c:	0003      	movs	r3, r0
 800319e:	2220      	movs	r2, #32
 80031a0:	3369      	adds	r3, #105	; 0x69
 80031a2:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 80031a4:	f7ff fe76 	bl	8002e94 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	bd10      	pop	{r4, pc}

080031ac <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ac:	0002      	movs	r2, r0
{
 80031ae:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b0:	326a      	adds	r2, #106	; 0x6a
 80031b2:	7811      	ldrb	r1, [r2, #0]
 80031b4:	6803      	ldr	r3, [r0, #0]
 80031b6:	2922      	cmp	r1, #34	; 0x22
 80031b8:	d12d      	bne.n	8003216 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80031ba:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031bc:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80031be:	315c      	adds	r1, #92	; 0x5c
 80031c0:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031c2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	0164      	lsls	r4, r4, #5
 80031c6:	4029      	ands	r1, r5
 80031c8:	6885      	ldr	r5, [r0, #8]
 80031ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80031cc:	42a5      	cmp	r5, r4
 80031ce:	d11e      	bne.n	800320e <UART_Receive_IT+0x62>
 80031d0:	6904      	ldr	r4, [r0, #16]
 80031d2:	2c00      	cmp	r4, #0
 80031d4:	d11b      	bne.n	800320e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80031d6:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80031d8:	3302      	adds	r3, #2
 80031da:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80031dc:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80031de:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80031e0:	315a      	adds	r1, #90	; 0x5a
 80031e2:	880b      	ldrh	r3, [r1, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	800b      	strh	r3, [r1, #0]
 80031ea:	42a3      	cmp	r3, r4
 80031ec:	d10d      	bne.n	800320a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ee:	6803      	ldr	r3, [r0, #0]
 80031f0:	4d0c      	ldr	r5, [pc, #48]	; (8003224 <UART_Receive_IT+0x78>)
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	4029      	ands	r1, r5
 80031f6:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	3523      	adds	r5, #35	; 0x23
 80031fc:	35ff      	adds	r5, #255	; 0xff
 80031fe:	43a9      	bics	r1, r5
 8003200:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003202:	2320      	movs	r3, #32
 8003204:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8003206:	f7fe facb 	bl	80017a0 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800320a:	0020      	movs	r0, r4
 800320c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800320e:	1c5c      	adds	r4, r3, #1
 8003210:	6544      	str	r4, [r0, #84]	; 0x54
 8003212:	7019      	strb	r1, [r3, #0]
 8003214:	e7e2      	b.n	80031dc <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003216:	2208      	movs	r2, #8
 8003218:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800321a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800321c:	430a      	orrs	r2, r1
 800321e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8003220:	e7f3      	b.n	800320a <UART_Receive_IT+0x5e>
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	fffffedf 	.word	0xfffffedf

08003228 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003228:	220f      	movs	r2, #15
{
 800322a:	b570      	push	{r4, r5, r6, lr}
 800322c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800322e:	6800      	ldr	r0, [r0, #0]
 8003230:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003232:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003234:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8003236:	d108      	bne.n	800324a <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003238:	2520      	movs	r5, #32
 800323a:	422b      	tst	r3, r5
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0x22>
 800323e:	4229      	tst	r1, r5
 8003240:	d003      	beq.n	800324a <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8003242:	0020      	movs	r0, r4
 8003244:	f7ff ffb2 	bl	80031ac <UART_Receive_IT>
}
 8003248:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 800324a:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 800324c:	2a00      	cmp	r2, #0
 800324e:	d060      	beq.n	8003312 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003250:	2201      	movs	r2, #1
 8003252:	4015      	ands	r5, r2
 8003254:	d103      	bne.n	800325e <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003256:	2690      	movs	r6, #144	; 0x90
 8003258:	0076      	lsls	r6, r6, #1
 800325a:	4231      	tst	r1, r6
 800325c:	d059      	beq.n	8003312 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800325e:	4213      	tst	r3, r2
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0x46>
 8003262:	05ce      	lsls	r6, r1, #23
 8003264:	d503      	bpl.n	800326e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003266:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003268:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800326a:	4332      	orrs	r2, r6
 800326c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	2202      	movs	r2, #2
 8003270:	4213      	tst	r3, r2
 8003272:	d006      	beq.n	8003282 <HAL_UART_IRQHandler+0x5a>
 8003274:	2d00      	cmp	r5, #0
 8003276:	d004      	beq.n	8003282 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003278:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800327a:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800327c:	1892      	adds	r2, r2, r2
 800327e:	4332      	orrs	r2, r6
 8003280:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003282:	2204      	movs	r2, #4
 8003284:	4213      	tst	r3, r2
 8003286:	d006      	beq.n	8003296 <HAL_UART_IRQHandler+0x6e>
 8003288:	2d00      	cmp	r5, #0
 800328a:	d004      	beq.n	8003296 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800328c:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800328e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003290:	3a02      	subs	r2, #2
 8003292:	4332      	orrs	r2, r6
 8003294:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003296:	071a      	lsls	r2, r3, #28
 8003298:	d508      	bpl.n	80032ac <HAL_UART_IRQHandler+0x84>
 800329a:	068a      	lsls	r2, r1, #26
 800329c:	d401      	bmi.n	80032a2 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800329e:	2d00      	cmp	r5, #0
 80032a0:	d004      	beq.n	80032ac <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80032a2:	2208      	movs	r2, #8
 80032a4:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80032a8:	4302      	orrs	r2, r0
 80032aa:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80032ae:	2a00      	cmp	r2, #0
 80032b0:	d0ca      	beq.n	8003248 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b2:	2220      	movs	r2, #32
 80032b4:	4213      	tst	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_UART_IRQHandler+0x9a>
 80032b8:	4211      	tst	r1, r2
 80032ba:	d002      	beq.n	80032c2 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 80032bc:	0020      	movs	r0, r4
 80032be:	f7ff ff75 	bl	80031ac <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80032c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80032c4:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80032c6:	071b      	lsls	r3, r3, #28
 80032c8:	d404      	bmi.n	80032d4 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	689d      	ldr	r5, [r3, #8]
 80032ce:	2340      	movs	r3, #64	; 0x40
 80032d0:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80032d2:	d01a      	beq.n	800330a <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 80032d4:	f7ff fd56 	bl	8002d84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	2140      	movs	r1, #64	; 0x40
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	420a      	tst	r2, r1
 80032e0:	d00f      	beq.n	8003302 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e2:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80032e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	438a      	bics	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d009      	beq.n	8003302 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_UART_IRQHandler+0x114>)
 80032f0:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f2:	f7fe fdd4 	bl	8001e9e <HAL_DMA_Abort_IT>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d0a6      	beq.n	8003248 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80032fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032fe:	4798      	blx	r3
 8003300:	e7a2      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003302:	0020      	movs	r0, r4
 8003304:	f7ff fdc7 	bl	8002e96 <HAL_UART_ErrorCallback>
 8003308:	e79e      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 800330a:	f7ff fdc4 	bl	8002e96 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003310:	e79a      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	4213      	tst	r3, r2
 8003316:	d005      	beq.n	8003324 <HAL_UART_IRQHandler+0xfc>
 8003318:	4211      	tst	r1, r2
 800331a:	d003      	beq.n	8003324 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 800331c:	0020      	movs	r0, r4
 800331e:	f7ff ff05 	bl	800312c <UART_Transmit_IT>
    return;
 8003322:	e791      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	4213      	tst	r3, r2
 8003328:	d100      	bne.n	800332c <HAL_UART_IRQHandler+0x104>
 800332a:	e78d      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
 800332c:	4211      	tst	r1, r2
 800332e:	d100      	bne.n	8003332 <HAL_UART_IRQHandler+0x10a>
 8003330:	e78a      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8003332:	0020      	movs	r0, r4
 8003334:	f7ff ff2c 	bl	8003190 <UART_EndTransmit_IT>
    return;
 8003338:	e786      	b.n	8003248 <HAL_UART_IRQHandler+0x20>
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	08002e99 	.word	0x08002e99

08003340 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 8003342:	4c31      	ldr	r4, [pc, #196]	; (8003408 <MX_ADC_Init+0xc8>)
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <MX_ADC_Init+0xcc>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003346:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8003348:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800334a:	2380      	movs	r3, #128	; 0x80
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800334c:	6161      	str	r1, [r4, #20]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800334e:	061b      	lsls	r3, r3, #24
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003350:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003352:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003354:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003356:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003358:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800335a:	0020      	movs	r0, r4
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800335c:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800335e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003360:	6122      	str	r2, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003362:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003364:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003366:	6223      	str	r3, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003368:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800336a:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800336c:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800336e:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003370:	6362      	str	r2, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003372:	f7fe fb9d 	bl	8001ab0 <HAL_ADC_Init>
 8003376:	2800      	cmp	r0, #0
 8003378:	d003      	beq.n	8003382 <MX_ADC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800337a:	214a      	movs	r1, #74	; 0x4a
 800337c:	4824      	ldr	r0, [pc, #144]	; (8003410 <MX_ADC_Init+0xd0>)
 800337e:	f000 f93c 	bl	80035fa <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8003382:	2300      	movs	r3, #0
 8003384:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	015b      	lsls	r3, r3, #5
 800338a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800338c:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800338e:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003390:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003392:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003394:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003396:	f7fe fca5 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 800339a:	2800      	cmp	r0, #0
 800339c:	d003      	beq.n	80033a6 <MX_ADC_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800339e:	2154      	movs	r1, #84	; 0x54
 80033a0:	481b      	ldr	r0, [pc, #108]	; (8003410 <MX_ADC_Init+0xd0>)
 80033a2:	f000 f92a 	bl	80035fa <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80033a6:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033a8:	a901      	add	r1, sp, #4
 80033aa:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80033ac:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033ae:	f7fe fc99 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d003      	beq.n	80033be <MX_ADC_Init+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033b6:	215c      	movs	r1, #92	; 0x5c
 80033b8:	4815      	ldr	r0, [pc, #84]	; (8003410 <MX_ADC_Init+0xd0>)
 80033ba:	f000 f91e 	bl	80035fa <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 80033be:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033c0:	a901      	add	r1, sp, #4
 80033c2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80033c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033c6:	f7fe fc8d 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d003      	beq.n	80033d6 <MX_ADC_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033ce:	2164      	movs	r1, #100	; 0x64
 80033d0:	480f      	ldr	r0, [pc, #60]	; (8003410 <MX_ADC_Init+0xd0>)
 80033d2:	f000 f912 	bl	80035fa <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80033d6:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033d8:	a901      	add	r1, sp, #4
 80033da:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80033dc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033de:	f7fe fc81 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d003      	beq.n	80033ee <MX_ADC_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033e6:	216c      	movs	r1, #108	; 0x6c
 80033e8:	4809      	ldr	r0, [pc, #36]	; (8003410 <MX_ADC_Init+0xd0>)
 80033ea:	f000 f906 	bl	80035fa <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80033ee:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033f0:	a901      	add	r1, sp, #4
 80033f2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80033f4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033f6:	f7fe fc75 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d003      	beq.n	8003406 <MX_ADC_Init+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033fe:	2174      	movs	r1, #116	; 0x74
 8003400:	4803      	ldr	r0, [pc, #12]	; (8003410 <MX_ADC_Init+0xd0>)
 8003402:	f000 f8fa 	bl	80035fa <_Error_Handler>
  }

}
 8003406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8003408:	20000080 	.word	0x20000080
 800340c:	40012400 	.word	0x40012400
 8003410:	08003b88 	.word	0x08003b88

08003414 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003414:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_ADC_MspInit+0x4c>)
 8003418:	6802      	ldr	r2, [r0, #0]
{
 800341a:	b086      	sub	sp, #24
  if(adcHandle->Instance==ADC1)
 800341c:	429a      	cmp	r2, r3
 800341e:	d11c      	bne.n	800345a <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003420:	2080      	movs	r0, #128	; 0x80
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <HAL_ADC_MspInit+0x50>)
 8003424:	0080      	lsls	r0, r0, #2
 8003426:	6991      	ldr	r1, [r2, #24]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
                          |ADCMainBatVoltage_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800342a:	4301      	orrs	r1, r0
 800342c:	6191      	str	r1, [r2, #24]
 800342e:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003432:	4003      	ands	r3, r0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003438:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
 800343a:	231f      	movs	r3, #31
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = ADCMotorCurrent_Pin|ADCServoCurrent_Pin|ADCSystemCurrent_Pin|ADCSecBatVoltage_Pin 
 800343e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003440:	3b1c      	subs	r3, #28
 8003442:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	f7fe fd4d 	bl	8001ee4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800344a:	200c      	movs	r0, #12
 800344c:	0022      	movs	r2, r4
 800344e:	0021      	movs	r1, r4
 8003450:	f7fe fcbe 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003454:	200c      	movs	r0, #12
 8003456:	f7fe fceb 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800345a:	b006      	add	sp, #24
 800345c:	bd10      	pop	{r4, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	40012400 	.word	0x40012400
 8003464:	40021000 	.word	0x40021000

08003468 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003468:	2080      	movs	r0, #128	; 0x80
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <MX_GPIO_Init+0xdc>)
 800346c:	0300      	lsls	r0, r0, #12
 800346e:	6959      	ldr	r1, [r3, #20]
{
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003472:	4301      	orrs	r1, r0
 8003474:	6159      	str	r1, [r3, #20]
 8003476:	695a      	ldr	r2, [r3, #20]
{
 8003478:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800347a:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800347c:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800347e:	9201      	str	r2, [sp, #4]
 8003480:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003482:	6959      	ldr	r1, [r3, #20]
 8003484:	03c0      	lsls	r0, r0, #15
 8003486:	4301      	orrs	r1, r0
 8003488:	6159      	str	r1, [r3, #20]
 800348a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 800348c:	2790      	movs	r7, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800348e:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003490:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003492:	9202      	str	r2, [sp, #8]
 8003494:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	6959      	ldr	r1, [r3, #20]
 8003498:	0280      	lsls	r0, r0, #10
 800349a:	4301      	orrs	r1, r0
 800349c:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800349e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	4002      	ands	r2, r0
 80034a6:	9203      	str	r2, [sp, #12]
 80034a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 80034ac:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ae:	430a      	orrs	r2, r1
 80034b0:	615a      	str	r2, [r3, #20]
 80034b2:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
 80034b4:	4e24      	ldr	r6, [pc, #144]	; (8003548 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b6:	400b      	ands	r3, r1
 80034b8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 80034ba:	0038      	movs	r0, r7
 80034bc:	2200      	movs	r2, #0
 80034be:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BurstOFF6V_Pin|BurstOFF5V_Pin, GPIO_PIN_RESET);
 80034c2:	f7fe fdbf 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDProblem_GPIO_Port, LEDProblem_Pin, GPIO_PIN_RESET);
 80034c6:	2200      	movs	r2, #0
 80034c8:	0030      	movs	r0, r6
 80034ca:	2104      	movs	r1, #4
 80034cc:	f7fe fdba 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034d0:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d4:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034d6:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d8:	a905      	add	r1, sp, #20
 80034da:	481c      	ldr	r0, [pc, #112]	; (800354c <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034de:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e2:	f7fe fcff 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e8:	a905      	add	r1, sp, #20
 80034ea:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 80034ec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ee:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f7fe fcf7 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BurstOFF6V_Pin|BurstOFF5V_Pin;
 80034f6:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = BurstOFF6V_Pin|BurstOFF5V_Pin;
 80034fa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fc:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fe:	3bbf      	subs	r3, #191	; 0xbf
 8003500:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f7fe fced 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDProblem_Pin;
 800350a:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 800350c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LEDProblem_Pin;
 800350e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 8003510:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003512:	3b03      	subs	r3, #3
 8003514:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LEDProblem_GPIO_Port, &GPIO_InitStruct);
 800351a:	f7fe fce3 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <MX_GPIO_Init+0xec>)
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003520:	a905      	add	r1, sp, #20
 8003522:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8003524:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003526:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f7fe fcdb 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800352e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003530:	a905      	add	r1, sp, #20
 8003532:	4809      	ldr	r0, [pc, #36]	; (8003558 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003534:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003536:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800353a:	f7fe fcd3 	bl	8001ee4 <HAL_GPIO_Init>

}
 800353e:	b00b      	add	sp, #44	; 0x2c
 8003540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	40021000 	.word	0x40021000
 8003548:	48000400 	.word	0x48000400
 800354c:	48000800 	.word	0x48000800
 8003550:	00009020 	.word	0x00009020
 8003554:	0000ff38 	.word	0x0000ff38
 8003558:	48001400 	.word	0x48001400

0800355c <SystemClock_Config>:
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800355c:	2380      	movs	r3, #128	; 0x80
{
 800355e:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003560:	025b      	lsls	r3, r3, #9
{
 8003562:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003564:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003566:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003568:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800356a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800356c:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800356e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003570:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003572:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003574:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003576:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003578:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800357a:	f7fe fd69 	bl	8002050 <HAL_RCC_OscConfig>
 800357e:	2800      	cmp	r0, #0
 8003580:	d000      	beq.n	8003584 <SystemClock_Config+0x28>
 8003582:	e7fe      	b.n	8003582 <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003584:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003586:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003588:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800358a:	0021      	movs	r1, r4
 800358c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800358e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003590:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003592:	f7fe ff71 	bl	8002478 <HAL_RCC_ClockConfig>
 8003596:	2800      	cmp	r0, #0
 8003598:	d000      	beq.n	800359c <SystemClock_Config+0x40>
 800359a:	e7fe      	b.n	800359a <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800359c:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800359e:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035a0:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a2:	f7ff f815 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 80035a6:	1e04      	subs	r4, r0, #0
 80035a8:	d000      	beq.n	80035ac <SystemClock_Config+0x50>
 80035aa:	e7fe      	b.n	80035aa <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80035ac:	f7fe fffa 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80035b0:	21fa      	movs	r1, #250	; 0xfa
 80035b2:	0089      	lsls	r1, r1, #2
 80035b4:	f7fc fdbc 	bl	8000130 <__udivsi3>
 80035b8:	f7fe fc44 	bl	8001e44 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035bc:	2004      	movs	r0, #4
 80035be:	f7fe fc5b 	bl	8001e78 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035c2:	2001      	movs	r0, #1
 80035c4:	0022      	movs	r2, r4
 80035c6:	0021      	movs	r1, r4
 80035c8:	4240      	negs	r0, r0
 80035ca:	f7fe fc01 	bl	8001dd0 <HAL_NVIC_SetPriority>
}
 80035ce:	b015      	add	sp, #84	; 0x54
 80035d0:	bd30      	pop	{r4, r5, pc}

080035d2 <main>:
{
 80035d2:	b510      	push	{r4, lr}
  HAL_Init();
 80035d4:	f7fe fa4e 	bl	8001a74 <HAL_Init>
  SystemClock_Config();
 80035d8:	f7ff ffc0 	bl	800355c <SystemClock_Config>
  MX_GPIO_Init();
 80035dc:	f7ff ff44 	bl	8003468 <MX_GPIO_Init>
  MX_TIM1_Init();
 80035e0:	f000 f8dc 	bl	800379c <MX_TIM1_Init>
  MX_ADC_Init();
 80035e4:	f7ff feac 	bl	8003340 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80035e8:	f000 f9aa 	bl	8003940 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80035ec:	f000 f958 	bl	80038a0 <MX_TIM3_Init>
  APP_Init();
 80035f0:	f7fe f8bd 	bl	800176e <APP_Init>
  APP_TestApplication();
 80035f4:	f7fe f8ba 	bl	800176c <APP_TestApplication>
 80035f8:	e7fe      	b.n	80035f8 <main+0x26>

080035fa <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80035fa:	e7fe      	b.n	80035fa <_Error_Handler>

080035fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035fc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	2001      	movs	r0, #1
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_MspInit+0x4c>)
 8003602:	6999      	ldr	r1, [r3, #24]
 8003604:	4301      	orrs	r1, r0
 8003606:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	4002      	ands	r2, r0
 8003610:	9200      	str	r2, [sp, #0]
 8003612:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003616:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	430a      	orrs	r2, r1
 800361a:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	400b      	ands	r3, r1
 8003622:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003624:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003628:	f7fe fbd2 	bl	8001dd0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2002      	movs	r0, #2
 8003630:	0011      	movs	r1, r2
 8003632:	4240      	negs	r0, r0
 8003634:	f7fe fbcc 	bl	8001dd0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003638:	2200      	movs	r2, #0
 800363a:	2001      	movs	r0, #1
 800363c:	0011      	movs	r1, r2
 800363e:	4240      	negs	r0, r0
 8003640:	f7fe fbc6 	bl	8001dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003644:	bd07      	pop	{r0, r1, r2, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	40021000 	.word	0x40021000

0800364c <NMI_Handler>:
 800364c:	4770      	bx	lr

0800364e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800364e:	e7fe      	b.n	800364e <HardFault_Handler>

08003650 <SVC_Handler>:
 8003650:	4770      	bx	lr

08003652 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003652:	4770      	bx	lr

08003654 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003654:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003656:	f7fe fa1d 	bl	8001a94 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800365a:	f7fe fc1c 	bl	8001e96 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800365e:	bd10      	pop	{r4, pc}

08003660 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC global interrupt.
*/
void ADC1_IRQHandler(void)
{
 8003660:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003662:	4802      	ldr	r0, [pc, #8]	; (800366c <ADC1_IRQHandler+0xc>)
 8003664:	f7fe face 	bl	8001c04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003668:	bd10      	pop	{r4, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000080 	.word	0x20000080

08003670 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003670:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003672:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8003674:	f7ff f903 	bl	800287e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003678:	bd10      	pop	{r4, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	2000010c 	.word	0x2000010c

08003680 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003680:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003682:	4802      	ldr	r0, [pc, #8]	; (800368c <USART1_IRQHandler+0xc>)
 8003684:	f7ff fdd0 	bl	8003228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003688:	bd10      	pop	{r4, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	2000014c 	.word	0x2000014c

08003690 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003690:	2101      	movs	r1, #1
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003694:	4811      	ldr	r0, [pc, #68]	; (80036dc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4002      	ands	r2, r0
 80036a0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	480e      	ldr	r0, [pc, #56]	; (80036e0 <SystemInit+0x50>)
 80036a6:	4002      	ands	r2, r0
 80036a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <SystemInit+0x54>)
 80036ae:	4002      	ands	r2, r0
 80036b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	480c      	ldr	r0, [pc, #48]	; (80036e8 <SystemInit+0x58>)
 80036b6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80036b8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80036ba:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4382      	bics	r2, r0
 80036c0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	4809      	ldr	r0, [pc, #36]	; (80036ec <SystemInit+0x5c>)
 80036c6:	4002      	ands	r2, r0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80036ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036cc:	438a      	bics	r2, r1
 80036ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]

}
 80036d4:	4770      	bx	lr
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08ffb80c 	.word	0x08ffb80c
 80036e0:	fef6ffff 	.word	0xfef6ffff
 80036e4:	fffbffff 	.word	0xfffbffff
 80036e8:	ffc0ffff 	.word	0xffc0ffff
 80036ec:	fffffeec 	.word	0xfffffeec

080036f0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80036f0:	b507      	push	{r0, r1, r2, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_TIM_PWM_MspInit+0x4c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d112      	bne.n	8003720 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036fa:	2080      	movs	r0, #128	; 0x80
 80036fc:	4a10      	ldr	r2, [pc, #64]	; (8003740 <HAL_TIM_PWM_MspInit+0x50>)
 80036fe:	0100      	lsls	r0, r0, #4
 8003700:	6991      	ldr	r1, [r2, #24]
 8003702:	4301      	orrs	r1, r0
 8003704:	6191      	str	r1, [r2, #24]
 8003706:	6993      	ldr	r3, [r2, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003708:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800370a:	4003      	ands	r3, r0
 800370c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800370e:	200d      	movs	r0, #13
 8003710:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003712:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003714:	f7fe fb5c 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003718:	200d      	movs	r0, #13
 800371a:	f7fe fb89 	bl	8001e30 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800371e:	bd07      	pop	{r0, r1, r2, pc}
  else if(tim_pwmHandle->Instance==TIM3)
 8003720:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_TIM_PWM_MspInit+0x54>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d1fb      	bne.n	800371e <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003726:	2002      	movs	r0, #2
 8003728:	4a05      	ldr	r2, [pc, #20]	; (8003740 <HAL_TIM_PWM_MspInit+0x50>)
 800372a:	69d1      	ldr	r1, [r2, #28]
 800372c:	4301      	orrs	r1, r0
 800372e:	61d1      	str	r1, [r2, #28]
 8003730:	69d3      	ldr	r3, [r2, #28]
 8003732:	4003      	ands	r3, r0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	9b01      	ldr	r3, [sp, #4]
}
 8003738:	e7f1      	b.n	800371e <HAL_TIM_PWM_MspInit+0x2e>
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40021000 	.word	0x40021000
 8003744:	40000400 	.word	0x40000400

08003748 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800374a:	6803      	ldr	r3, [r0, #0]
 800374c:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_TIM_MspPostInit+0x48>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10f      	bne.n	8003772 <HAL_TIM_MspPostInit+0x2a>
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003752:	23f0      	movs	r3, #240	; 0xf0
 8003754:	011b      	lsls	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003758:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003764:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	a901      	add	r1, sp, #4
 8003768:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = LEDHeartbeat_Pin|LEDOrange_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376a:	f7fe fbbb 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800376e:	b007      	add	sp, #28
 8003770:	bd00      	pop	{pc}
  else if(timHandle->Instance==TIM3)
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_TIM_MspPostInit+0x4c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d1fa      	bne.n	800376e <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = LEDHeartbeat_Pin|LEDOrange_Pin;
 8003778:	2303      	movs	r3, #3
 800377a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377c:	3b01      	subs	r3, #1
 800377e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003784:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003786:	3301      	adds	r3, #1
 8003788:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378a:	a901      	add	r1, sp, #4
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <HAL_TIM_MspPostInit+0x50>)
 800378e:	e7ec      	b.n	800376a <HAL_TIM_MspPostInit+0x22>
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	48000400 	.word	0x48000400

0800379c <MX_TIM1_Init>:
{
 800379c:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <MX_TIM1_Init+0xf8>)
 80037a0:	4c3d      	ldr	r4, [pc, #244]	; (8003898 <MX_TIM1_Init+0xfc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80037a2:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 80037a4:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 80037a6:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80037a8:	60a2      	str	r2, [r4, #8]
  htim1.Init.Period = 1000/2;
 80037aa:	32d5      	adds	r2, #213	; 0xd5
{
 80037ac:	b090      	sub	sp, #64	; 0x40
  htim1.Init.Period = 1000/2;
 80037ae:	32ff      	adds	r2, #255	; 0xff
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037b0:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 80037b2:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 1000/2;
 80037b4:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b6:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80037b8:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ba:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037bc:	f7ff f94c 	bl	8002a58 <HAL_TIM_PWM_Init>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d003      	beq.n	80037cc <MX_TIM1_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 80037c4:	2142      	movs	r1, #66	; 0x42
 80037c6:	4835      	ldr	r0, [pc, #212]	; (800389c <MX_TIM1_Init+0x100>)
 80037c8:	f7ff ff17 	bl	80035fa <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037cc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ce:	4669      	mov	r1, sp
 80037d0:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d2:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d4:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037d6:	f7ff fa75 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d003      	beq.n	80037e6 <MX_TIM1_Init+0x4a>
    _Error_Handler(__FILE__, __LINE__);
 80037de:	2149      	movs	r1, #73	; 0x49
 80037e0:	482e      	ldr	r0, [pc, #184]	; (800389c <MX_TIM1_Init+0x100>)
 80037e2:	f7ff ff0a 	bl	80035fa <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037e6:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e8:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ea:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 600;
 80037ec:	33f9      	adds	r3, #249	; 0xf9
 80037ee:	33ff      	adds	r3, #255	; 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f0:	a902      	add	r1, sp, #8
 80037f2:	0020      	movs	r0, r4
  sConfigOC.Pulse = 600;
 80037f4:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037f6:	9204      	str	r2, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037f8:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037fa:	9206      	str	r2, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037fc:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037fe:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003800:	f7ff f986 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 8003804:	2800      	cmp	r0, #0
 8003806:	d003      	beq.n	8003810 <MX_TIM1_Init+0x74>
    _Error_Handler(__FILE__, __LINE__);
 8003808:	2155      	movs	r1, #85	; 0x55
 800380a:	4824      	ldr	r0, [pc, #144]	; (800389c <MX_TIM1_Init+0x100>)
 800380c:	f7ff fef5 	bl	80035fa <_Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003810:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003812:	2204      	movs	r2, #4
 8003814:	a902      	add	r1, sp, #8
 8003816:	0020      	movs	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003818:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800381a:	f7ff f979 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 800381e:	2800      	cmp	r0, #0
 8003820:	d003      	beq.n	800382a <MX_TIM1_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 8003822:	215b      	movs	r1, #91	; 0x5b
 8003824:	481d      	ldr	r0, [pc, #116]	; (800389c <MX_TIM1_Init+0x100>)
 8003826:	f7ff fee8 	bl	80035fa <_Error_Handler>
  sConfigOC.Pulse = 0;
 800382a:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800382c:	2208      	movs	r2, #8
 800382e:	a902      	add	r1, sp, #8
 8003830:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0;
 8003832:	9303      	str	r3, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003834:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003836:	f7ff f96b 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 800383a:	2800      	cmp	r0, #0
 800383c:	d003      	beq.n	8003846 <MX_TIM1_Init+0xaa>
    _Error_Handler(__FILE__, __LINE__);
 800383e:	2162      	movs	r1, #98	; 0x62
 8003840:	4816      	ldr	r0, [pc, #88]	; (800389c <MX_TIM1_Init+0x100>)
 8003842:	f7ff feda 	bl	80035fa <_Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003846:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003848:	220c      	movs	r2, #12
 800384a:	a902      	add	r1, sp, #8
 800384c:	0020      	movs	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800384e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003850:	f7ff f95e 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 8003854:	2800      	cmp	r0, #0
 8003856:	d003      	beq.n	8003860 <MX_TIM1_Init+0xc4>
    _Error_Handler(__FILE__, __LINE__);
 8003858:	2168      	movs	r1, #104	; 0x68
 800385a:	4810      	ldr	r0, [pc, #64]	; (800389c <MX_TIM1_Init+0x100>)
 800385c:	f7ff fecd 	bl	80035fa <_Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003860:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003862:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003864:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003866:	a909      	add	r1, sp, #36	; 0x24
 8003868:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800386a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800386c:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800386e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003870:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003872:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003874:	920e      	str	r2, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003876:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003878:	f7ff fa46 	bl	8002d08 <HAL_TIMEx_ConfigBreakDeadTime>
 800387c:	2800      	cmp	r0, #0
 800387e:	d003      	beq.n	8003888 <MX_TIM1_Init+0xec>
    _Error_Handler(__FILE__, __LINE__);
 8003880:	2174      	movs	r1, #116	; 0x74
 8003882:	4806      	ldr	r0, [pc, #24]	; (800389c <MX_TIM1_Init+0x100>)
 8003884:	f7ff feb9 	bl	80035fa <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003888:	0020      	movs	r0, r4
 800388a:	f7ff ff5d 	bl	8003748 <HAL_TIM_MspPostInit>
}
 800388e:	b010      	add	sp, #64	; 0x40
 8003890:	bd10      	pop	{r4, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	40012c00 	.word	0x40012c00
 8003898:	2000010c 	.word	0x2000010c
 800389c:	08003bad 	.word	0x08003bad

080038a0 <MX_TIM3_Init>:
  htim3.Init.Period = 2400;
 80038a0:	2296      	movs	r2, #150	; 0x96
{
 80038a2:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 80038a4:	4b22      	ldr	r3, [pc, #136]	; (8003930 <MX_TIM3_Init+0x90>)
 80038a6:	4c23      	ldr	r4, [pc, #140]	; (8003934 <MX_TIM3_Init+0x94>)
  htim3.Init.Period = 2400;
 80038a8:	0112      	lsls	r2, r2, #4
  htim3.Instance = TIM3;
 80038aa:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 10000;
 80038ac:	4b22      	ldr	r3, [pc, #136]	; (8003938 <MX_TIM3_Init+0x98>)
  htim3.Init.Period = 2400;
 80038ae:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80038b0:	2280      	movs	r2, #128	; 0x80
  htim3.Init.Prescaler = 10000;
 80038b2:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b4:	2300      	movs	r3, #0
{
 80038b6:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80038b8:	0092      	lsls	r2, r2, #2
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038ba:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038bc:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80038be:	6122      	str	r2, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038c2:	f7ff f8c9 	bl	8002a58 <HAL_TIM_PWM_Init>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d003      	beq.n	80038d2 <MX_TIM3_Init+0x32>
    _Error_Handler(__FILE__, __LINE__);
 80038ca:	2188      	movs	r1, #136	; 0x88
 80038cc:	481b      	ldr	r0, [pc, #108]	; (800393c <MX_TIM3_Init+0x9c>)
 80038ce:	f7ff fe94 	bl	80035fa <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038d4:	a901      	add	r1, sp, #4
 80038d6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038da:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038dc:	f7ff f9f2 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d003      	beq.n	80038ec <MX_TIM3_Init+0x4c>
    _Error_Handler(__FILE__, __LINE__);
 80038e4:	218f      	movs	r1, #143	; 0x8f
 80038e6:	4815      	ldr	r0, [pc, #84]	; (800393c <MX_TIM3_Init+0x9c>)
 80038e8:	f7ff fe87 	bl	80035fa <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ec:	2360      	movs	r3, #96	; 0x60
 80038ee:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80038f0:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038f2:	2208      	movs	r2, #8
 80038f4:	a903      	add	r1, sp, #12
 80038f6:	0020      	movs	r0, r4
  sConfigOC.Pulse = 0;
 80038f8:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038fa:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038fc:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038fe:	f7ff f907 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 8003902:	2800      	cmp	r0, #0
 8003904:	d003      	beq.n	800390e <MX_TIM3_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 8003906:	2198      	movs	r1, #152	; 0x98
 8003908:	480c      	ldr	r0, [pc, #48]	; (800393c <MX_TIM3_Init+0x9c>)
 800390a:	f7ff fe76 	bl	80035fa <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800390e:	220c      	movs	r2, #12
 8003910:	a903      	add	r1, sp, #12
 8003912:	0020      	movs	r0, r4
 8003914:	f7ff f8fc 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 8003918:	2800      	cmp	r0, #0
 800391a:	d003      	beq.n	8003924 <MX_TIM3_Init+0x84>
    _Error_Handler(__FILE__, __LINE__);
 800391c:	219d      	movs	r1, #157	; 0x9d
 800391e:	4807      	ldr	r0, [pc, #28]	; (800393c <MX_TIM3_Init+0x9c>)
 8003920:	f7ff fe6b 	bl	80035fa <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003924:	0020      	movs	r0, r4
 8003926:	f7ff ff0f 	bl	8003748 <HAL_TIM_MspPostInit>
}
 800392a:	b00a      	add	sp, #40	; 0x28
 800392c:	bd10      	pop	{r4, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40000400 	.word	0x40000400
 8003934:	200000cc 	.word	0x200000cc
 8003938:	00002710 	.word	0x00002710
 800393c:	08003bad 	.word	0x08003bad

08003940 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <MX_USART1_UART_Init+0x34>)
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <MX_USART1_UART_Init+0x38>)
{
 8003944:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8003946:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003948:	23e1      	movs	r3, #225	; 0xe1
 800394a:	025b      	lsls	r3, r3, #9
 800394c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800394e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003950:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003952:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003954:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003956:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003958:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800395c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800395e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003960:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003962:	f7ff fba7 	bl	80030b4 <HAL_UART_Init>
 8003966:	2800      	cmp	r0, #0
 8003968:	d003      	beq.n	8003972 <MX_USART1_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800396a:	2144      	movs	r1, #68	; 0x44
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <MX_USART1_UART_Init+0x3c>)
 800396e:	f7ff fe44 	bl	80035fa <_Error_Handler>
  }

}
 8003972:	bd10      	pop	{r4, pc}
 8003974:	2000014c 	.word	0x2000014c
 8003978:	40013800 	.word	0x40013800
 800397c:	08003bba 	.word	0x08003bba

08003980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003980:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_UART_MspInit+0x50>)
 8003984:	6802      	ldr	r2, [r0, #0]
{
 8003986:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART1)
 8003988:	429a      	cmp	r2, r3
 800398a:	d11e      	bne.n	80039ca <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800398c:	2080      	movs	r0, #128	; 0x80
 800398e:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_UART_MspInit+0x54>)
 8003990:	01c0      	lsls	r0, r0, #7
 8003992:	6991      	ldr	r1, [r2, #24]
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003996:	4301      	orrs	r1, r0
 8003998:	6191      	str	r1, [r2, #24]
 800399a:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800399e:	4003      	ands	r3, r0
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039a4:	23c0      	movs	r3, #192	; 0xc0
 80039a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	3bbe      	subs	r3, #190	; 0xbe
 80039aa:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ac:	480a      	ldr	r0, [pc, #40]	; (80039d8 <HAL_UART_MspInit+0x58>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ae:	3301      	adds	r3, #1
 80039b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80039b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f7fe fa95 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039ba:	201b      	movs	r0, #27
 80039bc:	0022      	movs	r2, r4
 80039be:	0021      	movs	r1, r4
 80039c0:	f7fe fa06 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039c4:	201b      	movs	r0, #27
 80039c6:	f7fe fa33 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039ca:	b006      	add	sp, #24
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40021000 	.word	0x40021000
 80039d8:	48000400 	.word	0x48000400

080039dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039dc:	480d      	ldr	r0, [pc, #52]	; (8003a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039e0:	480d      	ldr	r0, [pc, #52]	; (8003a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80039e2:	490e      	ldr	r1, [pc, #56]	; (8003a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <LoopForever+0xe>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e8:	e002      	b.n	80039f0 <LoopCopyDataInit>

080039ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ee:	3304      	adds	r3, #4

080039f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039f4:	d3f9      	bcc.n	80039ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039f8:	4c0b      	ldr	r4, [pc, #44]	; (8003a28 <LoopForever+0x16>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039fc:	e001      	b.n	8003a02 <LoopFillZerobss>

080039fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a00:	3204      	adds	r2, #4

08003a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a04:	d3fb      	bcc.n	80039fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a06:	f7ff fe43 	bl	8003690 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003a0a:	f000 f811 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a0e:	f7ff fde0 	bl	80035d2 <main>

08003a12 <LoopForever>:

LoopForever:
    b LoopForever
 8003a12:	e7fe      	b.n	8003a12 <LoopForever>
  ldr   r0, =_estack
 8003a14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003a20:	08003bd4 	.word	0x08003bd4
  ldr r2, =_sbss
 8003a24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003a28:	200001bc 	.word	0x200001bc

08003a2c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a2c:	e7fe      	b.n	8003a2c <DMA1_Channel1_IRQHandler>
	...

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	2600      	movs	r6, #0
 8003a34:	4d0c      	ldr	r5, [pc, #48]	; (8003a68 <__libc_init_array+0x38>)
 8003a36:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	2600      	movs	r6, #0
 8003a42:	f000 f823 	bl	8003a8c <_init>
 8003a46:	4d0a      	ldr	r5, [pc, #40]	; (8003a70 <__libc_init_array+0x40>)
 8003a48:	4c0a      	ldr	r4, [pc, #40]	; (8003a74 <__libc_init_array+0x44>)
 8003a4a:	1b64      	subs	r4, r4, r5
 8003a4c:	10a4      	asrs	r4, r4, #2
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	00b3      	lsls	r3, r6, #2
 8003a56:	58eb      	ldr	r3, [r5, r3]
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	00b3      	lsls	r3, r6, #2
 8003a60:	58eb      	ldr	r3, [r5, r3]
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08003bcc 	.word	0x08003bcc
 8003a6c:	08003bcc 	.word	0x08003bcc
 8003a70:	08003bcc 	.word	0x08003bcc
 8003a74:	08003bd0 	.word	0x08003bd0

08003a78 <memcpy>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d100      	bne.n	8003a82 <memcpy+0xa>
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	5ccc      	ldrb	r4, [r1, r3]
 8003a84:	54c4      	strb	r4, [r0, r3]
 8003a86:	3301      	adds	r3, #1
 8003a88:	e7f8      	b.n	8003a7c <memcpy+0x4>
	...

08003a8c <_init>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

08003a98 <_fini>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr
